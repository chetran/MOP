
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 f83a 	bl	2000007c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	4b0b      	ldr	r3, [pc, #44]	; (2000004c <print_char+0x3c>)
20000020:	881b      	ldrh	r3, [r3, #0]
20000022:	b29b      	uxth	r3, r3
20000024:	001a      	movs	r2, r3
20000026:	2380      	movs	r3, #128	; 0x80
20000028:	4013      	ands	r3, r2
2000002a:	d0f8      	beq.n	2000001e <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
2000002c:	4a07      	ldr	r2, [pc, #28]	; (2000004c <print_char+0x3c>)
2000002e:	1dfb      	adds	r3, r7, #7
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b29b      	uxth	r3, r3
20000034:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	2b0a      	cmp	r3, #10
2000003c:	d102      	bne.n	20000044 <print_char+0x34>
		print_char('\r');
2000003e:	200d      	movs	r0, #13
20000040:	f7ff ffe6 	bl	20000010 <print_char>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40011000 	andmi	r1, r1, r0

20000050 <print>:

void print(char *s) {
20000050:	b580      	push	{r7, lr}
20000052:	b082      	sub	sp, #8
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000058:	e006      	b.n	20000068 <print+0x18>
		print_char(*(s++));
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	1c5a      	adds	r2, r3, #1
2000005e:	607a      	str	r2, [r7, #4]
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	0018      	movs	r0, r3
20000064:	f7ff ffd4 	bl	20000010 <print_char>
	while (*s != '\0') {
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2b00      	cmp	r3, #0
2000006e:	d1f4      	bne.n	2000005a <print+0xa>
	}
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	46bd      	mov	sp, r7
20000076:	b002      	add	sp, #8
20000078:	bd80      	pop	{r7, pc}
2000007a:	46c0      	nop			; (mov r8, r8)

2000007c <main>:
	move_ballobject,
	set_ballobject_speed,
};

void main(void)
{
2000007c:	b590      	push	{r4, r7, lr}
2000007e:	b083      	sub	sp, #12
20000080:	af00      	add	r7, sp, #0
	char c;
	POBJECT p = &ballobject;
20000082:	4b22      	ldr	r3, [pc, #136]	; (2000010c <main+0x90>)
20000084:	607b      	str	r3, [r7, #4]
	init_app();
20000086:	f000 f845 	bl	20000114 <init_app>
	graphic_initalize();
2000008a:	f000 fc1d 	bl	200008c8 <graphic_initalize>
	graphic_clear_screen();
2000008e:	f000 fc1e 	bl	200008ce <graphic_clear_screen>
	while(1)
	{
		p->move(p);
20000092:	687b      	ldr	r3, [r7, #4]
20000094:	69db      	ldr	r3, [r3, #28]
20000096:	687a      	ldr	r2, [r7, #4]
20000098:	0010      	movs	r0, r2
2000009a:	4798      	blx	r3
		delay_micro(100);
2000009c:	2064      	movs	r0, #100	; 0x64
2000009e:	f000 f891 	bl	200001c4 <delay_micro>
		c = keyb();
200000a2:	1cfc      	adds	r4, r7, #3
200000a4:	f000 f90e 	bl	200002c4 <keyb>
200000a8:	0003      	movs	r3, r0
200000aa:	7023      	strb	r3, [r4, #0]
		switch(c)
200000ac:	1cfb      	adds	r3, r7, #3
200000ae:	781b      	ldrb	r3, [r3, #0]
200000b0:	2b08      	cmp	r3, #8
200000b2:	d8ee      	bhi.n	20000092 <main+0x16>
200000b4:	009a      	lsls	r2, r3, #2
200000b6:	4b16      	ldr	r3, [pc, #88]	; (20000110 <main+0x94>)
200000b8:	18d3      	adds	r3, r2, r3
200000ba:	681b      	ldr	r3, [r3, #0]
200000bc:	469f      	mov	pc, r3
		{
			case 6: p->set_speed(p, 3, 0); break;
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	6a1b      	ldr	r3, [r3, #32]
200000c2:	6878      	ldr	r0, [r7, #4]
200000c4:	2200      	movs	r2, #0
200000c6:	2103      	movs	r1, #3
200000c8:	4798      	blx	r3
200000ca:	e01d      	b.n	20000108 <main+0x8c>
			case 4: p->set_speed(p, -3, 0); break;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	6a1b      	ldr	r3, [r3, #32]
200000d0:	2203      	movs	r2, #3
200000d2:	4251      	negs	r1, r2
200000d4:	6878      	ldr	r0, [r7, #4]
200000d6:	2200      	movs	r2, #0
200000d8:	4798      	blx	r3
200000da:	e015      	b.n	20000108 <main+0x8c>
			case 5: p->set_speed(p, 0, 0); break;
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	6a1b      	ldr	r3, [r3, #32]
200000e0:	6878      	ldr	r0, [r7, #4]
200000e2:	2200      	movs	r2, #0
200000e4:	2100      	movs	r1, #0
200000e6:	4798      	blx	r3
200000e8:	e00e      	b.n	20000108 <main+0x8c>
			case 2: p->set_speed(p, 0, -3); break;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	6a1b      	ldr	r3, [r3, #32]
200000ee:	2203      	movs	r2, #3
200000f0:	4252      	negs	r2, r2
200000f2:	6878      	ldr	r0, [r7, #4]
200000f4:	2100      	movs	r1, #0
200000f6:	4798      	blx	r3
200000f8:	e006      	b.n	20000108 <main+0x8c>
			case 8: p->set_speed(p, 0, 3); break;
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	6a1b      	ldr	r3, [r3, #32]
200000fe:	6878      	ldr	r0, [r7, #4]
20000100:	2203      	movs	r2, #3
20000102:	2100      	movs	r1, #0
20000104:	4798      	blx	r3
20000106:	46c0      	nop			; (mov r8, r8)
		p->move(p);
20000108:	e7c3      	b.n	20000092 <main+0x16>
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	20000928 	andcs	r0, r0, r8, lsr #18
20000110:	2000094c 	andcs	r0, r0, ip, asr #18

20000114 <init_app>:
	}

}

void init_app(void)
{
20000114:	b580      	push	{r7, lr}
20000116:	af00      	add	r7, sp, #0
	// Need to intials the outport 
	*((unsigned long *) 0x40023830) = 0x18;
20000118:	4b11      	ldr	r3, [pc, #68]	; (20000160 <init_app+0x4c>)
2000011a:	2218      	movs	r2, #24
2000011c:	601a      	str	r2, [r3, #0]

    *((volatile unsigned int *)0x40020C08) = 0x55555555; // MEDIUM SPEED
2000011e:	4b11      	ldr	r3, [pc, #68]	; (20000164 <init_app+0x50>)
20000120:	4a11      	ldr	r2, [pc, #68]	; (20000168 <init_app+0x54>)
20000122:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) &= 0x00000000; // MODER CONFIG
20000124:	4b11      	ldr	r3, [pc, #68]	; (2000016c <init_app+0x58>)
20000126:	681b      	ldr	r3, [r3, #0]
20000128:	4b10      	ldr	r3, [pc, #64]	; (2000016c <init_app+0x58>)
2000012a:	2200      	movs	r2, #0
2000012c:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) |= 0x55005555; // MODER CONFIG
2000012e:	4b0f      	ldr	r3, [pc, #60]	; (2000016c <init_app+0x58>)
20000130:	681a      	ldr	r2, [r3, #0]
20000132:	4b0e      	ldr	r3, [pc, #56]	; (2000016c <init_app+0x58>)
20000134:	490e      	ldr	r1, [pc, #56]	; (20000170 <init_app+0x5c>)
20000136:	430a      	orrs	r2, r1
20000138:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned short *) 0x40020C04) &= 0x0000; // TYPER CONFIG
2000013a:	4b0e      	ldr	r3, [pc, #56]	; (20000174 <init_app+0x60>)
2000013c:	881b      	ldrh	r3, [r3, #0]
2000013e:	4b0d      	ldr	r3, [pc, #52]	; (20000174 <init_app+0x60>)
20000140:	2200      	movs	r2, #0
20000142:	801a      	strh	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) &= 0x00000000; // PUPDR CONFIG
20000144:	4b0c      	ldr	r3, [pc, #48]	; (20000178 <init_app+0x64>)
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	4b0b      	ldr	r3, [pc, #44]	; (20000178 <init_app+0x64>)
2000014a:	2200      	movs	r2, #0
2000014c:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) |= 0x0000AAAA; // PUPDR CONFIG
2000014e:	4b0a      	ldr	r3, [pc, #40]	; (20000178 <init_app+0x64>)
20000150:	681a      	ldr	r2, [r3, #0]
20000152:	4b09      	ldr	r3, [pc, #36]	; (20000178 <init_app+0x64>)
20000154:	4909      	ldr	r1, [pc, #36]	; (2000017c <init_app+0x68>)
20000156:	430a      	orrs	r2, r1
20000158:	601a      	str	r2, [r3, #0]

}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	46bd      	mov	sp, r7
2000015e:	bd80      	pop	{r7, pc}
20000160:	40023830 	andmi	r3, r2, r0, lsr r8
20000164:	40020c08 	andmi	r0, r2, r8, lsl #24
20000168:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000016c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000170:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000174:	40020c04 	andmi	r0, r2, r4, lsl #24
20000178:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000017c:	0000aaaa 	andeq	sl, r0, sl, lsr #21

20000180 <delay_250ns>:

// ------------------------------------------------------- DELAYS ------------------------------------------------------------------------------- //
void delay_250ns(void)
{
20000180:	b580      	push	{r7, lr}
20000182:	af00      	add	r7, sp, #0
	// page 98
	*STK_CTRL = 0; // Resets SysTick
20000184:	4b0c      	ldr	r3, [pc, #48]	; (200001b8 <delay_250ns+0x38>)
20000186:	2200      	movs	r2, #0
20000188:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 / 4) - 1; // Minus 1 comes from how to processor counts 
2000018a:	4b0c      	ldr	r3, [pc, #48]	; (200001bc <delay_250ns+0x3c>)
2000018c:	2229      	movs	r2, #41	; 0x29
2000018e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0; // Resets counter register 
20000190:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <delay_250ns+0x40>)
20000192:	2200      	movs	r2, #0
20000194:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5; // Starts the count down 
20000196:	4b08      	ldr	r3, [pc, #32]	; (200001b8 <delay_250ns+0x38>)
20000198:	2205      	movs	r2, #5
2000019a:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000){} // while the countflag is 1 
2000019c:	46c0      	nop			; (mov r8, r8)
2000019e:	4b06      	ldr	r3, [pc, #24]	; (200001b8 <delay_250ns+0x38>)
200001a0:	681a      	ldr	r2, [r3, #0]
200001a2:	2380      	movs	r3, #128	; 0x80
200001a4:	025b      	lsls	r3, r3, #9
200001a6:	4013      	ands	r3, r2
200001a8:	d1f9      	bne.n	2000019e <delay_250ns+0x1e>
	*STK_CTRL = 0; // resets Systick 
200001aa:	4b03      	ldr	r3, [pc, #12]	; (200001b8 <delay_250ns+0x38>)
200001ac:	2200      	movs	r2, #0
200001ae:	601a      	str	r2, [r3, #0]
}
200001b0:	46c0      	nop			; (mov r8, r8)
200001b2:	46bd      	mov	sp, r7
200001b4:	bd80      	pop	{r7, pc}
200001b6:	46c0      	nop			; (mov r8, r8)
200001b8:	e000e010 	and	lr, r0, r0, lsl r0
200001bc:	e000e014 	and	lr, r0, r4, lsl r0
200001c0:	e000e018 	and	lr, r0, r8, lsl r0

200001c4 <delay_micro>:

void delay_micro(unsigned int ms)
{
200001c4:	b580      	push	{r7, lr}
200001c6:	b084      	sub	sp, #16
200001c8:	af00      	add	r7, sp, #0
200001ca:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	// 4 * 250 ns = 1 µs
	for (int i = 0; i < ms; i++)
200001cc:	2300      	movs	r3, #0
200001ce:	60fb      	str	r3, [r7, #12]
200001d0:	e00a      	b.n	200001e8 <delay_micro+0x24>
	{
		delay_250ns();
200001d2:	f7ff ffd5 	bl	20000180 <delay_250ns>
		delay_250ns();
200001d6:	f7ff ffd3 	bl	20000180 <delay_250ns>
		delay_250ns();
200001da:	f7ff ffd1 	bl	20000180 <delay_250ns>
		delay_250ns();
200001de:	f7ff ffcf 	bl	20000180 <delay_250ns>
	for (int i = 0; i < ms; i++)
200001e2:	68fb      	ldr	r3, [r7, #12]
200001e4:	3301      	adds	r3, #1
200001e6:	60fb      	str	r3, [r7, #12]
200001e8:	68fb      	ldr	r3, [r7, #12]
200001ea:	687a      	ldr	r2, [r7, #4]
200001ec:	429a      	cmp	r2, r3
200001ee:	d8f0      	bhi.n	200001d2 <delay_micro+0xe>
	}

}
200001f0:	46c0      	nop			; (mov r8, r8)
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	46bd      	mov	sp, r7
200001f6:	b004      	add	sp, #16
200001f8:	bd80      	pop	{r7, pc}

200001fa <delay_milli>:

void delay_milli(unsigned int ms)
{
200001fa:	b580      	push	{r7, lr}
200001fc:	b082      	sub	sp, #8
200001fe:	af00      	add	r7, sp, #0
20000200:	6078      	str	r0, [r7, #4]
		ms = ms / 1000;
		ms++;
	#endif
	// 1000 µs = 1 ms 
	
	delay_micro(ms * 1000);
20000202:	687a      	ldr	r2, [r7, #4]
20000204:	0013      	movs	r3, r2
20000206:	015b      	lsls	r3, r3, #5
20000208:	1a9b      	subs	r3, r3, r2
2000020a:	009b      	lsls	r3, r3, #2
2000020c:	189b      	adds	r3, r3, r2
2000020e:	00db      	lsls	r3, r3, #3
20000210:	0018      	movs	r0, r3
20000212:	f7ff ffd7 	bl	200001c4 <delay_micro>
}
20000216:	46c0      	nop			; (mov r8, r8)
20000218:	46bd      	mov	sp, r7
2000021a:	b002      	add	sp, #8
2000021c:	bd80      	pop	{r7, pc}

2000021e <ActivateRow>:

// ------------------------------------------------------- keypad ------------------------------------------------------------------------------- //

void ActivateRow( unsigned int row )
{
2000021e:	b580      	push	{r7, lr}
20000220:	b082      	sub	sp, #8
20000222:	af00      	add	r7, sp, #0
20000224:	6078      	str	r0, [r7, #4]

    /* Aktivera angiven rad hos tangentbordet, eller

    * deaktivera samtliga */
    switch( row )
20000226:	687b      	ldr	r3, [r7, #4]
20000228:	2b04      	cmp	r3, #4
2000022a:	d819      	bhi.n	20000260 <ActivateRow+0x42>
2000022c:	687b      	ldr	r3, [r7, #4]
2000022e:	009a      	lsls	r2, r3, #2
20000230:	4b0d      	ldr	r3, [pc, #52]	; (20000268 <ActivateRow+0x4a>)
20000232:	18d3      	adds	r3, r2, r3
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	469f      	mov	pc, r3
    {
    case 1: *GPIO_ODR_HIGH = 0x10; break;
20000238:	4b0c      	ldr	r3, [pc, #48]	; (2000026c <ActivateRow+0x4e>)
2000023a:	2210      	movs	r2, #16
2000023c:	701a      	strb	r2, [r3, #0]
2000023e:	e00f      	b.n	20000260 <ActivateRow+0x42>
    case 2: *GPIO_ODR_HIGH = 0x20; break;
20000240:	4b0a      	ldr	r3, [pc, #40]	; (2000026c <ActivateRow+0x4e>)
20000242:	2220      	movs	r2, #32
20000244:	701a      	strb	r2, [r3, #0]
20000246:	e00b      	b.n	20000260 <ActivateRow+0x42>
    case 3: *GPIO_ODR_HIGH = 0x40; break;
20000248:	4b08      	ldr	r3, [pc, #32]	; (2000026c <ActivateRow+0x4e>)
2000024a:	2240      	movs	r2, #64	; 0x40
2000024c:	701a      	strb	r2, [r3, #0]
2000024e:	e007      	b.n	20000260 <ActivateRow+0x42>
    case 4: *GPIO_ODR_HIGH = 0x80; break;
20000250:	4b06      	ldr	r3, [pc, #24]	; (2000026c <ActivateRow+0x4e>)
20000252:	2280      	movs	r2, #128	; 0x80
20000254:	701a      	strb	r2, [r3, #0]
20000256:	e003      	b.n	20000260 <ActivateRow+0x42>
    case 0: *GPIO_ODR_HIGH = 0x00; break;
20000258:	4b04      	ldr	r3, [pc, #16]	; (2000026c <ActivateRow+0x4e>)
2000025a:	2200      	movs	r2, #0
2000025c:	701a      	strb	r2, [r3, #0]
2000025e:	46c0      	nop			; (mov r8, r8)

    }

}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b002      	add	sp, #8
20000266:	bd80      	pop	{r7, pc}
20000268:	20000970 	andcs	r0, r0, r0, ror r9
2000026c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000270 <ReadColumn>:

int ReadColumn( void )
{
20000270:	b580      	push	{r7, lr}
20000272:	b082      	sub	sp, #8
20000274:	af00      	add	r7, sp, #0

    * är nedtryckt, returnera dess kolumnnummer,

    * annars, returnera 0 */
    unsigned char c;
    c = *GPIO_IDR_HIGH;
20000276:	4a12      	ldr	r2, [pc, #72]	; (200002c0 <ReadColumn+0x50>)
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	7812      	ldrb	r2, [r2, #0]
2000027c:	701a      	strb	r2, [r3, #0]
    if ( c & 0x8 )
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	2208      	movs	r2, #8
20000284:	4013      	ands	r3, r2
20000286:	d001      	beq.n	2000028c <ReadColumn+0x1c>
        return 4;
20000288:	2304      	movs	r3, #4
2000028a:	e015      	b.n	200002b8 <ReadColumn+0x48>
    if ( c & 0x4 )
2000028c:	1dfb      	adds	r3, r7, #7
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	2204      	movs	r2, #4
20000292:	4013      	ands	r3, r2
20000294:	d001      	beq.n	2000029a <ReadColumn+0x2a>
        return 3;
20000296:	2303      	movs	r3, #3
20000298:	e00e      	b.n	200002b8 <ReadColumn+0x48>
    if ( c & 0x2 )
2000029a:	1dfb      	adds	r3, r7, #7
2000029c:	781b      	ldrb	r3, [r3, #0]
2000029e:	2202      	movs	r2, #2
200002a0:	4013      	ands	r3, r2
200002a2:	d001      	beq.n	200002a8 <ReadColumn+0x38>
        return 2;
200002a4:	2302      	movs	r3, #2
200002a6:	e007      	b.n	200002b8 <ReadColumn+0x48>
    if ( c & 0x1 )
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	781b      	ldrb	r3, [r3, #0]
200002ac:	2201      	movs	r2, #1
200002ae:	4013      	ands	r3, r2
200002b0:	d001      	beq.n	200002b6 <ReadColumn+0x46>
        return 1;
200002b2:	2301      	movs	r3, #1
200002b4:	e000      	b.n	200002b8 <ReadColumn+0x48>

    return 0;
200002b6:	2300      	movs	r3, #0
}
200002b8:	0018      	movs	r0, r3
200002ba:	46bd      	mov	sp, r7
200002bc:	b002      	add	sp, #8
200002be:	bd80      	pop	{r7, pc}
200002c0:	40020c11 	andmi	r0, r2, r1, lsl ip

200002c4 <keyb>:

unsigned char keyb(void)
{
200002c4:	b590      	push	{r4, r7, lr}
200002c6:	b087      	sub	sp, #28
200002c8:	af00      	add	r7, sp, #0

    unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200002ca:	003b      	movs	r3, r7
200002cc:	4a16      	ldr	r2, [pc, #88]	; (20000328 <keyb+0x64>)
200002ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200002d0:	c313      	stmia	r3!, {r0, r1, r4}
200002d2:	6812      	ldr	r2, [r2, #0]
200002d4:	601a      	str	r2, [r3, #0]

    int row, col;
    for(row=1; row <=4 ; row++ )
200002d6:	2301      	movs	r3, #1
200002d8:	617b      	str	r3, [r7, #20]
200002da:	e019      	b.n	20000310 <keyb+0x4c>
    {
        ActivateRow( row );
200002dc:	697b      	ldr	r3, [r7, #20]
200002de:	0018      	movs	r0, r3
200002e0:	f7ff ff9d 	bl	2000021e <ActivateRow>
        if( (col = ReadColumn () ) )
200002e4:	f7ff ffc4 	bl	20000270 <ReadColumn>
200002e8:	0003      	movs	r3, r0
200002ea:	613b      	str	r3, [r7, #16]
200002ec:	693b      	ldr	r3, [r7, #16]
200002ee:	2b00      	cmp	r3, #0
200002f0:	d00b      	beq.n	2000030a <keyb+0x46>
        {
            ActivateRow( 0 );
200002f2:	2000      	movs	r0, #0
200002f4:	f7ff ff93 	bl	2000021e <ActivateRow>
            return key [4*(row-1)+(col-1) ];
200002f8:	697b      	ldr	r3, [r7, #20]
200002fa:	3b01      	subs	r3, #1
200002fc:	009a      	lsls	r2, r3, #2
200002fe:	693b      	ldr	r3, [r7, #16]
20000300:	3b01      	subs	r3, #1
20000302:	18d3      	adds	r3, r2, r3
20000304:	003a      	movs	r2, r7
20000306:	5cd3      	ldrb	r3, [r2, r3]
20000308:	e009      	b.n	2000031e <keyb+0x5a>
    for(row=1; row <=4 ; row++ )
2000030a:	697b      	ldr	r3, [r7, #20]
2000030c:	3301      	adds	r3, #1
2000030e:	617b      	str	r3, [r7, #20]
20000310:	697b      	ldr	r3, [r7, #20]
20000312:	2b04      	cmp	r3, #4
20000314:	dde2      	ble.n	200002dc <keyb+0x18>
        }
    }
    ActivateRow( 0 );
20000316:	2000      	movs	r0, #0
20000318:	f7ff ff81 	bl	2000021e <ActivateRow>
    return  0xFF;
2000031c:	23ff      	movs	r3, #255	; 0xff
}
2000031e:	0018      	movs	r0, r3
20000320:	46bd      	mov	sp, r7
20000322:	b007      	add	sp, #28
20000324:	bd90      	pop	{r4, r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	20000984 	andcs	r0, r0, r4, lsl #19

2000032c <swap>:

// ------------------------------------------------------- LCD MODULE ------------------------------------------------------------------------------- //
void swap(unsigned char *a, unsigned char *b)
{
2000032c:	b580      	push	{r7, lr}
2000032e:	b084      	sub	sp, #16
20000330:	af00      	add	r7, sp, #0
20000332:	6078      	str	r0, [r7, #4]
20000334:	6039      	str	r1, [r7, #0]
	unsigned char temp = *a;
20000336:	210f      	movs	r1, #15
20000338:	187b      	adds	r3, r7, r1
2000033a:	687a      	ldr	r2, [r7, #4]
2000033c:	7812      	ldrb	r2, [r2, #0]
2000033e:	701a      	strb	r2, [r3, #0]
	*a = *b;
20000340:	683b      	ldr	r3, [r7, #0]
20000342:	781a      	ldrb	r2, [r3, #0]
20000344:	687b      	ldr	r3, [r7, #4]
20000346:	701a      	strb	r2, [r3, #0]
	*b = temp;
20000348:	683b      	ldr	r3, [r7, #0]
2000034a:	187a      	adds	r2, r7, r1
2000034c:	7812      	ldrb	r2, [r2, #0]
2000034e:	701a      	strb	r2, [r3, #0]
}
20000350:	46c0      	nop			; (mov r8, r8)
20000352:	46bd      	mov	sp, r7
20000354:	b004      	add	sp, #16
20000356:	bd80      	pop	{r7, pc}

20000358 <draw_line>:

int draw_line(PLINE l)
{
20000358:	b590      	push	{r4, r7, lr}
2000035a:	b087      	sub	sp, #28
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
	// This just checks so that there are no points outside of the display which is 128x64 
	if ((l->p0.x < 1 && l->p0.x > 64) | (l->p1.x < 1 && l->p1.x > 64) | (l->p0.y < 1 && l->p0.y > 128) | (l->p1.y < 1 && l->p1.y > 128))
20000360:	687b      	ldr	r3, [r7, #4]
20000362:	781b      	ldrb	r3, [r3, #0]
20000364:	2b00      	cmp	r3, #0
20000366:	d105      	bne.n	20000374 <draw_line+0x1c>
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	781b      	ldrb	r3, [r3, #0]
2000036c:	2b40      	cmp	r3, #64	; 0x40
2000036e:	d901      	bls.n	20000374 <draw_line+0x1c>
20000370:	2301      	movs	r3, #1
20000372:	e000      	b.n	20000376 <draw_line+0x1e>
20000374:	2300      	movs	r3, #0
20000376:	1c1a      	adds	r2, r3, #0
20000378:	2301      	movs	r3, #1
2000037a:	4013      	ands	r3, r2
2000037c:	b2da      	uxtb	r2, r3
2000037e:	687b      	ldr	r3, [r7, #4]
20000380:	789b      	ldrb	r3, [r3, #2]
20000382:	2b00      	cmp	r3, #0
20000384:	d105      	bne.n	20000392 <draw_line+0x3a>
20000386:	687b      	ldr	r3, [r7, #4]
20000388:	789b      	ldrb	r3, [r3, #2]
2000038a:	2b40      	cmp	r3, #64	; 0x40
2000038c:	d901      	bls.n	20000392 <draw_line+0x3a>
2000038e:	2301      	movs	r3, #1
20000390:	e000      	b.n	20000394 <draw_line+0x3c>
20000392:	2300      	movs	r3, #0
20000394:	1c19      	adds	r1, r3, #0
20000396:	2301      	movs	r3, #1
20000398:	400b      	ands	r3, r1
2000039a:	b2db      	uxtb	r3, r3
2000039c:	4313      	orrs	r3, r2
2000039e:	b2db      	uxtb	r3, r3
200003a0:	001a      	movs	r2, r3
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	785b      	ldrb	r3, [r3, #1]
200003a6:	2b00      	cmp	r3, #0
200003a8:	d105      	bne.n	200003b6 <draw_line+0x5e>
200003aa:	687b      	ldr	r3, [r7, #4]
200003ac:	785b      	ldrb	r3, [r3, #1]
200003ae:	2b80      	cmp	r3, #128	; 0x80
200003b0:	d901      	bls.n	200003b6 <draw_line+0x5e>
200003b2:	2301      	movs	r3, #1
200003b4:	e000      	b.n	200003b8 <draw_line+0x60>
200003b6:	2300      	movs	r3, #0
200003b8:	431a      	orrs	r2, r3
200003ba:	687b      	ldr	r3, [r7, #4]
200003bc:	78db      	ldrb	r3, [r3, #3]
200003be:	2b00      	cmp	r3, #0
200003c0:	d105      	bne.n	200003ce <draw_line+0x76>
200003c2:	687b      	ldr	r3, [r7, #4]
200003c4:	78db      	ldrb	r3, [r3, #3]
200003c6:	2b80      	cmp	r3, #128	; 0x80
200003c8:	d901      	bls.n	200003ce <draw_line+0x76>
200003ca:	2301      	movs	r3, #1
200003cc:	e000      	b.n	200003d0 <draw_line+0x78>
200003ce:	2300      	movs	r3, #0
200003d0:	4313      	orrs	r3, r2
200003d2:	d001      	beq.n	200003d8 <draw_line+0x80>
		return 0;
200003d4:	2300      	movs	r3, #0
200003d6:	e0b6      	b.n	20000546 <draw_line+0x1ee>
	
	// Bresenhams Algorithm - honestly no idea how it works 
	char steep;
	if (abs(l->p0.y - l->p1.y) > abs(l->p0.x - l->p1.x))
200003d8:	687b      	ldr	r3, [r7, #4]
200003da:	785b      	ldrb	r3, [r3, #1]
200003dc:	001a      	movs	r2, r3
200003de:	687b      	ldr	r3, [r7, #4]
200003e0:	78db      	ldrb	r3, [r3, #3]
200003e2:	1ad3      	subs	r3, r2, r3
200003e4:	17d9      	asrs	r1, r3, #31
200003e6:	185a      	adds	r2, r3, r1
200003e8:	404a      	eors	r2, r1
200003ea:	687b      	ldr	r3, [r7, #4]
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	0019      	movs	r1, r3
200003f0:	687b      	ldr	r3, [r7, #4]
200003f2:	789b      	ldrb	r3, [r3, #2]
200003f4:	1acb      	subs	r3, r1, r3
200003f6:	17d9      	asrs	r1, r3, #31
200003f8:	185b      	adds	r3, r3, r1
200003fa:	404b      	eors	r3, r1
200003fc:	429a      	cmp	r2, r3
200003fe:	dd04      	ble.n	2000040a <draw_line+0xb2>
		steep = 1;
20000400:	2317      	movs	r3, #23
20000402:	18fb      	adds	r3, r7, r3
20000404:	2201      	movs	r2, #1
20000406:	701a      	strb	r2, [r3, #0]
20000408:	e003      	b.n	20000412 <draw_line+0xba>
	else
		steep = 0;
2000040a:	2317      	movs	r3, #23
2000040c:	18fb      	adds	r3, r7, r3
2000040e:	2200      	movs	r2, #0
20000410:	701a      	strb	r2, [r3, #0]
	if (steep)
20000412:	2317      	movs	r3, #23
20000414:	18fb      	adds	r3, r7, r3
20000416:	781b      	ldrb	r3, [r3, #0]
20000418:	2b00      	cmp	r3, #0
2000041a:	d00e      	beq.n	2000043a <draw_line+0xe2>
	{
		swap(&l->p0.x, &l->p0.y);
2000041c:	687a      	ldr	r2, [r7, #4]
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	3301      	adds	r3, #1
20000422:	0019      	movs	r1, r3
20000424:	0010      	movs	r0, r2
20000426:	f7ff ff81 	bl	2000032c <swap>
		swap(&l->p1.x, &l->p1.y);
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	1c9a      	adds	r2, r3, #2
2000042e:	687b      	ldr	r3, [r7, #4]
20000430:	3303      	adds	r3, #3
20000432:	0019      	movs	r1, r3
20000434:	0010      	movs	r0, r2
20000436:	f7ff ff79 	bl	2000032c <swap>
	}
	if (l->p0.x > l->p1.x)
2000043a:	687b      	ldr	r3, [r7, #4]
2000043c:	781a      	ldrb	r2, [r3, #0]
2000043e:	687b      	ldr	r3, [r7, #4]
20000440:	789b      	ldrb	r3, [r3, #2]
20000442:	429a      	cmp	r2, r3
20000444:	d90e      	bls.n	20000464 <draw_line+0x10c>
	{
		swap(&l->p0.x, &l->p1.x);
20000446:	687a      	ldr	r2, [r7, #4]
20000448:	687b      	ldr	r3, [r7, #4]
2000044a:	3302      	adds	r3, #2
2000044c:	0019      	movs	r1, r3
2000044e:	0010      	movs	r0, r2
20000450:	f7ff ff6c 	bl	2000032c <swap>
		swap(&l->p0.y, &l->p1.y);
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	1c5a      	adds	r2, r3, #1
20000458:	687b      	ldr	r3, [r7, #4]
2000045a:	3303      	adds	r3, #3
2000045c:	0019      	movs	r1, r3
2000045e:	0010      	movs	r0, r2
20000460:	f7ff ff64 	bl	2000032c <swap>
	}
	char deltax = l->p1.x - l->p0.x;
20000464:	687b      	ldr	r3, [r7, #4]
20000466:	7899      	ldrb	r1, [r3, #2]
20000468:	687b      	ldr	r3, [r7, #4]
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	230f      	movs	r3, #15
2000046e:	18fb      	adds	r3, r7, r3
20000470:	1a8a      	subs	r2, r1, r2
20000472:	701a      	strb	r2, [r3, #0]
	char deltay = abs(l->p1.y - l->p0.y);
20000474:	687b      	ldr	r3, [r7, #4]
20000476:	78db      	ldrb	r3, [r3, #3]
20000478:	001a      	movs	r2, r3
2000047a:	687b      	ldr	r3, [r7, #4]
2000047c:	785b      	ldrb	r3, [r3, #1]
2000047e:	1ad3      	subs	r3, r2, r3
20000480:	17d9      	asrs	r1, r3, #31
20000482:	185a      	adds	r2, r3, r1
20000484:	404a      	eors	r2, r1
20000486:	230e      	movs	r3, #14
20000488:	18fb      	adds	r3, r7, r3
2000048a:	701a      	strb	r2, [r3, #0]
	char error = 0;
2000048c:	2316      	movs	r3, #22
2000048e:	18fb      	adds	r3, r7, r3
20000490:	2200      	movs	r2, #0
20000492:	701a      	strb	r2, [r3, #0]
	char y = l->p0.y;
20000494:	2315      	movs	r3, #21
20000496:	18fb      	adds	r3, r7, r3
20000498:	687a      	ldr	r2, [r7, #4]
2000049a:	7852      	ldrb	r2, [r2, #1]
2000049c:	701a      	strb	r2, [r3, #0]
	char ystep;
	if (l->p0.y < l->p1.y)
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	785a      	ldrb	r2, [r3, #1]
200004a2:	687b      	ldr	r3, [r7, #4]
200004a4:	78db      	ldrb	r3, [r3, #3]
200004a6:	429a      	cmp	r2, r3
200004a8:	d204      	bcs.n	200004b4 <draw_line+0x15c>
		ystep = 1;
200004aa:	2314      	movs	r3, #20
200004ac:	18fb      	adds	r3, r7, r3
200004ae:	2201      	movs	r2, #1
200004b0:	701a      	strb	r2, [r3, #0]
200004b2:	e003      	b.n	200004bc <draw_line+0x164>
	else
		ystep = -1;
200004b4:	2314      	movs	r3, #20
200004b6:	18fb      	adds	r3, r7, r3
200004b8:	22ff      	movs	r2, #255	; 0xff
200004ba:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
200004bc:	687b      	ldr	r3, [r7, #4]
200004be:	781b      	ldrb	r3, [r3, #0]
200004c0:	613b      	str	r3, [r7, #16]
200004c2:	e039      	b.n	20000538 <draw_line+0x1e0>
	{
		if (steep)
200004c4:	2317      	movs	r3, #23
200004c6:	18fb      	adds	r3, r7, r3
200004c8:	781b      	ldrb	r3, [r3, #0]
200004ca:	2b00      	cmp	r3, #0
200004cc:	d008      	beq.n	200004e0 <draw_line+0x188>
			graphic_pixel_set(y, x);
200004ce:	2315      	movs	r3, #21
200004d0:	18fb      	adds	r3, r7, r3
200004d2:	781b      	ldrb	r3, [r3, #0]
200004d4:	693a      	ldr	r2, [r7, #16]
200004d6:	0011      	movs	r1, r2
200004d8:	0018      	movs	r0, r3
200004da:	f000 f9fb 	bl	200008d4 <graphic_pixel_set>
200004de:	e007      	b.n	200004f0 <draw_line+0x198>
		else
			graphic_pixel_set(x, y);
200004e0:	2315      	movs	r3, #21
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	781a      	ldrb	r2, [r3, #0]
200004e6:	693b      	ldr	r3, [r7, #16]
200004e8:	0011      	movs	r1, r2
200004ea:	0018      	movs	r0, r3
200004ec:	f000 f9f2 	bl	200008d4 <graphic_pixel_set>
		error = error + deltay;
200004f0:	2016      	movs	r0, #22
200004f2:	183b      	adds	r3, r7, r0
200004f4:	1839      	adds	r1, r7, r0
200004f6:	220e      	movs	r2, #14
200004f8:	18ba      	adds	r2, r7, r2
200004fa:	7809      	ldrb	r1, [r1, #0]
200004fc:	7812      	ldrb	r2, [r2, #0]
200004fe:	188a      	adds	r2, r1, r2
20000500:	701a      	strb	r2, [r3, #0]
		if (2 * error >= deltax)
20000502:	183b      	adds	r3, r7, r0
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	005a      	lsls	r2, r3, #1
20000508:	240f      	movs	r4, #15
2000050a:	193b      	adds	r3, r7, r4
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	429a      	cmp	r2, r3
20000510:	db0f      	blt.n	20000532 <draw_line+0x1da>
		{
			y = y +ystep;
20000512:	2215      	movs	r2, #21
20000514:	18bb      	adds	r3, r7, r2
20000516:	18b9      	adds	r1, r7, r2
20000518:	2214      	movs	r2, #20
2000051a:	18ba      	adds	r2, r7, r2
2000051c:	7809      	ldrb	r1, [r1, #0]
2000051e:	7812      	ldrb	r2, [r2, #0]
20000520:	188a      	adds	r2, r1, r2
20000522:	701a      	strb	r2, [r3, #0]
			error = error - deltax;
20000524:	183b      	adds	r3, r7, r0
20000526:	1839      	adds	r1, r7, r0
20000528:	193a      	adds	r2, r7, r4
2000052a:	7809      	ldrb	r1, [r1, #0]
2000052c:	7812      	ldrb	r2, [r2, #0]
2000052e:	1a8a      	subs	r2, r1, r2
20000530:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
20000532:	693b      	ldr	r3, [r7, #16]
20000534:	3301      	adds	r3, #1
20000536:	613b      	str	r3, [r7, #16]
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	789b      	ldrb	r3, [r3, #2]
2000053c:	001a      	movs	r2, r3
2000053e:	693b      	ldr	r3, [r7, #16]
20000540:	4293      	cmp	r3, r2
20000542:	ddbf      	ble.n	200004c4 <draw_line+0x16c>
		}
	}

	// Returns 1 if it succeded
	return 1;
20000544:	2301      	movs	r3, #1
}
20000546:	0018      	movs	r0, r3
20000548:	46bd      	mov	sp, r7
2000054a:	b007      	add	sp, #28
2000054c:	bd90      	pop	{r4, r7, pc}

2000054e <draw_rectangle>:

void draw_rectangle(PRECT r)
{
2000054e:	b5f0      	push	{r4, r5, r6, r7, lr}
20000550:	b087      	sub	sp, #28
20000552:	af00      	add	r7, sp, #0
20000554:	6078      	str	r0, [r7, #4]
	POINT start;
	POINT end;
	LINE side;
	// Honestly would never write code like this but in the book it looked like this. 
	start.x = r->p.x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
20000556:	687b      	ldr	r3, [r7, #4]
20000558:	781a      	ldrb	r2, [r3, #0]
2000055a:	2114      	movs	r1, #20
2000055c:	187b      	adds	r3, r7, r1
2000055e:	701a      	strb	r2, [r3, #0]
20000560:	687b      	ldr	r3, [r7, #4]
20000562:	785a      	ldrb	r2, [r3, #1]
20000564:	187b      	adds	r3, r7, r1
20000566:	705a      	strb	r2, [r3, #1]
20000568:	687b      	ldr	r3, [r7, #4]
2000056a:	781a      	ldrb	r2, [r3, #0]
2000056c:	687b      	ldr	r3, [r7, #4]
2000056e:	789b      	ldrb	r3, [r3, #2]
20000570:	18d3      	adds	r3, r2, r3
20000572:	b2da      	uxtb	r2, r3
20000574:	2510      	movs	r5, #16
20000576:	197b      	adds	r3, r7, r5
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	687b      	ldr	r3, [r7, #4]
2000057c:	785a      	ldrb	r2, [r3, #1]
2000057e:	197b      	adds	r3, r7, r5
20000580:	705a      	strb	r2, [r3, #1]
20000582:	260c      	movs	r6, #12
20000584:	19bb      	adds	r3, r7, r6
20000586:	000c      	movs	r4, r1
20000588:	187a      	adds	r2, r7, r1
2000058a:	8812      	ldrh	r2, [r2, #0]
2000058c:	801a      	strh	r2, [r3, #0]
2000058e:	19bb      	adds	r3, r7, r6
20000590:	2102      	movs	r1, #2
20000592:	197a      	adds	r2, r7, r5
20000594:	8812      	ldrh	r2, [r2, #0]
20000596:	525a      	strh	r2, [r3, r1]
20000598:	19bb      	adds	r3, r7, r6
2000059a:	0018      	movs	r0, r3
2000059c:	f7ff fedc 	bl	20000358 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	781a      	ldrb	r2, [r3, #0]
200005a4:	687b      	ldr	r3, [r7, #4]
200005a6:	789b      	ldrb	r3, [r3, #2]
200005a8:	18d3      	adds	r3, r2, r3
200005aa:	b2da      	uxtb	r2, r3
200005ac:	0021      	movs	r1, r4
200005ae:	187b      	adds	r3, r7, r1
200005b0:	701a      	strb	r2, [r3, #0]
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	785a      	ldrb	r2, [r3, #1]
200005b6:	187b      	adds	r3, r7, r1
200005b8:	705a      	strb	r2, [r3, #1]
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	781a      	ldrb	r2, [r3, #0]
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	789b      	ldrb	r3, [r3, #2]
200005c2:	18d3      	adds	r3, r2, r3
200005c4:	b2da      	uxtb	r2, r3
200005c6:	197b      	adds	r3, r7, r5
200005c8:	701a      	strb	r2, [r3, #0]
200005ca:	687b      	ldr	r3, [r7, #4]
200005cc:	785a      	ldrb	r2, [r3, #1]
200005ce:	687b      	ldr	r3, [r7, #4]
200005d0:	78db      	ldrb	r3, [r3, #3]
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	b2da      	uxtb	r2, r3
200005d6:	197b      	adds	r3, r7, r5
200005d8:	705a      	strb	r2, [r3, #1]
200005da:	19bb      	adds	r3, r7, r6
200005dc:	000c      	movs	r4, r1
200005de:	187a      	adds	r2, r7, r1
200005e0:	8812      	ldrh	r2, [r2, #0]
200005e2:	801a      	strh	r2, [r3, #0]
200005e4:	19bb      	adds	r3, r7, r6
200005e6:	2102      	movs	r1, #2
200005e8:	197a      	adds	r2, r7, r5
200005ea:	8812      	ldrh	r2, [r2, #0]
200005ec:	525a      	strh	r2, [r3, r1]
200005ee:	19bb      	adds	r3, r7, r6
200005f0:	0018      	movs	r0, r3
200005f2:	f7ff feb1 	bl	20000358 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	781a      	ldrb	r2, [r3, #0]
200005fa:	687b      	ldr	r3, [r7, #4]
200005fc:	789b      	ldrb	r3, [r3, #2]
200005fe:	18d3      	adds	r3, r2, r3
20000600:	b2da      	uxtb	r2, r3
20000602:	0021      	movs	r1, r4
20000604:	187b      	adds	r3, r7, r1
20000606:	701a      	strb	r2, [r3, #0]
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	785a      	ldrb	r2, [r3, #1]
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	78db      	ldrb	r3, [r3, #3]
20000610:	18d3      	adds	r3, r2, r3
20000612:	b2da      	uxtb	r2, r3
20000614:	187b      	adds	r3, r7, r1
20000616:	705a      	strb	r2, [r3, #1]
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	781a      	ldrb	r2, [r3, #0]
2000061c:	197b      	adds	r3, r7, r5
2000061e:	701a      	strb	r2, [r3, #0]
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	785a      	ldrb	r2, [r3, #1]
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	78db      	ldrb	r3, [r3, #3]
20000628:	18d3      	adds	r3, r2, r3
2000062a:	b2da      	uxtb	r2, r3
2000062c:	197b      	adds	r3, r7, r5
2000062e:	705a      	strb	r2, [r3, #1]
20000630:	19bb      	adds	r3, r7, r6
20000632:	000c      	movs	r4, r1
20000634:	187a      	adds	r2, r7, r1
20000636:	8812      	ldrh	r2, [r2, #0]
20000638:	801a      	strh	r2, [r3, #0]
2000063a:	19bb      	adds	r3, r7, r6
2000063c:	2102      	movs	r1, #2
2000063e:	197a      	adds	r2, r7, r5
20000640:	8812      	ldrh	r2, [r2, #0]
20000642:	525a      	strh	r2, [r3, r1]
20000644:	19bb      	adds	r3, r7, r6
20000646:	0018      	movs	r0, r3
20000648:	f7ff fe86 	bl	20000358 <draw_line>
	start.x = r->p.x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	781a      	ldrb	r2, [r3, #0]
20000650:	0021      	movs	r1, r4
20000652:	187b      	adds	r3, r7, r1
20000654:	701a      	strb	r2, [r3, #0]
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	785a      	ldrb	r2, [r3, #1]
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	78db      	ldrb	r3, [r3, #3]
2000065e:	18d3      	adds	r3, r2, r3
20000660:	b2da      	uxtb	r2, r3
20000662:	187b      	adds	r3, r7, r1
20000664:	705a      	strb	r2, [r3, #1]
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	781a      	ldrb	r2, [r3, #0]
2000066a:	197b      	adds	r3, r7, r5
2000066c:	701a      	strb	r2, [r3, #0]
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	785a      	ldrb	r2, [r3, #1]
20000672:	197b      	adds	r3, r7, r5
20000674:	705a      	strb	r2, [r3, #1]
20000676:	19bb      	adds	r3, r7, r6
20000678:	187a      	adds	r2, r7, r1
2000067a:	8812      	ldrh	r2, [r2, #0]
2000067c:	801a      	strh	r2, [r3, #0]
2000067e:	19bb      	adds	r3, r7, r6
20000680:	2102      	movs	r1, #2
20000682:	197a      	adds	r2, r7, r5
20000684:	8812      	ldrh	r2, [r2, #0]
20000686:	525a      	strh	r2, [r3, r1]
20000688:	19bb      	adds	r3, r7, r6
2000068a:	0018      	movs	r0, r3
2000068c:	f7ff fe64 	bl	20000358 <draw_line>
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46bd      	mov	sp, r7
20000694:	b007      	add	sp, #28
20000696:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000698 <draw_polygon>:

void draw_polygon(PPOLYPOINT polygon)
{
20000698:	b5b0      	push	{r4, r5, r7, lr}
2000069a:	b088      	sub	sp, #32
2000069c:	af00      	add	r7, sp, #0
2000069e:	6078      	str	r0, [r7, #4]
	POLYPOINT p0;
	p0.x = polygon->x;
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	781a      	ldrb	r2, [r3, #0]
200006a4:	2114      	movs	r1, #20
200006a6:	187b      	adds	r3, r7, r1
200006a8:	701a      	strb	r2, [r3, #0]
	p0.y = polygon->y;
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	785a      	ldrb	r2, [r3, #1]
200006ae:	187b      	adds	r3, r7, r1
200006b0:	705a      	strb	r2, [r3, #1]
	PPOLYPOINT ptr = polygon->next;
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	685b      	ldr	r3, [r3, #4]
200006b6:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
200006b8:	e02a      	b.n	20000710 <draw_polygon+0x78>
	{
		POLYPOINT p1;
		p1.x = ptr->x;
200006ba:	69fb      	ldr	r3, [r7, #28]
200006bc:	781a      	ldrb	r2, [r3, #0]
200006be:	210c      	movs	r1, #12
200006c0:	187b      	adds	r3, r7, r1
200006c2:	701a      	strb	r2, [r3, #0]
		p1.y = ptr->y;
200006c4:	69fb      	ldr	r3, [r7, #28]
200006c6:	785a      	ldrb	r2, [r3, #1]
200006c8:	187b      	adds	r3, r7, r1
200006ca:	705a      	strb	r2, [r3, #1]
		LINE side = {{p0.x, p0.y}, {p1.x, p1.y}};
200006cc:	2514      	movs	r5, #20
200006ce:	197b      	adds	r3, r7, r5
200006d0:	781a      	ldrb	r2, [r3, #0]
200006d2:	2008      	movs	r0, #8
200006d4:	183b      	adds	r3, r7, r0
200006d6:	701a      	strb	r2, [r3, #0]
200006d8:	197b      	adds	r3, r7, r5
200006da:	785a      	ldrb	r2, [r3, #1]
200006dc:	183b      	adds	r3, r7, r0
200006de:	705a      	strb	r2, [r3, #1]
200006e0:	187b      	adds	r3, r7, r1
200006e2:	781a      	ldrb	r2, [r3, #0]
200006e4:	183b      	adds	r3, r7, r0
200006e6:	709a      	strb	r2, [r3, #2]
200006e8:	000c      	movs	r4, r1
200006ea:	187b      	adds	r3, r7, r1
200006ec:	785a      	ldrb	r2, [r3, #1]
200006ee:	183b      	adds	r3, r7, r0
200006f0:	70da      	strb	r2, [r3, #3]
		draw_line(&side);
200006f2:	183b      	adds	r3, r7, r0
200006f4:	0018      	movs	r0, r3
200006f6:	f7ff fe2f 	bl	20000358 <draw_line>
		p0.x = p1.x; p0.y = p1.y;
200006fa:	193b      	adds	r3, r7, r4
200006fc:	781a      	ldrb	r2, [r3, #0]
200006fe:	197b      	adds	r3, r7, r5
20000700:	701a      	strb	r2, [r3, #0]
20000702:	193b      	adds	r3, r7, r4
20000704:	785a      	ldrb	r2, [r3, #1]
20000706:	197b      	adds	r3, r7, r5
20000708:	705a      	strb	r2, [r3, #1]
		ptr = ptr->next;
2000070a:	69fb      	ldr	r3, [r7, #28]
2000070c:	685b      	ldr	r3, [r3, #4]
2000070e:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
20000710:	69fb      	ldr	r3, [r7, #28]
20000712:	2b00      	cmp	r3, #0
20000714:	d1d1      	bne.n	200006ba <draw_polygon+0x22>
	}
}
20000716:	46c0      	nop			; (mov r8, r8)
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	46bd      	mov	sp, r7
2000071c:	b008      	add	sp, #32
2000071e:	bdb0      	pop	{r4, r5, r7, pc}

20000720 <draw_ballobject>:

// ------------------------------------------------------- Objects ------------------------------------------------------------------------------- //
void draw_ballobject(POBJECT o)
{
20000720:	b580      	push	{r7, lr}
20000722:	b084      	sub	sp, #16
20000724:	af00      	add	r7, sp, #0
20000726:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	681b      	ldr	r3, [r3, #0]
2000072c:	681b      	ldr	r3, [r3, #0]
2000072e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < pixels; i++)
20000730:	2300      	movs	r3, #0
20000732:	60fb      	str	r3, [r7, #12]
20000734:	e01b      	b.n	2000076e <draw_ballobject+0x4e>
	{
		// (o->geo->px+i) gets the position of one of the pixels and then the period after gets x/y value of that point
		graphic_pixel_set(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	68da      	ldr	r2, [r3, #12]
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	681b      	ldr	r3, [r3, #0]
2000073e:	330c      	adds	r3, #12
20000740:	0019      	movs	r1, r3
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	005b      	lsls	r3, r3, #1
20000746:	18cb      	adds	r3, r1, r3
20000748:	781b      	ldrb	r3, [r3, #0]
2000074a:	18d0      	adds	r0, r2, r3
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	691a      	ldr	r2, [r3, #16]
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	681b      	ldr	r3, [r3, #0]
20000754:	330c      	adds	r3, #12
20000756:	0019      	movs	r1, r3
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	005b      	lsls	r3, r3, #1
2000075c:	18cb      	adds	r3, r1, r3
2000075e:	785b      	ldrb	r3, [r3, #1]
20000760:	18d3      	adds	r3, r2, r3
20000762:	0019      	movs	r1, r3
20000764:	f000 f8b6 	bl	200008d4 <graphic_pixel_set>
	for (int i = 0; i < pixels; i++)
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	3301      	adds	r3, #1
2000076c:	60fb      	str	r3, [r7, #12]
2000076e:	68fa      	ldr	r2, [r7, #12]
20000770:	68bb      	ldr	r3, [r7, #8]
20000772:	429a      	cmp	r2, r3
20000774:	dbdf      	blt.n	20000736 <draw_ballobject+0x16>
	}

}
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46c0      	nop			; (mov r8, r8)
2000077a:	46bd      	mov	sp, r7
2000077c:	b004      	add	sp, #16
2000077e:	bd80      	pop	{r7, pc}

20000780 <clear_ballobject>:

void clear_ballobject(POBJECT o)
{
20000780:	b580      	push	{r7, lr}
20000782:	b084      	sub	sp, #16
20000784:	af00      	add	r7, sp, #0
20000786:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	681b      	ldr	r3, [r3, #0]
2000078c:	681b      	ldr	r3, [r3, #0]
2000078e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pixels; i++)
20000790:	2300      	movs	r3, #0
20000792:	60fb      	str	r3, [r7, #12]
20000794:	e01b      	b.n	200007ce <clear_ballobject+0x4e>
	{
		graphic_pixel_clear(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000796:	687b      	ldr	r3, [r7, #4]
20000798:	68da      	ldr	r2, [r3, #12]
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	681b      	ldr	r3, [r3, #0]
2000079e:	330c      	adds	r3, #12
200007a0:	0019      	movs	r1, r3
200007a2:	68fb      	ldr	r3, [r7, #12]
200007a4:	005b      	lsls	r3, r3, #1
200007a6:	18cb      	adds	r3, r1, r3
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	18d0      	adds	r0, r2, r3
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	691a      	ldr	r2, [r3, #16]
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	681b      	ldr	r3, [r3, #0]
200007b4:	330c      	adds	r3, #12
200007b6:	0019      	movs	r1, r3
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	005b      	lsls	r3, r3, #1
200007bc:	18cb      	adds	r3, r1, r3
200007be:	785b      	ldrb	r3, [r3, #1]
200007c0:	18d3      	adds	r3, r2, r3
200007c2:	0019      	movs	r1, r3
200007c4:	f000 f889 	bl	200008da <graphic_pixel_clear>
	for (int i = 0; i < pixels; i++)
200007c8:	68fb      	ldr	r3, [r7, #12]
200007ca:	3301      	adds	r3, #1
200007cc:	60fb      	str	r3, [r7, #12]
200007ce:	68fa      	ldr	r2, [r7, #12]
200007d0:	68bb      	ldr	r3, [r7, #8]
200007d2:	429a      	cmp	r2, r3
200007d4:	dbdf      	blt.n	20000796 <clear_ballobject+0x16>
	}

}
200007d6:	46c0      	nop			; (mov r8, r8)
200007d8:	46c0      	nop			; (mov r8, r8)
200007da:	46bd      	mov	sp, r7
200007dc:	b004      	add	sp, #16
200007de:	bd80      	pop	{r7, pc}

200007e0 <move_ballobject>:

void move_ballobject(POBJECT o)
{
200007e0:	b580      	push	{r7, lr}
200007e2:	b084      	sub	sp, #16
200007e4:	af00      	add	r7, sp, #0
200007e6:	6078      	str	r0, [r7, #4]
	clear_ballobject(o);
200007e8:	687b      	ldr	r3, [r7, #4]
200007ea:	0018      	movs	r0, r3
200007ec:	f7ff ffc8 	bl	20000780 <clear_ballobject>
	int newx = o->dirx + o->posx;
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	685a      	ldr	r2, [r3, #4]
200007f4:	687b      	ldr	r3, [r7, #4]
200007f6:	68db      	ldr	r3, [r3, #12]
200007f8:	18d3      	adds	r3, r2, r3
200007fa:	60fb      	str	r3, [r7, #12]
	int newy = o->diry + o->posy;
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	689a      	ldr	r2, [r3, #8]
20000800:	687b      	ldr	r3, [r7, #4]
20000802:	691b      	ldr	r3, [r3, #16]
20000804:	18d3      	adds	r3, r2, r3
20000806:	60bb      	str	r3, [r7, #8]
	if (newx < 1) // touches left side
20000808:	68fb      	ldr	r3, [r7, #12]
2000080a:	2b00      	cmp	r3, #0
2000080c:	dc0c      	bgt.n	20000828 <move_ballobject+0x48>
	{
		// if its towards the left side x dir is negative which means we need to set it as positive 
		o->dirx = abs(o->dirx);
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	685b      	ldr	r3, [r3, #4]
20000812:	17d9      	asrs	r1, r3, #31
20000814:	185a      	adds	r2, r3, r1
20000816:	404a      	eors	r2, r1
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	685a      	ldr	r2, [r3, #4]
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	68db      	ldr	r3, [r3, #12]
20000824:	18d3      	adds	r3, r2, r3
20000826:	60fb      	str	r3, [r7, #12]
	}	
	if (newx > 128) // touches right side
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	2b80      	cmp	r3, #128	; 0x80
2000082c:	dd0a      	ble.n	20000844 <move_ballobject+0x64>
	{
		// if it touches right side x dir is positive and we need to set it negative. 
		o->dirx = -(o->dirx);
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	685b      	ldr	r3, [r3, #4]
20000832:	425a      	negs	r2, r3
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	685a      	ldr	r2, [r3, #4]
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	68db      	ldr	r3, [r3, #12]
20000840:	18d3      	adds	r3, r2, r3
20000842:	60fb      	str	r3, [r7, #12]
	}
	if (newy < 1) // touches top side
20000844:	68bb      	ldr	r3, [r7, #8]
20000846:	2b00      	cmp	r3, #0
20000848:	dc0c      	bgt.n	20000864 <move_ballobject+0x84>
	{
		o->diry = abs(o->diry);
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	689b      	ldr	r3, [r3, #8]
2000084e:	17d9      	asrs	r1, r3, #31
20000850:	185a      	adds	r2, r3, r1
20000852:	404a      	eors	r2, r1
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	689a      	ldr	r2, [r3, #8]
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	691b      	ldr	r3, [r3, #16]
20000860:	18d3      	adds	r3, r2, r3
20000862:	60bb      	str	r3, [r7, #8]
	}
	if (newy > 64) // touches bottom side
20000864:	68bb      	ldr	r3, [r7, #8]
20000866:	2b40      	cmp	r3, #64	; 0x40
20000868:	dd0a      	ble.n	20000880 <move_ballobject+0xa0>
	{
		o->diry = -(o->diry);
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	689b      	ldr	r3, [r3, #8]
2000086e:	425a      	negs	r2, r3
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	689a      	ldr	r2, [r3, #8]
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	691b      	ldr	r3, [r3, #16]
2000087c:	18d3      	adds	r3, r2, r3
2000087e:	60bb      	str	r3, [r7, #8]
	}
	o->posx = newx;
20000880:	687b      	ldr	r3, [r7, #4]
20000882:	68fa      	ldr	r2, [r7, #12]
20000884:	60da      	str	r2, [r3, #12]
	o->posy = newy;
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	68ba      	ldr	r2, [r7, #8]
2000088a:	611a      	str	r2, [r3, #16]
	draw_ballobject(o);
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	0018      	movs	r0, r3
20000890:	f7ff ff46 	bl	20000720 <draw_ballobject>
}
20000894:	46c0      	nop			; (mov r8, r8)
20000896:	46bd      	mov	sp, r7
20000898:	b004      	add	sp, #16
2000089a:	bd80      	pop	{r7, pc}

2000089c <set_ballobject_speed>:

void set_ballobject_speed(POBJECT o, int speedx, int speedy)
{
2000089c:	b580      	push	{r7, lr}
2000089e:	b084      	sub	sp, #16
200008a0:	af00      	add	r7, sp, #0
200008a2:	60f8      	str	r0, [r7, #12]
200008a4:	60b9      	str	r1, [r7, #8]
200008a6:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
200008a8:	68fb      	ldr	r3, [r7, #12]
200008aa:	68ba      	ldr	r2, [r7, #8]
200008ac:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
200008ae:	68fb      	ldr	r3, [r7, #12]
200008b0:	687a      	ldr	r2, [r7, #4]
200008b2:	609a      	str	r2, [r3, #8]
}
200008b4:	46c0      	nop			; (mov r8, r8)
200008b6:	46bd      	mov	sp, r7
200008b8:	b004      	add	sp, #16
200008ba:	bd80      	pop	{r7, pc}

200008bc <my_irq_handler>:

// ------------------------------------------------------- Interrupt ------------------------------------------------------------------------------- //
void my_irq_handler(void)
{
200008bc:	b580      	push	{r7, lr}
200008be:	af00      	add	r7, sp, #0
	// tänd diodramp på port D 
	//*GPIO_D_MODER = 0x00005555;
	//*GPIO_D_ODR_LOW = 0xFF;
}
200008c0:	46c0      	nop			; (mov r8, r8)
200008c2:	46bd      	mov	sp, r7
200008c4:	bd80      	pop	{r7, pc}
200008c6:	46c0      	nop			; (mov r8, r8)

200008c8 <graphic_initalize>:

// ------------------------------------------------------- MD407 BUILT IN FUNCTIONS ------------------------------------------------------------------------------- //
__attribute__((naked))
void graphic_initalize(void)
{
200008c8:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
200008cc:	46c0      	nop			; (mov r8, r8)

200008ce <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
200008ce:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
200008d2:	46c0      	nop			; (mov r8, r8)

200008d4 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(void)
{
200008d4:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
200008d8:	46c0      	nop			; (mov r8, r8)

200008da <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(void)
{
200008da:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
200008de:	46c0      	nop			; (mov r8, r8)

200008e0 <ball_geometry>:
200008e0:	0000000c 	andeq	r0, r0, ip
200008e4:	00000004 	andeq	r0, r0, r4
200008e8:	00000004 	andeq	r0, r0, r4
200008ec:	02000100 	andeq	r0, r0, #0, 2
200008f0:	01010001 	tsteq	r1, r1
200008f4:	03010201 	movweq	r0, #4609	; 0x1201
200008f8:	01020002 	tsteq	r2, r2
200008fc:	03020202 	movweq	r0, #8706	; 0x2202
20000900:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000928 <ballobject>:
20000928:	200008e0 	andcs	r0, r0, r0, ror #17
	...
20000934:	00000001 	andeq	r0, r0, r1
20000938:	00000001 	andeq	r0, r0, r1
2000093c:	20000721 	andcs	r0, r0, r1, lsr #14
20000940:	20000781 	andcs	r0, r0, r1, lsl #15
20000944:	200007e1 	andcs	r0, r0, r1, ror #15
20000948:	2000089d 	mulcs	r0, sp, r8
2000094c:	20000092 	mulcs	r0, r2, r0
20000950:	20000092 	mulcs	r0, r2, r0
20000954:	200000ea 	andcs	r0, r0, sl, ror #1
20000958:	20000092 	mulcs	r0, r2, r0
2000095c:	200000cc 	andcs	r0, r0, ip, asr #1
20000960:	200000dc 	ldrdcs	r0, [r0], -ip
20000964:	200000be 	strhcs	r0, [r0], -lr
20000968:	20000092 	mulcs	r0, r2, r0
2000096c:	200000fa 	strdcs	r0, [r0], -sl
20000970:	20000258 	andcs	r0, r0, r8, asr r2
20000974:	20000238 	andcs	r0, r0, r8, lsr r2
20000978:	20000240 	andcs	r0, r0, r0, asr #4
2000097c:	20000248 	andcs	r0, r0, r8, asr #4
20000980:	20000250 	andcs	r0, r0, r0, asr r2
20000984:	0a030201 	beq	200c1190 <ballobject+0xc0868>
20000988:	0b060504 	bleq	20181da0 <ballobject+0x181478>
2000098c:	0c090807 	stceq	8, cr0, [r9], {7}
20000990:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000960 <ballobject+0x38>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013c 	andeq	r0, r0, ip, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003e 	andeq	r0, r0, lr, lsr r0
  10:	0000360c 	andeq	r3, r0, ip, lsl #12
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00006a20 	andeq	r6, r0, r0, lsr #20
  20:	00000000 	andeq	r0, r0, r0
  24:	011a0200 	tsteq	sl, r0, lsl #4
  28:	00d60905 	sbcseq	r0, r6, r5, lsl #18
  2c:	73030000 	movwvc	r0, #12288	; 0x3000
  30:	06010072 			; <UNDEFINED> instruction: 0x06010072
  34:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  38:	2d040000 	stccs	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	00dd1a07 	sbcseq	r1, sp, r7, lsl #20
  44:	03020000 	movweq	r0, #8192	; 0x2000
  48:	01007264 	tsteq	r0, r4, ror #4
  4c:	00dd1a08 	sbcseq	r1, sp, r8, lsl #20
  50:	04040000 	streq	r0, [r4], #-0
  54:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	dd1a0901 	vldrle.16	s0, [sl, #-2]	; <UNPREDICTABLE>
  5c:	06000000 	streq	r0, [r0], -r0
  60:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
  64:	1a0a0100 	bne	28046c <startup-0x1fd7fb94>
  68:	000000dd 	ldrdeq	r0, [r0], -sp
  6c:	00b90408 	adcseq	r0, r9, r8, lsl #8
  70:	0b010000 	bleq	40078 <startup-0x1ffbff88>
  74:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  78:	63030a00 	movwvs	r0, #14848	; 0x3a00
  7c:	01003172 	tsteq	r0, r2, ror r1
  80:	00dd1a0c 	sbcseq	r1, sp, ip, lsl #20
  84:	040c0000 	streq	r0, [ip], #-0
  88:	000000c2 	andeq	r0, r0, r2, asr #1
  8c:	dd1a0d01 	ldcle	13, cr0, [sl, #-4]
  90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  94:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
  98:	1a0e0100 	bne	3804a0 <startup-0x1fc7fb60>
  9c:	000000dd 	ldrdeq	r0, [r0], -sp
  a0:	00cb0410 	sbceq	r0, fp, r0, lsl r4
  a4:	0f010000 	svceq	0x00010000
  a8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  ac:	63031200 	movwvs	r1, #12800	; 0x3200
  b0:	01003372 	tsteq	r0, r2, ror r3
  b4:	00dd1a10 	sbcseq	r1, sp, r0, lsl sl
  b8:	04140000 	ldreq	r0, [r4], #-0
  bc:	000000d4 	ldrdeq	r0, [r0], -r4
  c0:	dd1a1101 	ldfles	f1, [sl, #-4]
  c4:	16000000 	strne	r0, [r0], -r0
  c8:	0000f004 	andeq	pc, r0, r4
  cc:	1a120100 	bne	4804d4 <startup-0x1fb7fb2c>
  d0:	000000dd 	ldrdeq	r0, [r0], -sp
  d4:	02050018 	andeq	r0, r5, #24
  d8:	0000dd07 	andeq	sp, r0, r7, lsl #26
  dc:	00d60600 	sbcseq	r0, r6, r0, lsl #12
  e0:	fb070000 	blx	1c00ea <startup-0x1fe3ff16>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	00250313 	eoreq	r0, r5, r3, lsl r3
  ec:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	00500621 	subseq	r0, r0, r1, lsr #12
  f8:	002a2000 	eoreq	r2, sl, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	01007309 	tsteq	r0, r9, lsl #6
 108:	01121221 	tsteq	r2, r1, lsr #4
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	b3080105 	movwlt	r0, #33029	; 0x8105
 11c:	0b000002 	bleq	12c <startup-0x1ffffed4>
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	100d1701 	andne	r1, sp, r1, lsl #14
 128:	40200000 	eormi	r0, r0, r0
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0063099c 	mlseq	r3, ip, r9, r0
 134:	181d1701 	ldmdane	sp, {r0, r8, r9, sl, ip}
 138:	02000001 	andeq	r0, r0, #1
 13c:	00007791 	muleq	r0, r1, r7
 140:	0000078f 	andeq	r0, r0, pc, lsl #15
 144:	00b40004 	adcseq	r0, r4, r4
 148:	01040000 	mrseq	r0, (UNDEF: 4)
 14c:	0000003e 	andeq	r0, r0, lr, lsr r0
 150:	0002270c 	andeq	r2, r2, ip, lsl #14
 154:	00000000 	andeq	r0, r0, r0
 158:	00007c00 	andeq	r7, r0, r0, lsl #24
 15c:	00084a20 	andeq	r4, r8, r0, lsr #20
 160:	00007600 	andeq	r7, r0, r0, lsl #12
 164:	07040200 	streq	r0, [r4, -r0, lsl #4]
 168:	0000012d 	andeq	r0, r0, sp, lsr #2
 16c:	69050403 	stmdbvs	r5, {r0, r1, sl}
 170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 174:	01690508 	cmneq	r9, r8, lsl #10
 178:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 17c:	00024a04 	andeq	r4, r2, r4, lsl #20
 180:	06010200 	streq	r0, [r1], -r0, lsl #4
 184:	000002ac 	andeq	r0, r0, ip, lsr #5
 188:	aa080102 	bge	200598 <startup-0x1fdffa68>
 18c:	02000002 	andeq	r0, r0, #2
 190:	02b80502 	adcseq	r0, r8, #8388608	; 0x800000
 194:	02020000 	andeq	r0, r2, #0
 198:	0000dd07 	andeq	sp, r0, r7, lsl #26
 19c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a0:	0000016e 	andeq	r0, r0, lr, ror #2
 1a4:	28070402 	stmdacs	r7, {r1, sl}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	01230708 			; <UNDEFINED> instruction: 0x01230708
 1b0:	04040000 	streq	r0, [r4], #-0
 1b4:	00000048 	andeq	r0, r0, r8, asr #32
 1b8:	b3080102 	movwlt	r0, #33026	; 0x8102
 1bc:	05000002 	streq	r0, [r0, #-2]
 1c0:	091e0102 	ldmdbeq	lr, {r1, r8}
 1c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1c8:	01007806 	tsteq	r0, r6, lsl #16
 1cc:	00481020 	subeq	r1, r8, r0, lsr #32
 1d0:	06000000 	streq	r0, [r0], -r0
 1d4:	20010079 	andcs	r0, r1, r9, ror r0
 1d8:	00004812 	andeq	r4, r0, r2, lsl r8
 1dc:	07000100 	streq	r0, [r0, -r0, lsl #2]
 1e0:	00000188 	andeq	r0, r0, r8, lsl #3
 1e4:	7f032101 	svcvc	0x00032101
 1e8:	05000000 	streq	r0, [r0, #-0]
 1ec:	09230104 	stmdbeq	r3!, {r2, r8}
 1f0:	000000cd 	andeq	r0, r0, sp, asr #1
 1f4:	00307006 	eorseq	r7, r0, r6
 1f8:	9f082501 	svcls	0x00082501
 1fc:	00000000 	andeq	r0, r0, r0
 200:	00317006 	eorseq	r7, r1, r6
 204:	9f0b2501 	svcls	0x000b2501
 208:	02000000 	andeq	r0, r0, #0
 20c:	026a0700 	rsbeq	r0, sl, #0, 14
 210:	26010000 	strcs	r0, [r1], -r0
 214:	0000ab03 	andeq	sl, r0, r3, lsl #22
 218:	02690700 	rsbeq	r0, r9, #0, 14
 21c:	26010000 	strcs	r0, [r1], -r0
 220:	0000e50a 	andeq	lr, r0, sl, lsl #10
 224:	ab040400 	blge	10122c <startup-0x1fefedd4>
 228:	05000000 	streq	r0, [r0, #-0]
 22c:	09280104 	stmdbeq	r8!, {r2, r8}
 230:	00000116 	andeq	r0, r0, r6, lsl r1
 234:	01007006 	tsteq	r0, r6
 238:	009f082a 	addseq	r0, pc, sl, lsr #16
 23c:	06000000 	streq	r0, [r0], -r0
 240:	2b010078 	blcs	40428 <startup-0x1ffbfbd8>
 244:	00004810 	andeq	r4, r0, r0, lsl r8
 248:	79060200 	stmdbvc	r6, {r9}
 24c:	122b0100 	eorne	r0, fp, #0, 2
 250:	00000048 	andeq	r0, r0, r8, asr #32
 254:	8e070003 	cdphi	0, 0, cr0, cr7, cr3, {0}
 258:	01000001 	tsteq	r0, r1
 25c:	01220a2c 			; <UNDEFINED> instruction: 0x01220a2c
 260:	04040000 	streq	r0, [r4], #-0
 264:	000000eb 	andeq	r0, r0, fp, ror #1
 268:	0001aa08 	andeq	sl, r1, r8, lsl #20
 26c:	2e010800 	cdpcs	8, 0, cr0, cr1, cr0, {0}
 270:	00015910 	andeq	r5, r1, r0, lsl r9
 274:	00780600 	rsbseq	r0, r8, r0, lsl #12
 278:	78073001 	stmdavc	r7, {r0, ip, sp}
 27c:	00000000 	andeq	r0, r0, r0
 280:	01007906 	tsteq	r0, r6, lsl #18
 284:	00780930 	rsbseq	r0, r8, r0, lsr r9
 288:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 28c:	00000154 	andeq	r0, r0, r4, asr r1
 290:	59173101 	ldmdbpl	r7, {r0, r8, ip, sp}
 294:	04000001 	streq	r0, [r0], #-1
 298:	28040400 	stmdacs	r4, {sl}
 29c:	07000001 	streq	r0, [r0, -r1]
 2a0:	00000184 	andeq	r0, r0, r4, lsl #3
 2a4:	28033201 	stmdacs	r3, {r0, r9, ip, sp}
 2a8:	07000001 	streq	r0, [r0, -r1]
 2ac:	00000183 	andeq	r0, r0, r3, lsl #3
 2b0:	590f3201 	stmdbpl	pc, {r0, r9, ip, sp}	; <UNPREDICTABLE>
 2b4:	05000001 	streq	r0, [r0, #-1]
 2b8:	09340148 	ldmdbeq	r4!, {r3, r6, r8}
 2bc:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 2c0:	00021d09 	andeq	r1, r2, r9, lsl #26
 2c4:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
 2c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2cc:	03340900 	teqeq	r4, #0, 18
 2d0:	37010000 	strcc	r0, [r1, -r0]
 2d4:	00002c06 	andeq	r2, r0, r6, lsl #24
 2d8:	3a090400 	bcc	2412e0 <startup-0x1fdbed20>
 2dc:	01000003 	tsteq	r0, r3
 2e0:	002c0638 	eoreq	r0, ip, r8, lsr r6
 2e4:	06080000 	streq	r0, [r8], -r0
 2e8:	01007870 	tsteq	r0, r0, ror r8
 2ec:	01b40839 			; <UNDEFINED> instruction: 0x01b40839
 2f0:	000c0000 	andeq	r0, ip, r0
 2f4:	00009f0a 	andeq	r9, r0, sl, lsl #30
 2f8:	0001c400 	andeq	ip, r1, r0, lsl #8
 2fc:	00250b00 	eoreq	r0, r5, r0, lsl #22
 300:	001d0000 	andseq	r0, sp, r0
 304:	00027007 	andeq	r7, r2, r7
 308:	033a0100 	teqeq	sl, #0, 2
 30c:	00000177 	andeq	r0, r0, r7, ror r1
 310:	00026f07 	andeq	r6, r2, r7, lsl #30
 314:	0e3a0100 	rsfeqe	f0, f2, f0
 318:	000001dc 	ldrdeq	r0, [r0], -ip
 31c:	01770404 	cmneq	r7, r4, lsl #8
 320:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
 324:	24000003 	strcs	r0, [r0], #-3
 328:	65103c01 	ldrvs	r3, [r0, #-3073]	; 0xfffff3ff
 32c:	06000002 	streq	r0, [r0], -r2
 330:	006f6567 	rsbeq	r6, pc, r7, ror #10
 334:	d00c3e01 	andle	r3, ip, r1, lsl #28
 338:	00000001 	andeq	r0, r0, r1
 33c:	0002eb09 	andeq	lr, r2, r9, lsl #22
 340:	063f0100 	ldrteq	r0, [pc], -r0, lsl #2
 344:	0000002c 	andeq	r0, r0, ip, lsr #32
 348:	02f00904 	rscseq	r0, r0, #4, 18	; 0x10000
 34c:	3f010000 	svccc	0x00010000
 350:	00002c0c 	andeq	r2, r0, ip, lsl #24
 354:	2e090800 	cdpcs	8, 0, cr0, cr9, cr0, {0}
 358:	01000002 	tsteq	r0, r2
 35c:	002c0640 	eoreq	r0, ip, r0, asr #12
 360:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 364:	00000233 	andeq	r0, r0, r3, lsr r2
 368:	2c0c4001 	stccs	0, cr4, [ip], {1}
 36c:	10000000 	andne	r0, r0, r0
 370:	00032f09 	andeq	r2, r3, r9, lsl #30
 374:	0a410100 	beq	104077c <startup-0x1efbf884>
 378:	00000276 	andeq	r0, r0, r6, ror r2
 37c:	01eb0914 	mvneq	r0, r4, lsl r9
 380:	42010000 	andmi	r0, r1, #0
 384:	0002760a 	andeq	r7, r2, sl, lsl #12
 388:	64091800 	strvs	r1, [r9], #-2048	; 0xfffff800
 38c:	01000001 	tsteq	r0, r1
 390:	02760a43 	rsbseq	r0, r6, #274432	; 0x43000
 394:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
 398:	0000013a 	andeq	r0, r0, sl, lsr r1
 39c:	910a4401 	tstls	sl, r1, lsl #8
 3a0:	20000002 	andcs	r0, r0, r2
 3a4:	02700c00 	rsbseq	r0, r0, #0, 24
 3a8:	700d0000 	andvc	r0, sp, r0
 3ac:	00000002 	andeq	r0, r0, r2
 3b0:	01e20404 	mvneq	r0, r4, lsl #8
 3b4:	04040000 	streq	r0, [r4], #-0
 3b8:	00000265 	andeq	r0, r0, r5, ror #4
 3bc:	0002910c 	andeq	r9, r2, ip, lsl #2
 3c0:	02700d00 	rsbseq	r0, r0, #0, 26
 3c4:	2c0d0000 	stccs	0, cr0, [sp], {-0}
 3c8:	0d000000 	stceq	0, cr0, [r0, #-0]
 3cc:	0000002c 	andeq	r0, r0, ip, lsr #32
 3d0:	7c040400 	cfstrsvc	mvf0, [r4], {-0}
 3d4:	07000002 	streq	r0, [r0, -r2]
 3d8:	0000025d 	andeq	r0, r0, sp, asr r2
 3dc:	e2034501 	and	r4, r3, #4194304	; 0x400000
 3e0:	07000001 	streq	r0, [r0, -r1]
 3e4:	0000025c 	andeq	r0, r0, ip, asr r2
 3e8:	700c4501 	andvc	r4, ip, r1, lsl #10
 3ec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 3f0:	000002dd 	ldrdeq	r0, [r0], -sp
 3f4:	c40a5301 	strgt	r5, [sl], #-769	; 0xfffffcff
 3f8:	05000001 	streq	r0, [r0, #-1]
 3fc:	0008e003 	andeq	lr, r8, r3
 400:	01490f20 	cmpeq	r9, r0, lsr #30
 404:	5c010000 	stcpl	0, cr0, [r1], {-0}
 408:	0002970f 	andeq	r9, r2, pc, lsl #14
 40c:	28030500 	stmdacs	r3, {r8, sl}
 410:	10200009 	eorne	r0, r0, r9
 414:	00000194 	muleq	r0, r4, r1
 418:	06018801 	streq	r8, [r1], -r1, lsl #16
 41c:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 420:	0000000a 	andeq	r0, r0, sl
 424:	8a119c01 	bhi	467430 <startup-0x1fb98bd0>
 428:	01000002 	tsteq	r0, r2
 42c:	9c060181 	stflss	f0, [r6], {129}	; 0x81
 430:	20200008 	eorcs	r0, r0, r8
 434:	01000000 	mrseq	r0, (UNDEF: 0)
 438:	00032c9c 	muleq	r3, ip, ip
 43c:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 440:	23018101 	movwcs	r8, #4353	; 0x1101
 444:	000002a3 	andeq	r0, r0, r3, lsr #5
 448:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 44c:	000001f1 	strdeq	r0, [r0], -r1
 450:	2a018101 	bcs	6085c <startup-0x1ff9f7a4>
 454:	0000002c 	andeq	r0, r0, ip, lsr #32
 458:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 45c:	000001f8 	strdeq	r0, [r0], -r8
 460:	36018101 	strcc	r8, [r1], -r1, lsl #2
 464:	0000002c 	andeq	r0, r0, ip, lsr #32
 468:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 46c:	00014414 	andeq	r4, r1, r4, lsl r4
 470:	01610100 	cmneq	r1, r0, lsl #2
 474:	0007e006 	andeq	lr, r7, r6
 478:	0000bc20 	andeq	fp, r0, r0, lsr #24
 47c:	729c0100 	addsvc	r0, ip, #0, 2
 480:	12000003 	andne	r0, r0, #3
 484:	6101006f 	tstvs	r1, pc, rrx
 488:	02a31e01 	adceq	r1, r3, #1, 28
 48c:	91020000 	mrsls	r0, (UNDEF: 2)
 490:	010c156c 	tsteq	ip, ip, ror #10
 494:	64010000 	strvs	r0, [r1], #-0
 498:	002c0601 	eoreq	r0, ip, r1, lsl #12
 49c:	91020000 	mrsls	r0, (UNDEF: 2)
 4a0:	01111574 	tsteq	r1, r4, ror r5
 4a4:	65010000 	strvs	r0, [r1, #-0]
 4a8:	002c0601 	eoreq	r0, ip, r1, lsl #12
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	79140070 	ldmdbvc	r4, {r4, r5, r6}
 4b4:	01000002 	tsteq	r0, r2
 4b8:	80060157 	andhi	r0, r6, r7, asr r1
 4bc:	60200007 	eorvs	r0, r0, r7
 4c0:	01000000 	mrseq	r0, (UNDEF: 0)
 4c4:	0003d99c 	muleq	r3, ip, r9
 4c8:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 4cc:	1f015701 	svcne	0x00015701
 4d0:	000002a3 	andeq	r0, r0, r3, lsr #5
 4d4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 4d8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 4dc:	06015901 	streq	r5, [r1], -r1, lsl #18
 4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e4:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
 4e8:	20000790 	mulcs	r0, r0, r7
 4ec:	00000046 	andeq	r0, r0, r6, asr #32
 4f0:	01006917 	tsteq	r0, r7, lsl r9
 4f4:	2c0b015a 	stfcss	f0, [fp], {90}	; 0x5a
 4f8:	02000000 	andeq	r0, r0, #0
 4fc:	96167491 			; <UNDEFINED> instruction: 0x96167491
 500:	32200007 	eorcc	r0, r0, #7
 504:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 508:	000001dd 	ldrdeq	r0, [r0], -sp
 50c:	03015c01 	movweq	r5, #7169	; 0x1c01
 510:	0000002c 	andeq	r0, r0, ip, lsr #32
 514:	00000019 	andeq	r0, r0, r9, lsl r0
 518:	02f51400 	rscseq	r1, r5, #0, 8
 51c:	4b010000 	blmi	40524 <startup-0x1ffbfadc>
 520:	07200601 	streq	r0, [r0, -r1, lsl #12]!
 524:	00602000 	rsbeq	r2, r0, r0
 528:	9c010000 	stcls	0, cr0, [r1], {-0}
 52c:	00000440 	andeq	r0, r0, r0, asr #8
 530:	01006f12 	tsteq	r0, r2, lsl pc
 534:	a31e014b 	tstge	lr, #-1073741806	; 0xc0000012
 538:	02000002 	andeq	r0, r0, #2
 53c:	b7156c91 			; <UNDEFINED> instruction: 0xb7156c91
 540:	01000001 	tsteq	r0, r1
 544:	2c06014d 	stfcss	f0, [r6], {77}	; 0x4d
 548:	02000000 	andeq	r0, r0, #0
 54c:	30167091 	mulscc	r6, r1, r0
 550:	46200007 	strtmi	r0, [r0], -r7
 554:	17000000 	strne	r0, [r0, -r0]
 558:	4f010069 	svcmi	0x00010069
 55c:	002c0b01 	eoreq	r0, ip, r1, lsl #22
 560:	91020000 	mrsls	r0, (UNDEF: 2)
 564:	07361674 			; <UNDEFINED> instruction: 0x07361674
 568:	00322000 	eorseq	r2, r2, r0
 56c:	38180000 	ldmdacc	r8, {}	; <UNPREDICTABLE>
 570:	01000002 	tsteq	r0, r2
 574:	2c04011d 	stfcss	f0, [r4], {29}
 578:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 57c:	00000000 	andeq	r0, r0, r0
 580:	00011614 	andeq	r1, r1, r4, lsl r6
 584:	01380100 	teqeq	r8, r0, lsl #2
 588:	00069806 	andeq	r9, r6, r6, lsl #16
 58c:	00008820 	andeq	r8, r0, r0, lsr #16
 590:	b09c0100 	addslt	r0, ip, r0, lsl #2
 594:	13000004 	movwne	r0, #4
 598:	0000011b 	andeq	r0, r0, fp, lsl r1
 59c:	1e013801 	cdpne	8, 0, cr3, cr1, cr1, {0}
 5a0:	0000016b 	andeq	r0, r0, fp, ror #2
 5a4:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
 5a8:	01003070 	tsteq	r0, r0, ror r0
 5ac:	5f0c013a 	svcpl	0x000c013a
 5b0:	02000001 	andeq	r0, r0, #1
 5b4:	70176491 	mulsvc	r7, r1, r4
 5b8:	01007274 	tsteq	r0, r4, ror r2
 5bc:	6b0d013d 	blvs	340ab8 <startup-0x1fcbf548>
 5c0:	02000001 	andeq	r0, r0, #1
 5c4:	ba166c91 	blt	59b810 <startup-0x1fa647f0>
 5c8:	56200006 	strtpl	r0, [r0], -r6
 5cc:	17000000 	strne	r0, [r0, -r0]
 5d0:	01003170 	tsteq	r0, r0, ror r1
 5d4:	5f0d0140 	svcpl	0x000d0140
 5d8:	02000001 	andeq	r0, r0, #1
 5dc:	cc155c91 	ldcgt	12, cr5, [r5], {145}	; 0x91
 5e0:	01000001 	tsteq	r0, r1
 5e4:	cd080143 	stfgts	f0, [r8, #-268]	; 0xfffffef4
 5e8:	02000000 	andeq	r0, r0, #0
 5ec:	00005891 	muleq	r0, r1, r8
 5f0:	00030f14 	andeq	r0, r3, r4, lsl pc
 5f4:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
 5f8:	00054e06 	andeq	r4, r5, r6, lsl #28
 5fc:	00014a20 	andeq	r4, r1, r0, lsr #20
 600:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 604:	12000005 	andne	r0, r0, #5
 608:	2c010072 	stccs	0, cr0, [r1], {114}	; 0x72
 60c:	01161b01 	tsteq	r6, r1, lsl #22
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	03401554 	movteq	r1, #1364	; 0x554
 618:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 61c:	009f0801 	addseq	r0, pc, r1, lsl #16
 620:	91020000 	mrsls	r0, (UNDEF: 2)
 624:	6e651764 	cdpvs	7, 6, cr1, cr5, cr4, {3}
 628:	2f010064 	svccs	0x00010064
 62c:	009f0801 	addseq	r0, pc, r1, lsl #16
 630:	91020000 	mrsls	r0, (UNDEF: 2)
 634:	01cc1560 	biceq	r1, ip, r0, ror #10
 638:	30010000 	andcc	r0, r1, r0
 63c:	00cd0701 	sbceq	r0, sp, r1, lsl #14
 640:	91020000 	mrsls	r0, (UNDEF: 2)
 644:	051a005c 	ldreq	r0, [sl, #-92]	; 0xffffffa4
 648:	01000003 	tsteq	r0, r3
 64c:	002c05fb 	strdeq	r0, [ip], -fp	; <UNPREDICTABLE>
 650:	03580000 	cmpeq	r8, #0
 654:	01f62000 	mvnseq	r2, r0
 658:	9c010000 	stcls	0, cr0, [r1], {-0}
 65c:	000005da 	ldrdeq	r0, [r0], -sl
 660:	01006c1b 	tsteq	r0, fp, lsl ip
 664:	00d915fb 	ldrsheq	r1, [r9], #91	; 0x5b
 668:	91020000 	mrsls	r0, (UNDEF: 2)
 66c:	0256155c 	subseq	r1, r6, #92, 10	; 0x17000000
 670:	02010000 	andeq	r0, r1, #0
 674:	00780701 	rsbseq	r0, r8, r1, lsl #14
 678:	91020000 	mrsls	r0, (UNDEF: 2)
 67c:	034b156f 	movteq	r1, #46447	; 0xb56f
 680:	11010000 	mrsne	r0, (UNDEF: 1)
 684:	00780701 	rsbseq	r0, r8, r1, lsl #14
 688:	91020000 	mrsls	r0, (UNDEF: 2)
 68c:	01a31567 			; <UNDEFINED> instruction: 0x01a31567
 690:	12010000 	andne	r0, r1, #0
 694:	00780701 	rsbseq	r0, r8, r1, lsl #14
 698:	91020000 	mrsls	r0, (UNDEF: 2)
 69c:	02a41566 	adceq	r1, r4, #427819008	; 0x19800000
 6a0:	13010000 	movwne	r0, #4096	; 0x1000
 6a4:	00780701 	rsbseq	r0, r8, r1, lsl #14
 6a8:	91020000 	mrsls	r0, (UNDEF: 2)
 6ac:	0079176e 	rsbseq	r1, r9, lr, ror #14
 6b0:	07011401 	streq	r1, [r1, -r1, lsl #8]
 6b4:	00000078 	andeq	r0, r0, r8, ror r0
 6b8:	156d9102 	strbne	r9, [sp, #-258]!	; 0xfffffefe
 6bc:	000002d7 	ldrdeq	r0, [r0], -r7
 6c0:	07011501 	streq	r1, [r1, -r1, lsl #10]
 6c4:	00000078 	andeq	r0, r0, r8, ror r0
 6c8:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 6cc:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 6d0:	00000088 	andeq	r0, r0, r8, lsl #1
 6d4:	01007817 	tsteq	r0, r7, lsl r8
 6d8:	2c0b011a 	stfcss	f0, [fp], {26}
 6dc:	02000000 	andeq	r0, r0, #0
 6e0:	ce1c6891 	mrcgt	8, 0, r6, cr12, cr1, {4}
 6e4:	10200004 	eorne	r0, r0, r4
 6e8:	bf000000 	svclt	0x00000000
 6ec:	18000005 	stmdane	r0, {r0, r2}
 6f0:	00000238 	andeq	r0, r0, r8, lsr r2
 6f4:	04011d01 	streq	r1, [r1], #-3329	; 0xfffff2ff
 6f8:	0000002c 	andeq	r0, r0, ip, lsr #32
 6fc:	16000019 			; <UNDEFINED> instruction: 0x16000019
 700:	200004e0 	andcs	r0, r0, r0, ror #9
 704:	00000010 	andeq	r0, r0, r0, lsl r0
 708:	00023818 	andeq	r3, r2, r8, lsl r8
 70c:	011d0100 	tsteq	sp, r0, lsl #2
 710:	00002c04 	andeq	r2, r0, r4, lsl #24
 714:	00001900 	andeq	r1, r0, r0, lsl #18
 718:	9f1d0000 	svcls	0x001d0000
 71c:	01000002 	tsteq	r0, r2
 720:	032c06f4 			; <UNDEFINED> instruction: 0x032c06f4
 724:	002c2000 	eoreq	r2, ip, r0
 728:	9c010000 	stcls	0, cr0, [r1], {-0}
 72c:	0000061a 	andeq	r0, r0, sl, lsl r6
 730:	0100611b 	tsteq	r0, fp, lsl r1
 734:	00721af4 	ldrshteq	r1, [r2], #-164	; 0xffffff5c
 738:	91020000 	mrsls	r0, (UNDEF: 2)
 73c:	00621b6c 	rsbeq	r1, r2, ip, ror #22
 740:	722cf401 	eorvc	pc, ip, #16777216	; 0x1000000
 744:	02000000 	andeq	r0, r0, #0
 748:	be0f6891 	mcrlt	8, 0, r6, cr15, cr1, {4}
 74c:	01000001 	tsteq	r0, r1
 750:	004810f6 	strdeq	r1, [r8], #-6
 754:	91020000 	mrsls	r0, (UNDEF: 2)
 758:	641a0077 	ldrvs	r0, [sl], #-119	; 0xffffff89
 75c:	01000002 	tsteq	r0, r2
 760:	00480fe0 	subeq	r0, r8, r0, ror #31
 764:	02c40000 	sbceq	r0, r4, #0
 768:	00682000 	rsbeq	r2, r8, r0
 76c:	9c010000 	stcls	0, cr0, [r1], {-0}
 770:	00000662 	andeq	r0, r0, r2, ror #12
 774:	79656b1e 	stmdbvc	r5!, {r1, r2, r3, r4, r8, r9, fp, sp, lr}^
 778:	13e30100 	mvnne	r0, #0, 2
 77c:	00000662 	andeq	r0, r0, r2, ror #12
 780:	1e589102 	lognee	f1, f2
 784:	00776f72 	rsbseq	r6, r7, r2, ror pc
 788:	2c09e501 	cfstr32cs	mvfx14, [r9], {1}
 78c:	02000000 	andeq	r0, r0, #0
 790:	631e6c91 	tstvs	lr, #37120	; 0x9100
 794:	01006c6f 	tsteq	r0, pc, ror #24
 798:	002c0ee5 	eoreq	r0, ip, r5, ror #29
 79c:	91020000 	mrsls	r0, (UNDEF: 2)
 7a0:	480a0068 	stmdami	sl, {r3, r5, r6}
 7a4:	72000000 	andvc	r0, r0, #0
 7a8:	0b000006 	bleq	7c8 <startup-0x1ffff838>
 7ac:	00000025 	andeq	r0, r0, r5, lsr #32
 7b0:	591f000f 	ldmdbpl	pc, {r0, r1, r2, r3}	; <UNPREDICTABLE>
 7b4:	01000001 	tsteq	r0, r1
 7b8:	002c05ca 	eoreq	r0, ip, sl, asr #11
 7bc:	02700000 	rsbseq	r0, r0, #0
 7c0:	00542000 	subseq	r2, r4, r0
 7c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7c8:	0000069a 	muleq	r0, sl, r6
 7cc:	0100631e 	tsteq	r0, lr, lsl r3
 7d0:	004813d2 	ldrdeq	r1, [r8], #-50	; 0xffffffce
 7d4:	91020000 	mrsls	r0, (UNDEF: 2)
 7d8:	d11d0077 	tstle	sp, r7, ror r0
 7dc:	01000001 	tsteq	r0, r1
 7e0:	021e06b8 	andseq	r0, lr, #184, 12	; 0xb800000
 7e4:	00522000 	subseq	r2, r2, r0
 7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7ec:	000006c0 	andeq	r0, r0, r0, asr #13
 7f0:	776f721b 			; <UNDEFINED> instruction: 0x776f721b
 7f4:	20b80100 	adcscs	r0, r8, r0, lsl #2
 7f8:	00000025 	andeq	r0, r0, r5, lsr #32
 7fc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 800:	00021120 	andeq	r1, r2, r0, lsr #2
 804:	06ab0100 	strteq	r0, [fp], r0, lsl #2
 808:	200001fa 	strdcs	r0, [r0], -sl
 80c:	00000024 	andeq	r0, r0, r4, lsr #32
 810:	06e59c01 	strbteq	r9, [r5], r1, lsl #24
 814:	6d1b0000 	ldcvs	0, cr0, [fp, #-0]
 818:	ab010073 	blge	409ec <startup-0x1ffbf614>
 81c:	0000251f 	andeq	r2, r0, pc, lsl r5
 820:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 824:	03232000 			; <UNDEFINED> instruction: 0x03232000
 828:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 82c:	0001c406 	andeq	ip, r1, r6, lsl #8
 830:	00003620 	andeq	r3, r0, r0, lsr #12
 834:	219c0100 	orrscs	r0, ip, r0, lsl #2
 838:	1b000007 	blne	85c <startup-0x1ffff7a4>
 83c:	0100736d 	tsteq	r0, sp, ror #6
 840:	00251f99 	mlaeq	r5, r9, pc, r1	; <UNPREDICTABLE>
 844:	91020000 	mrsls	r0, (UNDEF: 2)
 848:	01cc166c 	biceq	r1, ip, ip, ror #12
 84c:	00242000 	eoreq	r2, r4, r0
 850:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
 854:	0ba10100 	bleq	fe840c5c <ballobject+0xde840334>
 858:	0000002c 	andeq	r0, r0, ip, lsr #32
 85c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 860:	01772100 	cmneq	r7, r0, lsl #2
 864:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 868:	00018006 	andeq	r8, r1, r6
 86c:	00004420 	andeq	r4, r0, r0, lsr #8
 870:	219c0100 	orrscs	r0, ip, r0, lsl #2
 874:	000001c3 	andeq	r0, r0, r3, asr #3
 878:	14067f01 	strne	r7, [r6], #-3841	; 0xfffff0ff
 87c:	6c200001 	stcvs	0, cr0, [r0], #-4
 880:	01000000 	mrseq	r0, (UNDEF: 0)
 884:	0346229c 	movteq	r2, #25244	; 0x629c
 888:	67010000 	strvs	r0, [r1, -r0]
 88c:	00007c06 	andeq	r7, r0, r6, lsl #24
 890:	00009820 	andeq	r9, r0, r0, lsr #16
 894:	1e9c0100 	fmlnee	f0, f4, f0
 898:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
 89c:	00007807 	andeq	r7, r0, r7, lsl #16
 8a0:	6b910200 	blvs	fe4410a8 <ballobject+0xde440780>
 8a4:	0100701e 	tsteq	r0, lr, lsl r0
 8a8:	02a30a6a 	adceq	r0, r3, #434176	; 0x6a000
 8ac:	91020000 	mrsls	r0, (UNDEF: 2)
 8b0:	01ff236c 	mvnseq	r2, ip, ror #6
 8b4:	6c010000 	stcvs	0, cr0, [r1], {-0}
 8b8:	00002c02 	andeq	r2, r0, r2, lsl #24
 8bc:	00078300 	andeq	r8, r7, r0, lsl #6
 8c0:	24001900 	strcs	r1, [r0], #-2304	; 0xfffff700
 8c4:	000002c2 	andeq	r0, r0, r2, asr #5
 8c8:	2c026d01 	stccs	13, cr6, [r2], {1}
 8cc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 8d0:	7c000000 	stcvc	0, cr0, [r0], {-0}
 8d4:	04000000 	streq	r0, [r0], #-0
 8d8:	00033200 	andeq	r3, r3, r0, lsl #4
 8dc:	3e010400 	cfcpyscc	mvf0, mvf1
 8e0:	0c000000 	stceq	0, cr0, [r0], {-0}
 8e4:	00000352 	andeq	r0, r0, r2, asr r3
	...
 8f4:	000005fc 	strdeq	r0, [r0], -ip
 8f8:	0001dd02 	andeq	sp, r1, r2, lsl #26
 8fc:	06240100 	strteq	r0, [r4], -r0, lsl #2
 900:	200008da 	ldrdcs	r0, [r0], -sl
 904:	00000006 	andeq	r0, r0, r6
 908:	38029c01 	stmdacc	r2, {r0, sl, fp, ip, pc}
 90c:	01000002 	tsteq	r0, r2
 910:	08d4061d 	ldmeq	r4, {r0, r2, r3, r4, r9, sl}^
 914:	00062000 	andeq	r2, r6, r0
 918:	9c010000 	stcls	0, cr0, [r1], {-0}
 91c:	0002c202 	andeq	ip, r2, r2, lsl #4
 920:	06160100 	ldreq	r0, [r6], -r0, lsl #2
 924:	200008ce 	andcs	r0, r0, lr, asr #17
 928:	00000006 	andeq	r0, r0, r6
 92c:	ff029c01 			; <UNDEFINED> instruction: 0xff029c01
 930:	01000001 	tsteq	r0, r1
 934:	08c8060f 	stmiaeq	r8, {r0, r1, r2, r3, r9, sl}^
 938:	00062000 	andeq	r2, r6, r0
 93c:	9c010000 	stcls	0, cr0, [r1], {-0}
 940:	00035c02 	andeq	r5, r3, r2, lsl #24
 944:	01060100 	mrseq	r0, (UNDEF: 22)
 948:	20000000 	andcs	r0, r0, r0
 94c:	0000000c 	andeq	r0, r0, ip
 950:	Address 0x0000000000000950 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	13490b39 	movtne	r0, #39737	; 0x9b39
  40:	00000b38 	andeq	r0, r0, r8, lsr fp
  44:	0b002405 	bleq	9060 <startup-0x1fff6fa0>
  48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  4c:	0600000e 	streq	r0, [r0], -lr
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	0013490b 	andseq	r4, r3, fp, lsl #18
  64:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050900 	andeq	r0, r5, r0, lsl #18
  84:	0b3a0803 	bleq	e82098 <startup-0x1f17df68>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	0f0a0000 	svceq	0x000a0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0b000013 	bleq	ec <startup-0x1fffff14>
  9c:	0e03012e 	adfeqsp	f0, f3, #0.5
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	110e1b0e 	tstne	lr, lr, lsl #22
  c0:	10061201 	andne	r1, r6, r1, lsl #4
  c4:	02000017 	andeq	r0, r0, #23
  c8:	0b0b0024 	bleq	2c0160 <startup-0x1fd3fea0>
  cc:	0e030b3e 	vmoveq.16	d3[0], r0
  d0:	24030000 	strcs	r0, [r3], #-0
  d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d8:	0008030b 	andeq	r0, r8, fp, lsl #6
  dc:	000f0400 	andeq	r0, pc, r0, lsl #8
  e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  e4:	13050000 	movwne	r0, #20480	; 0x5000
  e8:	3a0b0b01 	bcc	2c2cf4 <startup-0x1fd3d30c>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0803 	bleq	e8210c <startup-0x1f17def4>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	16070000 	strne	r0, [r7], -r0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0013490b 	andseq	r4, r3, fp, lsl #18
 114:	01130800 	tsteq	r3, r0, lsl #16
 118:	0b0b0e03 	bleq	2c392c <startup-0x1fd3c6d4>
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	13010b39 	movwne	r0, #6969	; 0x1b39
 124:	0d090000 	stceq	0, cr0, [r9, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 134:	0a00000b 	beq	168 <startup-0x1ffffe98>
 138:	13490101 	movtne	r0, #37121	; 0x9101
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 144:	000b2f13 	andeq	r2, fp, r3, lsl pc
 148:	01150c00 	tsteq	r5, r0, lsl #24
 14c:	13011927 	movwne	r1, #6439	; 0x1927
 150:	050d0000 	streq	r0, [sp, #-0]
 154:	00134900 	andseq	r4, r3, r0, lsl #18
 158:	00340e00 	eorseq	r0, r4, r0, lsl #28
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	0b390b3b 	bleq	e42e54 <startup-0x1f1bd1ac>
 164:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 168:	00001802 	andeq	r1, r0, r2, lsl #16
 16c:	0300340f 	movweq	r3, #1039	; 0x40f
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	002e1000 	eoreq	r1, lr, r0
 180:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	11000019 	tstne	r0, r9, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	0b39053b 	bleq	e41694 <startup-0x1f1be96c>
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1b0:	12000013 	andne	r0, r0, #19
 1b4:	08030005 	stmdaeq	r3, {r0, r2}
 1b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1bc:	13490b39 	movtne	r0, #39737	; 0x9b39
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	03000513 	movweq	r0, #1299	; 0x513
 1c8:	3b0b3a0e 	blcc	2cea08 <startup-0x1fd315f8>
 1cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1d0:	00180213 	andseq	r0, r8, r3, lsl r2
 1d4:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 1d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	00341500 	eorseq	r1, r4, r0, lsl #10
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	0b39053b 	bleq	e416ec <startup-0x1f1be914>
 1fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 200:	0b160000 	bleq	580208 <startup-0x1fa7fdf8>
 204:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 208:	17000006 	strne	r0, [r0, -r6]
 20c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 210:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 214:	13490b39 	movtne	r0, #39737	; 0x9b39
 218:	00001802 	andeq	r1, r0, r2, lsl #16
 21c:	3f012e18 	svccc	0x00012e18
 220:	3a0e0319 	bcc	380e8c <startup-0x1fc7f174>
 224:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 22c:	19000019 	stmdbne	r0, {r0, r3, r4}
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	3f012e1a 	svccc	0x00012e1a
 238:	3a0e0319 	bcc	380ea4 <startup-0x1fc7f15c>
 23c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 240:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 244:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 248:	96184006 	ldrls	r4, [r8], -r6
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	051b0000 	ldreq	r0, [fp, #-0]
 254:	3a080300 	bcc	200e5c <startup-0x1fdff1a4>
 258:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 25c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 260:	1c000018 	stcne	0, cr0, [r0], {24}
 264:	0111010b 	tsteq	r1, fp, lsl #2
 268:	13010612 	movwne	r0, #5650	; 0x1612
 26c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 270:	03193f01 	tsteq	r9, #1, 30
 274:	3b0b3a0e 	blcc	2ceab4 <startup-0x1fd3154c>
 278:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 27c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 280:	97184006 	ldrls	r4, [r8, -r6]
 284:	13011942 	movwne	r1, #6466	; 0x1942
 288:	341e0000 	ldrcc	r0, [lr], #-0
 28c:	3a080300 	bcc	200e94 <startup-0x1fdff16c>
 290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 298:	1f000018 	svcne	0x00000018
 29c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a0:	0b3a0e03 	bleq	e83ab4 <startup-0x1f17c54c>
 2a4:	0b390b3b 	bleq	e42f98 <startup-0x1f1bd068>
 2a8:	13491927 	movtne	r1, #39207	; 0x9927
 2ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b4:	00130119 	andseq	r0, r3, r9, lsl r1
 2b8:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <startup-0x1f13d050>
 2c4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2d0:	00130119 	andseq	r0, r3, r9, lsl r1
 2d4:	002e2100 	eoreq	r2, lr, r0, lsl #2
 2d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2dc:	0b3b0b3a 	bleq	ec2fcc <startup-0x1f13d034>
 2e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2ec:	22000019 	andcs	r0, r0, #25
 2f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f4:	0b3a0e03 	bleq	e83b08 <startup-0x1f17c4f8>
 2f8:	0b390b3b 	bleq	e42fec <startup-0x1f1bd014>
 2fc:	01111927 	tsteq	r1, r7, lsr #18
 300:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 304:	00194296 	mulseq	r9, r6, r2
 308:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 30c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	13490b39 	movtne	r0, #39737	; 0x9b39
 318:	1301193c 	movwne	r1, #6460	; 0x193c
 31c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 320:	03193f01 	tsteq	r9, #1, 30
 324:	3b0b3a0e 	blcc	2ceb64 <startup-0x1fd3149c>
 328:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 32c:	00193c13 	andseq	r3, r9, r3, lsl ip
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	1b0e030b 	blne	380f6c <startup-0x1fc7f094>
 33c:	1117550e 	tstne	r7, lr, lsl #10
 340:	00171001 	andseq	r1, r7, r1
 344:	002e0200 	eoreq	r0, lr, r0, lsl #4
 348:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 34c:	0b3b0b3a 	bleq	ec303c <startup-0x1f13cfc4>
 350:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000006a 	andeq	r0, r0, sl, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01400002 	cmpeq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000007c 	andcs	r0, r0, ip, ror r0
  34:	0000084a 	andeq	r0, r0, sl, asr #16
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	08d30002 	ldmeq	r3, {r1}^
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200008c8 	andcs	r0, r0, r8, asr #17
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000072 	andeq	r0, r0, r2, ror r0
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
  20:	00632e67 	rsbeq	r2, r3, r7, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	01160320 	tsteq	r6, r0, lsr #6
  34:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
  38:	04020010 	streq	r0, [r2], #-16
  3c:	15052001 	strne	r2, [r5, #-1]
  40:	01040200 	mrseq	r0, R12_usr
  44:	0008053c 	andeq	r0, r8, ip, lsr r5
  48:	3c010402 	cfstrscc	mvf0, [r1], {2}
  4c:	200f0522 	andcs	r0, pc, r2, lsr #10
  50:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
  54:	03052105 	movweq	r2, #20741	; 0x5105
  58:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
  5c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
  60:	11054b08 	tstne	r5, r8, lsl #22
  64:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
  68:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
  6c:	01052e08 	tsteq	r5, r8, lsl #28
  70:	00050231 	andeq	r0, r5, r1, lsr r2
  74:	05820101 	streq	r0, [r2, #257]	; 0x101
  78:	00030000 	andeq	r0, r3, r0
  7c:	0000001d 	andeq	r0, r0, sp, lsl r0
  80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  84:	0101000d 	tsteq	r1, sp
  88:	00000101 	andeq	r0, r0, r1, lsl #2
  8c:	00000100 	andeq	r0, r0, r0, lsl #2
  90:	616d0001 	cmnvs	sp, r1
  94:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
  98:	00000000 	andeq	r0, r0, r0
  9c:	00010500 	andeq	r0, r1, r0, lsl #10
  a0:	007c0205 	rsbseq	r0, ip, r5, lsl #4
  a4:	e7032000 	str	r2, [r3, -r0]
  a8:	0a050100 	beq	1404b0 <startup-0x1febfb50>
  ac:	2f02053e 	svccs	0x0002053e
  b0:	04052f2f 	streq	r2, [r5], #-3887	; 0xfffff0d1
  b4:	2e030531 	mcrcs	5, 0, r0, cr3, cr1, {1}
  b8:	3d07053d 	cfstr32cc	mvfx0, [r7, #-244]	; 0xffffff0c
  bc:	05590305 	ldrbeq	r0, [r9, #-773]	; 0xfffffcfb
  c0:	0c05920d 	sfmeq	f1, 1, [r5], {13}
  c4:	4a04052e 	bmi	101584 <startup-0x1fefea7c>
  c8:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
  cc:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
  d0:	210d0558 	tstcs	sp, r8, asr r5
  d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
  d8:	0d054a04 	vstreq	s8, [r5, #-16]
  dc:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
  e0:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
  e4:	0c05210d 	stfeqs	f2, [r5], {13}
  e8:	4a04052e 	bmi	1015a8 <startup-0x1fefea58>
  ec:	77030305 	strvc	r0, [r3, -r5, lsl #6]
  f0:	03010520 	movweq	r0, #5408	; 0x1520
  f4:	02056610 	andeq	r6, r5, #16, 12	; 0x1000000
  f8:	20220530 	eorcs	r0, r2, r0, lsr r5
  fc:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 100:	2f05202c 	svccs	0x0005202c
 104:	3105592f 	tstcc	r5, pc, lsr #18
 108:	592f0567 	stmdbpl	pc!, {r0, r1, r2, r5, r6, r8, sl}	; <UNPREDICTABLE>
 10c:	68010559 	stmdavs	r1, {r0, r3, r4, r6, r8, sl}
 110:	02053208 	andeq	r3, r5, #8, 4	; 0x80000000
 114:	200c0530 	andcs	r0, ip, r0, lsr r5
 118:	052f0205 	streq	r0, [pc, #-517]!	; ffffff1b <ballobject+0xdffff5f3>
 11c:	0205200c 	andeq	r2, r5, #12
 120:	200b052f 	andcs	r0, fp, pc, lsr #10
 124:	052f0205 	streq	r0, [pc, #-517]!	; ffffff27 <ballobject+0xdffff5ff>
 128:	0705200c 	streq	r2, [r5, -ip]
 12c:	0008052f 	andeq	r0, r8, pc, lsr #10
 130:	20010402 	andcs	r0, r1, r2, lsl #8
 134:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 138:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 13c:	04020007 	streq	r0, [r2], #-7
 140:	02053c01 	andeq	r3, r5, #256	; 0x100
 144:	200c0521 	andcs	r0, ip, r1, lsr #10
 148:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 14c:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
 150:	03052e02 	movweq	r2, #24066	; 0x5e02
 154:	03040200 	movweq	r0, #16896	; 0x4200
 158:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 15c:	02002f03 	andeq	r2, r0, #3, 30
 160:	002f0304 	eoreq	r0, pc, r4, lsl #6
 164:	2f030402 	svccs	0x00030402
 168:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 16c:	05290304 	streq	r0, [r9, #-772]!	; 0xfffffcfc
 170:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 174:	02053c01 	andeq	r3, r5, #256	; 0x100
 178:	01040200 	mrseq	r0, R12_usr
 17c:	44010520 	strmi	r0, [r1], #-1312	; 0xfffffae0
 180:	5102055b 	tstpl	r2, fp, asr r5
 184:	4f9f0105 	svcmi	0x009f0105
 188:	054f0505 	strbeq	r0, [pc, #-1285]	; fffffc8b <ballobject+0xdffff363>
 18c:	1c05920d 	sfmne	f1, 1, [r5], {13}
 190:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 194:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 198:	0505201c 	streq	r2, [r5, #-28]	; 0xffffffe4
 19c:	210d052e 	tstcs	sp, lr, lsr #10
 1a0:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 1a4:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 1a8:	201c0521 	andscs	r0, ip, r1, lsr #10
 1ac:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1b0:	1c05210d 	stfnes	f2, [r5], {13}
 1b4:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 1b8:	85240105 	strhi	r0, [r4, #-261]!	; 0xfffffefb
 1bc:	05440905 	strbeq	r0, [r4, #-2309]	; 0xfffff6fb
 1c0:	0c052007 	stceq	0, cr2, [r5], {7}
 1c4:	4a08053d 	bmi	2016c0 <startup-0x1fdfe940>
 1c8:	05211005 	streq	r1, [r1, #-5]!
 1cc:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
 1d0:	2110054a 	tstcs	r0, sl, asr #10
 1d4:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff5d7 <ballobject+0xdfffecaf>
 1d8:	10054a08 	andne	r4, r5, r8, lsl #20
 1dc:	2f0c0521 	svccs	0x000c0521
 1e0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1e4:	0c052110 	stfeqs	f2, [r5], {16}
 1e8:	21010530 	tstcs	r1, r0, lsr r5
 1ec:	3e130569 	cfmsc32cc	mvfx0, mvfx3, mvfx9
 1f0:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
 1f4:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 1f8:	4b140522 	blmi	501688 <startup-0x1fafe978>
 1fc:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
 200:	1f053e0d 	svcne	0x00053e0d
 204:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 208:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
 20c:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 210:	001d0520 	andseq	r0, sp, r0, lsr #10
 214:	03020402 	movweq	r0, #9218	; 0x2402
 218:	05053c7a 	streq	r3, [r5, #-3194]	; 0xfffff386
 21c:	01040200 	mrseq	r0, R12_usr
 220:	3c09033c 	stccc	3, cr0, [r9], {60}	; 0x3c
 224:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 228:	04020001 	streq	r0, [r2], #-1
 22c:	05782101 	ldrbeq	r2, [r8, #-257]!	; 0xfffffeff
 230:	07055910 	smladeq	r5, r0, r9, r5
 234:	2e050559 	cfrshl32cs	mvfx5, mvfx9, r0
 238:	4b01052f 	blmi	416fc <startup-0x1ffbe904>
 23c:	4c0c054d 	cfstr32mi	mvfx0, [ip], {77}	; 0x4d
 240:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 244:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 248:	13052e01 	movwne	r2, #24065	; 0x5e01
 24c:	01040200 	mrseq	r0, R12_usr
 250:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 254:	002e0603 	eoreq	r0, lr, r3, lsl #12
 258:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
 25c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 260:	20060604 	andcs	r0, r6, r4, lsl #12
 264:	02002c05 	andeq	r2, r0, #1280	; 0x500
 268:	054a0604 	strbeq	r0, [sl, #-1540]	; 0xfffff9fc
 26c:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 270:	3b052e06 	blcc	14ba90 <startup-0x1feb4570>
 274:	07040200 	streq	r0, [r4, -r0, lsl #4]
 278:	0033052e 	eorseq	r0, r3, lr, lsr #10
 27c:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
 280:	09040200 	stmdbeq	r4, {r9}
 284:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 288:	052e0a04 	streq	r0, [lr, #-2564]!	; 0xfffff5fc
 28c:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 290:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
 294:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 298:	5305740c 	movwpl	r7, #21516	; 0x540c
 29c:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 2a0:	005b052e 	subseq	r0, fp, lr, lsr #10
 2a4:	2e0d0402 	cdpcs	4, 0, cr0, cr13, cr2, {0}
 2a8:	02005305 	andeq	r5, r0, #335544320	; 0x14000000
 2ac:	002e0d04 	eoreq	r0, lr, r4, lsl #26
 2b0:	060f0402 	streq	r0, [pc], -r2, lsl #8
 2b4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 2b8:	44052e10 	strmi	r2, [r5], #-3600	; 0xfffff1f0
 2bc:	12040200 	andne	r0, r4, #0, 4
 2c0:	6d052006 	stcvs	0, cr2, [r5, #-24]	; 0xffffffe8
 2c4:	12040200 	andne	r0, r4, #0, 4
 2c8:	00740520 	rsbseq	r0, r4, r0, lsr #10
 2cc:	2e120402 	cfmulscs	mvf0, mvf2, mvf2
 2d0:	02007c05 	andeq	r7, r0, #1280	; 0x500
 2d4:	052e1304 	streq	r1, [lr, #-772]!	; 0xfffffcfc
 2d8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 2dc:	02002e13 	andeq	r2, r0, #304	; 0x130
 2e0:	2e061504 	cfsh32cs	mvfx1, mvfx6, #4
 2e4:	16040200 	strne	r0, [r4], -r0, lsl #4
 2e8:	0065052e 	rsbeq	r0, r5, lr, lsr #10
 2ec:	06180402 	ldreq	r0, [r8], -r2, lsl #8
 2f0:	00050520 	andeq	r0, r5, r0, lsr #10
 2f4:	20180402 	andscs	r0, r8, r2, lsl #8
 2f8:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
 2fc:	1905320f 	stmdbne	r5, {r0, r1, r2, r3, r9, ip, sp}
 300:	2e12053c 	mrccs	5, 0, r0, cr2, cr12, {1}
 304:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 308:	32053c28 	andcc	r3, r5, #40, 24	; 0x2800
 30c:	2e2b053c 	mcrcs	5, 1, r0, cr11, cr12, {1}
 310:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
 314:	09053c05 	stmdbeq	r5, {r0, r2, sl, fp, ip, sp}
 318:	05055a2f 	streq	r5, [r5, #-2607]	; 0xfffff5d1
 31c:	5a03054b 	bpl	c1850 <startup-0x1ff3e7b0>
 320:	840b0575 	strhi	r0, [fp], #-1397	; 0xfffffa8b
 324:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 328:	03052e05 	movweq	r2, #24069	; 0x5e05
 32c:	15057530 	strne	r7, [r5, #-1328]	; 0xfffffad0
 330:	2e1f0584 	cdpcs	5, 1, cr0, cr15, cr4, {4}
 334:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 338:	23054b19 	movwcs	r4, #23321	; 0x5b19
 33c:	2e1c053c 	mrccs	5, 0, r0, cr12, cr12, {1}
 340:	05201005 	streq	r1, [r0, #-5]!
 344:	4b3d3c07 	blmi	f4f368 <startup-0x1f0b0c98>
 348:	055a0b05 	ldrbeq	r0, [sl, #-2821]	; 0xfffff4fb
 34c:	05052e15 	streq	r2, [r5, #-3605]	; 0xfffff1eb
 350:	2f09052e 	svccs	0x0009052e
 354:	4b14055a 	blmi	5018c4 <startup-0x1fafe73c>
 358:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 35c:	06052002 	streq	r2, [r5], -r2
 360:	59040522 	stmdbpl	r4, {r1, r5, r8, sl}
 364:	83090592 	movwhi	r0, #38290	; 0x9592
 368:	3c110591 	cfldr32cc	mvfx0, [r1], {145}	; 0x91
 36c:	303c0605 	eorscc	r0, ip, r5, lsl #12
 370:	05910a05 	ldreq	r0, [r1, #2565]	; 0xa05
 374:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 378:	74760302 	ldrbtvc	r0, [r6], #-770	; 0xfffffcfe
 37c:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 380:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 384:	04020002 	streq	r0, [r2], #-2
 388:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 38c:	053c0f03 	ldreq	r0, [ip, #-3843]!	; 0xfffff0fd
 390:	054d2101 	strbeq	r2, [sp, #-257]	; 0xfffffeff
 394:	0a054f10 	beq	153fdc <startup-0x1feac024>
 398:	3c22052e 	cfstr32cc	mvfx0, [r2], #-184	; 0xffffff48
 39c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 3a0:	38052e32 	stmdacc	r5, {r1, r4, r5, r9, sl, fp, sp}
 3a4:	2e35052e 	cdpcs	5, 3, cr0, cr5, cr14, {1}
 3a8:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
 3ac:	43053c49 	movwmi	r3, #23625	; 0x5c49
 3b0:	2e55052e 	cdpcs	5, 5, cr0, cr5, cr14, {1}
 3b4:	05666605 	strbeq	r6, [r6, #-1541]!	; 0xfffff9fb
 3b8:	1005586d 	andne	r5, r5, sp, ror #16
 3bc:	2e16054b 	cfmac32cs	mvfx0, mvfx6, mvfx11
 3c0:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 3c4:	29052e0a 	stmdbcs	r5, {r1, r3, r9, sl, fp, sp}
 3c8:	2e23053c 	mcrcs	5, 1, r0, cr3, cr12, {1}
 3cc:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 3d0:	3c052e3f 	stccc	14, cr2, [r5], {63}	; 0x3f
 3d4:	2e33052e 	cdpcs	5, 3, cr0, cr3, cr14, {1}
 3d8:	052e5005 	streq	r5, [lr, #-5]!
 3dc:	53052e56 	movwpl	r2, #24150	; 0x5e56
 3e0:	2e4a052e 	cdpcs	5, 4, cr0, cr10, cr14, {1}
 3e4:	052e6305 	streq	r6, [lr, #-773]!	; 0xfffffcfb
 3e8:	7b055874 	blvc	1565c0 <startup-0x1fea9a40>
 3ec:	4b100558 	blmi	401954 <startup-0x1fbfe6ac>
 3f0:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
 3f4:	0a052e13 	beq	14bc48 <startup-0x1feb43b8>
 3f8:	3c29052e 	cfstr32cc	mvfx0, [r9], #-184	; 0xffffff48
 3fc:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
 400:	23052e2c 	movwcs	r2, #24108	; 0x5e2c
 404:	2e40052e 	cdpcs	5, 4, cr0, cr0, cr14, {1}
 408:	052e3a05 	streq	r3, [lr, #-2565]!	; 0xfffff5fb
 40c:	56052e50 			; <UNDEFINED> instruction: 0x56052e50
 410:	2e53052e 	cdpcs	5, 5, cr0, cr3, cr14, {1}
 414:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
 418:	74052e63 	strvc	r2, [r5], #-3683	; 0xfffff19d
 41c:	587b0558 	ldmdapl	fp!, {r3, r4, r6, r8, sl}^
 420:	054b1005 	strbeq	r1, [fp, #-5]
 424:	22052e0a 	andcs	r2, r5, #10, 28	; 0xa0
 428:	2e28053c 	mcrcs	5, 1, r0, cr8, cr12, {1}
 42c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 430:	39052e1c 	stmdbcc	r5, {r2, r3, r4, r9, sl, fp, sp}
 434:	2e33052e 	cdpcs	5, 3, cr0, cr3, cr14, {1}
 438:	052e4905 	streq	r4, [lr, #-2309]!	; 0xfffff6fb
 43c:	55052e43 	strpl	r2, [r5, #-3651]	; 0xfffff1bd
 440:	4a66052e 	bmi	1981900 <startup-0x1e67e700>
 444:	05586d05 	ldrbeq	r6, [r8, #-3333]	; 0xfffff2fb
 448:	054d4b01 	strbeq	r4, [sp, #-2817]	; 0xfffff4ff
 44c:	07054c10 	smladeq	r5, r0, ip, r4
 450:	3d10052e 	cfldr32cc	mvfx0, [r0, #-184]	; 0xffffff48
 454:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 458:	08052f0d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sl, fp, sp}
 45c:	230d053d 	movwcs	r0, #54589	; 0xd53d
 460:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 464:	08053d0d 	stmdaeq	r5, {r0, r2, r3, r8, sl, fp, ip, sp}
 468:	2f13052e 	svccs	0x0013052e
 46c:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 470:	08053c19 	stmdaeq	r5, {r0, r3, r4, sl, fp, ip, sp}
 474:	2e21052e 	cfsh64cs	mvdx0, mvdx1, #30
 478:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 47c:	08052e27 	stmdaeq	r5, {r0, r1, r2, r5, r9, sl, fp, sp}
 480:	2f03053c 	svccs	0x0003053c
 484:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 488:	19052e08 	stmdbne	r5, {r3, r9, sl, fp, sp}
 48c:	2e15052e 	cfmul64cs	mvdx0, mvdx5, mvdx14
 490:	052f0705 	streq	r0, [pc, #-1797]!	; fffffd93 <ballobject+0xdffff46b>
 494:	3c780308 	ldclcc	3, cr0, [r8], #-32	; 0xffffffe0
 498:	0a030105 	beq	c08b4 <startup-0x1ff3f74c>
 49c:	10055c3c 	andne	r5, r5, ip, lsr ip
 4a0:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
 4a4:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 4a8:	16052e02 	strne	r2, [r5], -r2, lsl #28
 4ac:	03040200 	movweq	r0, #16896	; 0x4200
 4b0:	00210523 	eoreq	r0, r1, r3, lsr #10
 4b4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4b8:	02002005 	andeq	r2, r0, #5
 4bc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4c0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 4c4:	2d052e03 	stccs	14, cr2, [r5, #-12]
 4c8:	03040200 	movweq	r0, #16896	; 0x4200
 4cc:	0003053c 	andeq	r0, r3, ip, lsr r5
 4d0:	20030402 	andcs	r0, r3, r2, lsl #8
 4d4:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
 4d8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 4dc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 4e0:	3d052e03 	stccc	14, cr2, [r5, #-12]
 4e4:	03040200 	movweq	r0, #16896	; 0x4200
 4e8:	0047052e 	subeq	r0, r7, lr, lsr #10
 4ec:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4f0:	02004a05 	andeq	r4, r0, #20480	; 0x5000
 4f4:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 4f8:	04020003 	streq	r0, [r2], #-3
 4fc:	1f052003 	svcne	0x00052003
 500:	03040200 	movweq	r0, #16896	; 0x4200
 504:	00020547 	andeq	r0, r2, r7, asr #10
 508:	3c010402 	cfstrscc	mvf0, [r1], {2}
 50c:	5b500105 	blpl	1400928 <startup-0x1ebff6d8>
 510:	054b1005 	strbeq	r1, [fp, #-5]
 514:	0b052e06 	bleq	14bd34 <startup-0x1feb42cc>
 518:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 51c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 520:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
 524:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 528:	22052e03 	andcs	r2, r5, #3, 28	; 0x30
 52c:	03040200 	movweq	r0, #16896	; 0x4200
 530:	002c052e 	eoreq	r0, ip, lr, lsr #10
 534:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 538:	02002f05 	andeq	r2, r0, #5, 30
 53c:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 540:	04020003 	streq	r0, [r2], #-3
 544:	35052003 	strcc	r2, [r5, #-3]
 548:	03040200 	movweq	r0, #16896	; 0x4200
 54c:	00400520 	subeq	r0, r0, r0, lsr #10
 550:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 554:	02003f05 	andeq	r3, r0, #5, 30
 558:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 55c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 560:	4c052e03 	stcmi	14, cr2, [r5], {3}
 564:	03040200 	movweq	r0, #16896	; 0x4200
 568:	0003053c 	andeq	r0, r3, ip, lsr r5
 56c:	20030402 	andcs	r0, r3, r2, lsl #8
 570:	02001f05 	andeq	r1, r0, #5, 30
 574:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 578:	04020002 	streq	r0, [r2], #-2
 57c:	01053c01 	tsteq	r5, r1, lsl #24
 580:	02055b4f 	andeq	r5, r5, #80896	; 0x13c00
 584:	4b0e054b 	blmi	381ab8 <startup-0x1fc7e548>
 588:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 58c:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 590:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 594:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 598:	12052f05 	andne	r2, r5, #5, 30
 59c:	2e0d053f 	mcrcs	5, 0, r0, cr13, cr15, {1}
 5a0:	2f3c0b05 	svccs	0x003c0b05
 5a4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 5a8:	05052e08 	streq	r2, [r5, #-3592]	; 0xfffff1f8
 5ac:	3f100530 	svccc	0x00100530
 5b0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 5b4:	052f200b 	streq	r2, [pc, #-11]!	; 5b1 <startup-0x1ffffa4f>
 5b8:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
 5bc:	3005052e 	andcc	r0, r5, lr, lsr #10
 5c0:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 5c4:	0b052e0d 	bleq	14be00 <startup-0x1feb4200>
 5c8:	15052f3c 	strne	r2, [r5, #-3900]	; 0xfffff0c4
 5cc:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
 5d0:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 5d4:	0d053e10 	stceq	14, cr3, [r5, #-64]	; 0xffffffc0
 5d8:	200b052e 	andcs	r0, fp, lr, lsr #10
 5dc:	2e15052f 	cfmul64cs	mvdx0, mvdx5, mvdx15
 5e0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 5e4:	053d300a 	ldreq	r3, [sp, #-10]!
 5e8:	01053d02 	tsteq	r5, r2, lsl #26
 5ec:	0a054d4b 	beq	153b20 <startup-0x1feac4e0>
 5f0:	01053d67 	tsteq	r5, r7, ror #26
 5f4:	02324e3d 	eorseq	r4, r2, #976	; 0x3d0
 5f8:	01010003 	tsteq	r1, r3
 5fc:	0000006e 	andeq	r0, r0, lr, rrx
 600:	00200003 	eoreq	r0, r0, r3
 604:	01020000 	mrseq	r0, (UNDEF: 2)
 608:	000d0efb 	strdeq	r0, [sp], -fp
 60c:	01010101 	tsteq	r1, r1, lsl #2
 610:	01000000 	mrseq	r0, (UNDEF: 0)
 614:	00010000 	andeq	r0, r1, r0
 618:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 61c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 620:	00000063 	andeq	r0, r0, r3, rrx
 624:	0f050000 	svceq	0x00050000
 628:	00020500 	andeq	r0, r2, r0, lsl #10
 62c:	17200000 	strne	r0, [r0, -r0]!
 630:	21130205 	tstcs	r3, r5, lsl #4
 634:	01052f21 	tsteq	r5, r1, lsr #30
 638:	00030221 	andeq	r0, r3, r1, lsr #4
 63c:	01050101 	tsteq	r5, r1, lsl #2
 640:	c8020500 	stmdagt	r2, {r8, sl}
 644:	03200008 			; <UNDEFINED> instruction: 0x03200008
 648:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
 64c:	01051321 	tsteq	r5, r1, lsr #6
 650:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 654:	01051321 	tsteq	r5, r1, lsr #6
 658:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 65c:	01051321 	tsteq	r5, r1, lsr #6
 660:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 664:	01051321 	tsteq	r5, r1, lsr #6
 668:	00010221 	andeq	r0, r1, r1, lsr #4
 66c:	Address 0x000000000000066c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
   4:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
   8:	72746568 	rsbsvc	r6, r4, #104, 10	; 0x1a000000
   c:	442f6e61 	strtmi	r6, [pc], #-3681	; 14 <startup-0x1fffffec>
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6f6b532f 	svcvs	0x006b532f
  1c:	4d2f616c 	stfmis	f6, [pc, #-432]!	; fffffe74 <ballobject+0xdffff54c>
  20:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffeec <ballobject+0xdffff5c4>
  24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffef0 <ballobject+0xdffff5c8>
  28:	37303444 	ldrcc	r3, [r0, -r4, asr #8]!
  2c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  30:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  34:	65640030 	strbvs	r0, [r4, #-48]!	; 0xffffffd0
  38:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
  3c:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
  40:	31432055 	qdaddcc	r2, r5, r3
  44:	30312037 	eorscc	r2, r1, r7, lsr r0
  48:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  4c:	32303220 	eorscc	r3, r0, #32, 4
  50:	32383031 	eorscc	r3, r8, #49	; 0x31
  54:	72282034 	eorvc	r2, r8, #52	; 0x34
  58:	61656c65 	cmnvs	r5, r5, ror #24
  5c:	20296573 	eorcs	r6, r9, r3, ror r5
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	6f6e6d2d 	svcvs	0x006e6d2d
  6c:	616e752d 	cmnvs	lr, sp, lsr #10
  70:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
  74:	612d6465 			; <UNDEFINED> instruction: 0x612d6465
  78:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
  7c:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  80:	616f6c66 	cmnvs	pc, r6, ror #24
  84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  88:	6f733d69 	svcvs	0x00733d69
  8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  90:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  94:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  98:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  9c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  a0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  a4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  a8:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  ac:	00373175 	eorseq	r3, r7, r5, ror r1
  b0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  b4:	31646573 	smccc	18003	; 0x4653
  b8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  bc:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  c0:	755f0032 	ldrbvc	r0, [pc, #-50]	; 96 <startup-0x1fffff6a>
  c4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
  c8:	5f003364 	svcpl	0x00003364
  cc:	73756e75 	cmnvc	r5, #1872	; 0x750
  d0:	00346465 	eorseq	r6, r4, r5, ror #8
  d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  d8:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
  dc:	6f687300 	svcvs	0x00687300
  e0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f0:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
  f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
  fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 100:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 104:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 110:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 114:	72640079 	rsbvc	r0, r4, #121	; 0x79
 118:	705f7761 	subsvc	r7, pc, r1, ror #14
 11c:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 120:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 13c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 140:	00646565 	rsbeq	r6, r4, r5, ror #10
 144:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 148:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 14c:	6a626f6c 	bvs	189bf04 <startup-0x1e7640fc>
 150:	00746365 	rsbseq	r6, r4, r5, ror #6
 154:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 158:	61655200 	cmnvs	r5, r0, lsl #4
 15c:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; ffffffd4 <ballobject+0xdffff6ac>
 160:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 164:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 168:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 16c:	6f6c2067 	svcvs	0x006c2067
 170:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 174:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 178:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 17c:	3035325f 	eorscc	r3, r5, pc, asr r2
 180:	5000736e 	andpl	r7, r0, lr, ror #6
 184:	594c4f50 	stmdbpl	ip, {r4, r6, r8, r9, sl, fp, lr}^
 188:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 18c:	52500054 	subspl	r0, r0, #84	; 0x54
 190:	00544345 	subseq	r4, r4, r5, asr #6
 194:	695f796d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
 198:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 19c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 1a0:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 1a4:	61746c65 	cmnvs	r4, r5, ror #24
 1a8:	6f700079 	svcvs	0x00700079
 1ac:	6f67796c 	svcvs	0x0067796c
 1b0:	696f706e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 1b4:	7000746e 	andvc	r7, r0, lr, ror #8
 1b8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 1bc:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 1c0:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
 1c4:	5f74696e 	svcpl	0x0074696e
 1c8:	00707061 	rsbseq	r7, r0, r1, rrx
 1cc:	65646973 	strbvs	r6, [r4, #-2419]!	; 0xfffff68d
 1d0:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
 1d4:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 1d8:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 1dc:	61726700 	cmnvs	r2, r0, lsl #14
 1e0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1e4:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 1e8:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 1ec:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1f0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 1f4:	00786465 	rsbseq	r6, r8, r5, ror #8
 1f8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1fc:	67007964 	strvs	r7, [r0, -r4, ror #18]
 200:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 204:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 208:	6174696e 	cmnvs	r4, lr, ror #18
 20c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 210:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 214:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 15a <startup-0x1ffffea6>	; <UNPREDICTABLE>
 218:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 21c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 220:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 224:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 228:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 22c:	6f700063 	svcvs	0x00700063
 230:	70007873 	andvc	r7, r0, r3, ror r8
 234:	0079736f 	rsbseq	r7, r9, pc, ror #6
 238:	70617267 	rsbvc	r7, r1, r7, ror #4
 23c:	5f636968 	svcpl	0x00636968
 240:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 244:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xfffff094
 248:	6f6c0074 	svcvs	0x006c0074
 24c:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
 250:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
 254:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
 258:	00706565 	rsbseq	r6, r0, r5, ror #10
 25c:	4a424f50 	bmi	1093fa4 <startup-0x1ef6c05c>
 260:	00544345 	subseq	r4, r4, r5, asr #6
 264:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 268:	494c5000 	stmdbmi	ip, {ip, lr}^
 26c:	5000454e 	andpl	r4, r0, lr, asr #10
 270:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 15c <startup-0x1ffffea4>
 274:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 278:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 27c:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 280:	6f6c6c61 	svcvs	0x006c6c61
 284:	63656a62 	cmnvs	r5, #401408	; 0x62000
 288:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 28c:	61625f74 	smcvs	9716	; 0x25f4
 290:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 294:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 298:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 29c:	73006465 	movwvc	r6, #1125	; 0x465
 2a0:	00706177 	rsbseq	r6, r0, r7, ror r1
 2a4:	6f727265 	svcvs	0x00727265
 2a8:	6e750072 	mrcvs	0, 3, r0, cr5, cr2, {3}
 2ac:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2b0:	63206465 			; <UNDEFINED> instruction: 0x63206465
 2b4:	00726168 	rsbseq	r6, r2, r8, ror #2
 2b8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 2bc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 2c0:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2c8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 2cc:	5f726165 	svcpl	0x00726165
 2d0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 2d4:	79006e65 	stmdbvc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
 2d8:	70657473 	rsbvc	r7, r5, r3, ror r4
 2dc:	6c616200 	sfmvs	f6, 2, [r1], #-0
 2e0:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 2e4:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 2e8:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 2ec:	00787269 	rsbseq	r7, r8, r9, ror #4
 2f0:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 2f4:	61726400 	cmnvs	r2, r0, lsl #8
 2f8:	61625f77 	smcvs	9719	; 0x25f7
 2fc:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 300:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 304:	61726400 	cmnvs	r2, r0, lsl #8
 308:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 30c:	6400656e 	strvs	r6, [r0], #-1390	; 0xfffffa92
 310:	5f776172 	svcpl	0x00776172
 314:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 318:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
 31c:	4f740065 	svcmi	0x00740065
 320:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 324:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 328:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 32c:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 330:	00776172 	rsbseq	r6, r7, r2, ror r1
 334:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 338:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 33c:	0079657a 	rsbseq	r6, r9, sl, ror r5
 340:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 344:	616d0074 	smcvs	53252	; 0xd004
 348:	64006e69 	strvs	r6, [r0], #-3689	; 0xfffff197
 34c:	61746c65 	cmnvs	r4, r5, ror #24
 350:	74730078 	ldrbtvc	r0, [r3], #-120	; 0xffffff88
 354:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 358:	00632e70 	rsbeq	r2, r3, r0, ror lr
 35c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 360:	00707574 	rsbseq	r7, r0, r4, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000050 	andcs	r0, r0, r0, asr r0
  3c:	0000002a 	andeq	r0, r0, sl, lsr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	2000007c 	andcs	r0, r0, ip, ror r0
  6c:	00000098 	muleq	r0, r8, r0
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	180e4101 	stmdane	lr, {r0, r8, lr}
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	20000114 	andcs	r0, r0, r4, lsl r1
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	20000180 	andcs	r0, r0, r0, lsl #3
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	200001c4 	andcs	r0, r0, r4, asr #3
  c4:	00000036 	andeq	r0, r0, r6, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	200001fa 	strdcs	r0, [r0], -sl
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	2000021e 	andcs	r0, r0, lr, lsl r2
 104:	00000052 	andeq	r0, r0, r2, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	20000270 	andcs	r0, r0, r0, ror r2
 124:	00000054 	andeq	r0, r0, r4, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000050 	andeq	r0, r0, r0, asr r0
 140:	200002c4 	andcs	r0, r0, r4, asr #5
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 14c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 150:	280e4101 	stmdacs	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	2000032c 	andcs	r0, r0, ip, lsr #6
 164:	0000002c 	andeq	r0, r0, ip, lsr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000050 	andeq	r0, r0, r0, asr r0
 180:	20000358 	andcs	r0, r0, r8, asr r3
 184:	000001f6 	strdeq	r0, [r0], -r6
 188:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 18c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 190:	280e4101 	stmdacs	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	00000020 	andeq	r0, r0, r0, lsr #32
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	2000054e 	andcs	r0, r0, lr, asr #10
 1a4:	0000014a 	andeq	r0, r0, sl, asr #2
 1a8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 1ac:	86048505 	strhi	r8, [r4], -r5, lsl #10
 1b0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1b4:	300e4101 	andcc	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	00000020 	andeq	r0, r0, r0, lsr #32
 1c0:	00000050 	andeq	r0, r0, r0, asr r0
 1c4:	20000698 	mulcs	r0, r8, r6
 1c8:	00000088 	andeq	r0, r0, r8, lsl #1
 1cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 1d0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 1d4:	41018e02 	tstmi	r1, r2, lsl #28
 1d8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1dc:	00000007 	andeq	r0, r0, r7
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	00000050 	andeq	r0, r0, r0, asr r0
 1e8:	20000720 	andcs	r0, r0, r0, lsr #14
 1ec:	00000060 	andeq	r0, r0, r0, rrx
 1f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f4:	41018e02 	tstmi	r1, r2, lsl #28
 1f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1fc:	00000007 	andeq	r0, r0, r7
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	00000050 	andeq	r0, r0, r0, asr r0
 208:	20000780 	andcs	r0, r0, r0, lsl #15
 20c:	00000060 	andeq	r0, r0, r0, rrx
 210:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 214:	41018e02 	tstmi	r1, r2, lsl #28
 218:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 21c:	00000007 	andeq	r0, r0, r7
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000050 	andeq	r0, r0, r0, asr r0
 228:	200007e0 	andcs	r0, r0, r0, ror #15
 22c:	000000bc 	strheq	r0, [r0], -ip
 230:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 234:	41018e02 	tstmi	r1, r2, lsl #28
 238:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 23c:	00000007 	andeq	r0, r0, r7
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000050 	andeq	r0, r0, r0, asr r0
 248:	2000089c 	mulcs	r0, ip, r8
 24c:	00000020 	andeq	r0, r0, r0, lsr #32
 250:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 254:	41018e02 	tstmi	r1, r2, lsl #28
 258:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 25c:	00000007 	andeq	r0, r0, r7
 260:	00000018 	andeq	r0, r0, r8, lsl r0
 264:	00000050 	andeq	r0, r0, r0, asr r0
 268:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 26c:	0000000a 	andeq	r0, r0, sl
 270:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 274:	41018e02 	tstmi	r1, r2, lsl #28
 278:	0000070d 	andeq	r0, r0, sp, lsl #14
 27c:	0000000c 	andeq	r0, r0, ip
 280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 284:	7c020001 	stcvc	0, cr0, [r2], {1}
 288:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 28c:	0000000c 	andeq	r0, r0, ip
 290:	0000027c 	andeq	r0, r0, ip, ror r2
 294:	20000000 	andcs	r0, r0, r0
 298:	0000000c 	andeq	r0, r0, ip
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	0000027c 	andeq	r0, r0, ip, ror r2
 2a4:	200008c8 	andcs	r0, r0, r8, asr #17
 2a8:	00000006 	andeq	r0, r0, r6
 2ac:	0000000c 	andeq	r0, r0, ip
 2b0:	0000027c 	andeq	r0, r0, ip, ror r2
 2b4:	200008ce 	andcs	r0, r0, lr, asr #17
 2b8:	00000006 	andeq	r0, r0, r6
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	0000027c 	andeq	r0, r0, ip, ror r2
 2c4:	200008d4 	ldrdcs	r0, [r0], -r4
 2c8:	00000006 	andeq	r0, r0, r6
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	0000027c 	andeq	r0, r0, ip, ror r2
 2d4:	200008da 	ldrdcs	r0, [r0], -sl
 2d8:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200008c8 	andcs	r0, r0, r8, asr #17
   4:	200008e0 	andcs	r0, r0, r0, ror #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
