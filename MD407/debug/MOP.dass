
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 f83a 	bl	2000007c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	4b0b      	ldr	r3, [pc, #44]	; (2000004c <print_char+0x3c>)
20000020:	881b      	ldrh	r3, [r3, #0]
20000022:	b29b      	uxth	r3, r3
20000024:	001a      	movs	r2, r3
20000026:	2380      	movs	r3, #128	; 0x80
20000028:	4013      	ands	r3, r2
2000002a:	d0f8      	beq.n	2000001e <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
2000002c:	4a07      	ldr	r2, [pc, #28]	; (2000004c <print_char+0x3c>)
2000002e:	1dfb      	adds	r3, r7, #7
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b29b      	uxth	r3, r3
20000034:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	2b0a      	cmp	r3, #10
2000003c:	d102      	bne.n	20000044 <print_char+0x34>
		print_char('\r');
2000003e:	200d      	movs	r0, #13
20000040:	f7ff ffe6 	bl	20000010 <print_char>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40011000 	andmi	r1, r1, r0

20000050 <print>:

void print(char *s) {
20000050:	b580      	push	{r7, lr}
20000052:	b082      	sub	sp, #8
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000058:	e006      	b.n	20000068 <print+0x18>
		print_char(*(s++));
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	1c5a      	adds	r2, r3, #1
2000005e:	607a      	str	r2, [r7, #4]
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	0018      	movs	r0, r3
20000064:	f7ff ffd4 	bl	20000010 <print_char>
	while (*s != '\0') {
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2b00      	cmp	r3, #0
2000006e:	d1f4      	bne.n	2000005a <print+0xa>
	}
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	46bd      	mov	sp, r7
20000076:	b002      	add	sp, #8
20000078:	bd80      	pop	{r7, pc}
2000007a:	46c0      	nop			; (mov r8, r8)

2000007c <main>:
	move_paddle,
	set_ballobject_speed,
};

void main(void)
{
2000007c:	b590      	push	{r4, r7, lr}
2000007e:	b085      	sub	sp, #20
20000080:	af00      	add	r7, sp, #0
	char c;
	POBJECT p = &ballobject;
20000082:	4b25      	ldr	r3, [pc, #148]	; (20000118 <main+0x9c>)
20000084:	60fb      	str	r3, [r7, #12]
	POBJECT r = &paddle_object;
20000086:	4b25      	ldr	r3, [pc, #148]	; (2000011c <main+0xa0>)
20000088:	60bb      	str	r3, [r7, #8]
	init_app();
2000008a:	f000 f849 	bl	20000120 <init_app>
	graphic_initalize();
2000008e:	f000 fe03 	bl	20000c98 <graphic_initalize>
	graphic_clear_screen();
20000092:	f000 fe04 	bl	20000c9e <graphic_clear_screen>
	while(1)
	{
		r->move(r);
20000096:	68bb      	ldr	r3, [r7, #8]
20000098:	69db      	ldr	r3, [r3, #28]
2000009a:	68ba      	ldr	r2, [r7, #8]
2000009c:	0010      	movs	r0, r2
2000009e:	4798      	blx	r3
		bounce(r, p);
200000a0:	68fa      	ldr	r2, [r7, #12]
200000a2:	68bb      	ldr	r3, [r7, #8]
200000a4:	0011      	movs	r1, r2
200000a6:	0018      	movs	r0, r3
200000a8:	f000 fd93 	bl	20000bd2 <bounce>
		p->move(p);
200000ac:	68fb      	ldr	r3, [r7, #12]
200000ae:	69db      	ldr	r3, [r3, #28]
200000b0:	68fa      	ldr	r2, [r7, #12]
200000b2:	0010      	movs	r0, r2
200000b4:	4798      	blx	r3
		if (gameover(p))
200000b6:	68fb      	ldr	r3, [r7, #12]
200000b8:	0018      	movs	r0, r3
200000ba:	f000 fdbb 	bl	20000c34 <gameover>
200000be:	1e03      	subs	r3, r0, #0
200000c0:	d124      	bne.n	2000010c <main+0x90>
			break;
		delay_micro(100);
200000c2:	2064      	movs	r0, #100	; 0x64
200000c4:	f000 f884 	bl	200001d0 <delay_micro>
		c = keyb();
200000c8:	1dfc      	adds	r4, r7, #7
200000ca:	f000 f901 	bl	200002d0 <keyb>
200000ce:	0003      	movs	r3, r0
200000d0:	7023      	strb	r3, [r4, #0]
		switch(c)
200000d2:	1dfb      	adds	r3, r7, #7
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	2b03      	cmp	r3, #3
200000d8:	d008      	beq.n	200000ec <main+0x70>
200000da:	2b09      	cmp	r3, #9
200000dc:	d10e      	bne.n	200000fc <main+0x80>
		{
			case 9: r->set_speed(r, 0, 5); break;
200000de:	68bb      	ldr	r3, [r7, #8]
200000e0:	6a1b      	ldr	r3, [r3, #32]
200000e2:	68b8      	ldr	r0, [r7, #8]
200000e4:	2205      	movs	r2, #5
200000e6:	2100      	movs	r1, #0
200000e8:	4798      	blx	r3
200000ea:	e00e      	b.n	2000010a <main+0x8e>
			case 3: r->set_speed(r, 0, -5); break;
200000ec:	68bb      	ldr	r3, [r7, #8]
200000ee:	6a1b      	ldr	r3, [r3, #32]
200000f0:	2205      	movs	r2, #5
200000f2:	4252      	negs	r2, r2
200000f4:	68b8      	ldr	r0, [r7, #8]
200000f6:	2100      	movs	r1, #0
200000f8:	4798      	blx	r3
200000fa:	e006      	b.n	2000010a <main+0x8e>
			default: r->set_speed(r, 0, 0); break;
200000fc:	68bb      	ldr	r3, [r7, #8]
200000fe:	6a1b      	ldr	r3, [r3, #32]
20000100:	68b8      	ldr	r0, [r7, #8]
20000102:	2200      	movs	r2, #0
20000104:	2100      	movs	r1, #0
20000106:	4798      	blx	r3
20000108:	46c0      	nop			; (mov r8, r8)
		r->move(r);
2000010a:	e7c4      	b.n	20000096 <main+0x1a>
			break;
2000010c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
2000010e:	46c0      	nop			; (mov r8, r8)
20000110:	46bd      	mov	sp, r7
20000112:	b005      	add	sp, #20
20000114:	bd90      	pop	{r4, r7, pc}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	20000cf8 	strdcs	r0, [r0], -r8
2000011c:	20000d64 	andcs	r0, r0, r4, ror #26

20000120 <init_app>:

void init_app(void)
{
20000120:	b580      	push	{r7, lr}
20000122:	af00      	add	r7, sp, #0
	// Need to intials the outport 
	*((unsigned long *) 0x40023830) = 0x18;
20000124:	4b11      	ldr	r3, [pc, #68]	; (2000016c <init_app+0x4c>)
20000126:	2218      	movs	r2, #24
20000128:	601a      	str	r2, [r3, #0]

    *((volatile unsigned int *)0x40020C08) = 0x55555555; // MEDIUM SPEED
2000012a:	4b11      	ldr	r3, [pc, #68]	; (20000170 <init_app+0x50>)
2000012c:	4a11      	ldr	r2, [pc, #68]	; (20000174 <init_app+0x54>)
2000012e:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) &= 0x00000000; // MODER CONFIG
20000130:	4b11      	ldr	r3, [pc, #68]	; (20000178 <init_app+0x58>)
20000132:	681b      	ldr	r3, [r3, #0]
20000134:	4b10      	ldr	r3, [pc, #64]	; (20000178 <init_app+0x58>)
20000136:	2200      	movs	r2, #0
20000138:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) |= 0x55005555; // MODER CONFIG
2000013a:	4b0f      	ldr	r3, [pc, #60]	; (20000178 <init_app+0x58>)
2000013c:	681a      	ldr	r2, [r3, #0]
2000013e:	4b0e      	ldr	r3, [pc, #56]	; (20000178 <init_app+0x58>)
20000140:	490e      	ldr	r1, [pc, #56]	; (2000017c <init_app+0x5c>)
20000142:	430a      	orrs	r2, r1
20000144:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned short *) 0x40020C04) &= 0x0000; // TYPER CONFIG
20000146:	4b0e      	ldr	r3, [pc, #56]	; (20000180 <init_app+0x60>)
20000148:	881b      	ldrh	r3, [r3, #0]
2000014a:	4b0d      	ldr	r3, [pc, #52]	; (20000180 <init_app+0x60>)
2000014c:	2200      	movs	r2, #0
2000014e:	801a      	strh	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) &= 0x00000000; // PUPDR CONFIG
20000150:	4b0c      	ldr	r3, [pc, #48]	; (20000184 <init_app+0x64>)
20000152:	681b      	ldr	r3, [r3, #0]
20000154:	4b0b      	ldr	r3, [pc, #44]	; (20000184 <init_app+0x64>)
20000156:	2200      	movs	r2, #0
20000158:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) |= 0x0000AAAA; // PUPDR CONFIG
2000015a:	4b0a      	ldr	r3, [pc, #40]	; (20000184 <init_app+0x64>)
2000015c:	681a      	ldr	r2, [r3, #0]
2000015e:	4b09      	ldr	r3, [pc, #36]	; (20000184 <init_app+0x64>)
20000160:	4909      	ldr	r1, [pc, #36]	; (20000188 <init_app+0x68>)
20000162:	430a      	orrs	r2, r1
20000164:	601a      	str	r2, [r3, #0]

}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	bd80      	pop	{r7, pc}
2000016c:	40023830 	andmi	r3, r2, r0, lsr r8
20000170:	40020c08 	andmi	r0, r2, r8, lsl #24
20000174:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000178:	40020c00 	andmi	r0, r2, r0, lsl #24
2000017c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000180:	40020c04 	andmi	r0, r2, r4, lsl #24
20000184:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000188:	0000aaaa 	andeq	sl, r0, sl, lsr #21

2000018c <delay_250ns>:

// ------------------------------------------------------- DELAYS ------------------------------------------------------------------------------- //
void delay_250ns(void)
{
2000018c:	b580      	push	{r7, lr}
2000018e:	af00      	add	r7, sp, #0
	// page 98
	*STK_CTRL = 0; // Resets SysTick
20000190:	4b0c      	ldr	r3, [pc, #48]	; (200001c4 <delay_250ns+0x38>)
20000192:	2200      	movs	r2, #0
20000194:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 / 4) - 1; // Minus 1 comes from how to processor counts 
20000196:	4b0c      	ldr	r3, [pc, #48]	; (200001c8 <delay_250ns+0x3c>)
20000198:	2229      	movs	r2, #41	; 0x29
2000019a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0; // Resets counter register 
2000019c:	4b0b      	ldr	r3, [pc, #44]	; (200001cc <delay_250ns+0x40>)
2000019e:	2200      	movs	r2, #0
200001a0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5; // Starts the count down 
200001a2:	4b08      	ldr	r3, [pc, #32]	; (200001c4 <delay_250ns+0x38>)
200001a4:	2205      	movs	r2, #5
200001a6:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000){} // while the countflag is 1 
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	4b06      	ldr	r3, [pc, #24]	; (200001c4 <delay_250ns+0x38>)
200001ac:	681a      	ldr	r2, [r3, #0]
200001ae:	2380      	movs	r3, #128	; 0x80
200001b0:	025b      	lsls	r3, r3, #9
200001b2:	4013      	ands	r3, r2
200001b4:	d1f9      	bne.n	200001aa <delay_250ns+0x1e>
	*STK_CTRL = 0; // resets Systick 
200001b6:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <delay_250ns+0x38>)
200001b8:	2200      	movs	r2, #0
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	bd80      	pop	{r7, pc}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	e000e010 	and	lr, r0, r0, lsl r0
200001c8:	e000e014 	and	lr, r0, r4, lsl r0
200001cc:	e000e018 	and	lr, r0, r8, lsl r0

200001d0 <delay_micro>:

void delay_micro(unsigned int ms)
{
200001d0:	b580      	push	{r7, lr}
200001d2:	b084      	sub	sp, #16
200001d4:	af00      	add	r7, sp, #0
200001d6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	// 4 * 250 ns = 1 µs
	for (int i = 0; i < ms; i++)
200001d8:	2300      	movs	r3, #0
200001da:	60fb      	str	r3, [r7, #12]
200001dc:	e00a      	b.n	200001f4 <delay_micro+0x24>
	{
		delay_250ns();
200001de:	f7ff ffd5 	bl	2000018c <delay_250ns>
		delay_250ns();
200001e2:	f7ff ffd3 	bl	2000018c <delay_250ns>
		delay_250ns();
200001e6:	f7ff ffd1 	bl	2000018c <delay_250ns>
		delay_250ns();
200001ea:	f7ff ffcf 	bl	2000018c <delay_250ns>
	for (int i = 0; i < ms; i++)
200001ee:	68fb      	ldr	r3, [r7, #12]
200001f0:	3301      	adds	r3, #1
200001f2:	60fb      	str	r3, [r7, #12]
200001f4:	68fb      	ldr	r3, [r7, #12]
200001f6:	687a      	ldr	r2, [r7, #4]
200001f8:	429a      	cmp	r2, r3
200001fa:	d8f0      	bhi.n	200001de <delay_micro+0xe>
	}

}
200001fc:	46c0      	nop			; (mov r8, r8)
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	46bd      	mov	sp, r7
20000202:	b004      	add	sp, #16
20000204:	bd80      	pop	{r7, pc}

20000206 <delay_milli>:

void delay_milli(unsigned int ms)
{
20000206:	b580      	push	{r7, lr}
20000208:	b082      	sub	sp, #8
2000020a:	af00      	add	r7, sp, #0
2000020c:	6078      	str	r0, [r7, #4]
		ms = ms / 1000;
		ms++;
	#endif
	// 1000 µs = 1 ms 
	
	delay_micro(ms * 1000);
2000020e:	687a      	ldr	r2, [r7, #4]
20000210:	0013      	movs	r3, r2
20000212:	015b      	lsls	r3, r3, #5
20000214:	1a9b      	subs	r3, r3, r2
20000216:	009b      	lsls	r3, r3, #2
20000218:	189b      	adds	r3, r3, r2
2000021a:	00db      	lsls	r3, r3, #3
2000021c:	0018      	movs	r0, r3
2000021e:	f7ff ffd7 	bl	200001d0 <delay_micro>
}
20000222:	46c0      	nop			; (mov r8, r8)
20000224:	46bd      	mov	sp, r7
20000226:	b002      	add	sp, #8
20000228:	bd80      	pop	{r7, pc}

2000022a <ActivateRow>:

// ------------------------------------------------------- keypad ------------------------------------------------------------------------------- //

void ActivateRow( unsigned int row )
{
2000022a:	b580      	push	{r7, lr}
2000022c:	b082      	sub	sp, #8
2000022e:	af00      	add	r7, sp, #0
20000230:	6078      	str	r0, [r7, #4]

    /* Aktivera angiven rad hos tangentbordet, eller

    * deaktivera samtliga */
    switch( row )
20000232:	687b      	ldr	r3, [r7, #4]
20000234:	2b04      	cmp	r3, #4
20000236:	d819      	bhi.n	2000026c <ActivateRow+0x42>
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	009a      	lsls	r2, r3, #2
2000023c:	4b0d      	ldr	r3, [pc, #52]	; (20000274 <ActivateRow+0x4a>)
2000023e:	18d3      	adds	r3, r2, r3
20000240:	681b      	ldr	r3, [r3, #0]
20000242:	469f      	mov	pc, r3
    {
    case 1: *GPIO_ODR_HIGH = 0x10; break;
20000244:	4b0c      	ldr	r3, [pc, #48]	; (20000278 <ActivateRow+0x4e>)
20000246:	2210      	movs	r2, #16
20000248:	701a      	strb	r2, [r3, #0]
2000024a:	e00f      	b.n	2000026c <ActivateRow+0x42>
    case 2: *GPIO_ODR_HIGH = 0x20; break;
2000024c:	4b0a      	ldr	r3, [pc, #40]	; (20000278 <ActivateRow+0x4e>)
2000024e:	2220      	movs	r2, #32
20000250:	701a      	strb	r2, [r3, #0]
20000252:	e00b      	b.n	2000026c <ActivateRow+0x42>
    case 3: *GPIO_ODR_HIGH = 0x40; break;
20000254:	4b08      	ldr	r3, [pc, #32]	; (20000278 <ActivateRow+0x4e>)
20000256:	2240      	movs	r2, #64	; 0x40
20000258:	701a      	strb	r2, [r3, #0]
2000025a:	e007      	b.n	2000026c <ActivateRow+0x42>
    case 4: *GPIO_ODR_HIGH = 0x80; break;
2000025c:	4b06      	ldr	r3, [pc, #24]	; (20000278 <ActivateRow+0x4e>)
2000025e:	2280      	movs	r2, #128	; 0x80
20000260:	701a      	strb	r2, [r3, #0]
20000262:	e003      	b.n	2000026c <ActivateRow+0x42>
    case 0: *GPIO_ODR_HIGH = 0x00; break;
20000264:	4b04      	ldr	r3, [pc, #16]	; (20000278 <ActivateRow+0x4e>)
20000266:	2200      	movs	r2, #0
20000268:	701a      	strb	r2, [r3, #0]
2000026a:	46c0      	nop			; (mov r8, r8)

    }

}
2000026c:	46c0      	nop			; (mov r8, r8)
2000026e:	46bd      	mov	sp, r7
20000270:	b002      	add	sp, #8
20000272:	bd80      	pop	{r7, pc}
20000274:	20000d88 	andcs	r0, r0, r8, lsl #27
20000278:	40020c15 	andmi	r0, r2, r5, lsl ip

2000027c <ReadColumn>:

int ReadColumn( void )
{
2000027c:	b580      	push	{r7, lr}
2000027e:	b082      	sub	sp, #8
20000280:	af00      	add	r7, sp, #0

    * är nedtryckt, returnera dess kolumnnummer,

    * annars, returnera 0 */
    unsigned char c;
    c = *GPIO_IDR_HIGH;
20000282:	4a12      	ldr	r2, [pc, #72]	; (200002cc <ReadColumn+0x50>)
20000284:	1dfb      	adds	r3, r7, #7
20000286:	7812      	ldrb	r2, [r2, #0]
20000288:	701a      	strb	r2, [r3, #0]
    if ( c & 0x8 )
2000028a:	1dfb      	adds	r3, r7, #7
2000028c:	781b      	ldrb	r3, [r3, #0]
2000028e:	2208      	movs	r2, #8
20000290:	4013      	ands	r3, r2
20000292:	d001      	beq.n	20000298 <ReadColumn+0x1c>
        return 4;
20000294:	2304      	movs	r3, #4
20000296:	e015      	b.n	200002c4 <ReadColumn+0x48>
    if ( c & 0x4 )
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2204      	movs	r2, #4
2000029e:	4013      	ands	r3, r2
200002a0:	d001      	beq.n	200002a6 <ReadColumn+0x2a>
        return 3;
200002a2:	2303      	movs	r3, #3
200002a4:	e00e      	b.n	200002c4 <ReadColumn+0x48>
    if ( c & 0x2 )
200002a6:	1dfb      	adds	r3, r7, #7
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	2202      	movs	r2, #2
200002ac:	4013      	ands	r3, r2
200002ae:	d001      	beq.n	200002b4 <ReadColumn+0x38>
        return 2;
200002b0:	2302      	movs	r3, #2
200002b2:	e007      	b.n	200002c4 <ReadColumn+0x48>
    if ( c & 0x1 )
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	2201      	movs	r2, #1
200002ba:	4013      	ands	r3, r2
200002bc:	d001      	beq.n	200002c2 <ReadColumn+0x46>
        return 1;
200002be:	2301      	movs	r3, #1
200002c0:	e000      	b.n	200002c4 <ReadColumn+0x48>

    return 0;
200002c2:	2300      	movs	r3, #0
}
200002c4:	0018      	movs	r0, r3
200002c6:	46bd      	mov	sp, r7
200002c8:	b002      	add	sp, #8
200002ca:	bd80      	pop	{r7, pc}
200002cc:	40020c11 	andmi	r0, r2, r1, lsl ip

200002d0 <keyb>:

unsigned char keyb(void)
{
200002d0:	b590      	push	{r4, r7, lr}
200002d2:	b087      	sub	sp, #28
200002d4:	af00      	add	r7, sp, #0

    unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200002d6:	003b      	movs	r3, r7
200002d8:	4a16      	ldr	r2, [pc, #88]	; (20000334 <keyb+0x64>)
200002da:	ca13      	ldmia	r2!, {r0, r1, r4}
200002dc:	c313      	stmia	r3!, {r0, r1, r4}
200002de:	6812      	ldr	r2, [r2, #0]
200002e0:	601a      	str	r2, [r3, #0]

    int row, col;
    for(row=1; row <=4 ; row++ )
200002e2:	2301      	movs	r3, #1
200002e4:	617b      	str	r3, [r7, #20]
200002e6:	e019      	b.n	2000031c <keyb+0x4c>
    {
        ActivateRow( row );
200002e8:	697b      	ldr	r3, [r7, #20]
200002ea:	0018      	movs	r0, r3
200002ec:	f7ff ff9d 	bl	2000022a <ActivateRow>
        if( (col = ReadColumn () ) )
200002f0:	f7ff ffc4 	bl	2000027c <ReadColumn>
200002f4:	0003      	movs	r3, r0
200002f6:	613b      	str	r3, [r7, #16]
200002f8:	693b      	ldr	r3, [r7, #16]
200002fa:	2b00      	cmp	r3, #0
200002fc:	d00b      	beq.n	20000316 <keyb+0x46>
        {
            ActivateRow( 0 );
200002fe:	2000      	movs	r0, #0
20000300:	f7ff ff93 	bl	2000022a <ActivateRow>
            return key [4*(row-1)+(col-1) ];
20000304:	697b      	ldr	r3, [r7, #20]
20000306:	3b01      	subs	r3, #1
20000308:	009a      	lsls	r2, r3, #2
2000030a:	693b      	ldr	r3, [r7, #16]
2000030c:	3b01      	subs	r3, #1
2000030e:	18d3      	adds	r3, r2, r3
20000310:	003a      	movs	r2, r7
20000312:	5cd3      	ldrb	r3, [r2, r3]
20000314:	e009      	b.n	2000032a <keyb+0x5a>
    for(row=1; row <=4 ; row++ )
20000316:	697b      	ldr	r3, [r7, #20]
20000318:	3301      	adds	r3, #1
2000031a:	617b      	str	r3, [r7, #20]
2000031c:	697b      	ldr	r3, [r7, #20]
2000031e:	2b04      	cmp	r3, #4
20000320:	dde2      	ble.n	200002e8 <keyb+0x18>
        }
    }
    ActivateRow( 0 );
20000322:	2000      	movs	r0, #0
20000324:	f7ff ff81 	bl	2000022a <ActivateRow>
    return  0xFF;
20000328:	23ff      	movs	r3, #255	; 0xff
}
2000032a:	0018      	movs	r0, r3
2000032c:	46bd      	mov	sp, r7
2000032e:	b007      	add	sp, #28
20000330:	bd90      	pop	{r4, r7, pc}
20000332:	46c0      	nop			; (mov r8, r8)
20000334:	20000d9c 	mulcs	r0, ip, sp

20000338 <ascii_ctrl_bit_set>:

// ------------------------------------------------------- Ascii display ------------------------------------------------------------------------------- //
// B_SELECT is needed here to activate the ascii display
void ascii_ctrl_bit_set(char x)
{
20000338:	b580      	push	{r7, lr}
2000033a:	b084      	sub	sp, #16
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000344:	4a09      	ldr	r2, [pc, #36]	; (2000036c <ascii_ctrl_bit_set+0x34>)
20000346:	210f      	movs	r1, #15
20000348:	187b      	adds	r3, r7, r1
2000034a:	7812      	ldrb	r2, [r2, #0]
2000034c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
2000034e:	1dfa      	adds	r2, r7, #7
20000350:	187b      	adds	r3, r7, r1
20000352:	7812      	ldrb	r2, [r2, #0]
20000354:	781b      	ldrb	r3, [r3, #0]
20000356:	4313      	orrs	r3, r2
20000358:	b2db      	uxtb	r3, r3
2000035a:	4a04      	ldr	r2, [pc, #16]	; (2000036c <ascii_ctrl_bit_set+0x34>)
2000035c:	2104      	movs	r1, #4
2000035e:	430b      	orrs	r3, r1
20000360:	b2db      	uxtb	r3, r3
20000362:	7013      	strb	r3, [r2, #0]
}
20000364:	46c0      	nop			; (mov r8, r8)
20000366:	46bd      	mov	sp, r7
20000368:	b004      	add	sp, #16
2000036a:	bd80      	pop	{r7, pc}
2000036c:	40021014 	andmi	r1, r2, r4, lsl r0

20000370 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x)
{
20000370:	b580      	push	{r7, lr}
20000372:	b084      	sub	sp, #16
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
2000037c:	4a0d      	ldr	r2, [pc, #52]	; (200003b4 <ascii_ctrl_bit_clear+0x44>)
2000037e:	210f      	movs	r1, #15
20000380:	187b      	adds	r3, r7, r1
20000382:	7812      	ldrb	r2, [r2, #0]
20000384:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000386:	1dfb      	adds	r3, r7, #7
20000388:	781b      	ldrb	r3, [r3, #0]
2000038a:	b25b      	sxtb	r3, r3
2000038c:	43db      	mvns	r3, r3
2000038e:	b25b      	sxtb	r3, r3
20000390:	187a      	adds	r2, r7, r1
20000392:	7812      	ldrb	r2, [r2, #0]
20000394:	b252      	sxtb	r2, r2
20000396:	4013      	ands	r3, r2
20000398:	b25a      	sxtb	r2, r3
2000039a:	187b      	adds	r3, r7, r1
2000039c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
2000039e:	4a05      	ldr	r2, [pc, #20]	; (200003b4 <ascii_ctrl_bit_clear+0x44>)
200003a0:	187b      	adds	r3, r7, r1
200003a2:	781b      	ldrb	r3, [r3, #0]
200003a4:	2104      	movs	r1, #4
200003a6:	430b      	orrs	r3, r1
200003a8:	b2db      	uxtb	r3, r3
200003aa:	7013      	strb	r3, [r2, #0]
}
200003ac:	46c0      	nop			; (mov r8, r8)
200003ae:	46bd      	mov	sp, r7
200003b0:	b004      	add	sp, #16
200003b2:	bd80      	pop	{r7, pc}
200003b4:	40021014 	andmi	r1, r2, r4, lsl r0

200003b8 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
200003b8:	b580      	push	{r7, lr}
200003ba:	b082      	sub	sp, #8
200003bc:	af00      	add	r7, sp, #0
200003be:	0002      	movs	r2, r0
200003c0:	1dfb      	adds	r3, r7, #7
200003c2:	701a      	strb	r2, [r3, #0]
	// These delays are need for the processor to execute the respective functions.
	delay_250ns(); // 40ns
200003c4:	f7ff fee2 	bl	2000018c <delay_250ns>
	ascii_ctrl_bit_set(B_E);
200003c8:	2040      	movs	r0, #64	; 0x40
200003ca:	f7ff ffb5 	bl	20000338 <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
200003ce:	4a07      	ldr	r2, [pc, #28]	; (200003ec <ascii_write_controller+0x34>)
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	7013      	strb	r3, [r2, #0]
	delay_250ns(); //230ns
200003d6:	f7ff fed9 	bl	2000018c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ffc8 	bl	20000370 <ascii_ctrl_bit_clear>
	delay_250ns(); // 10ns 
200003e0:	f7ff fed4 	bl	2000018c <delay_250ns>
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b002      	add	sp, #8
200003ea:	bd80      	pop	{r7, pc}
200003ec:	40021015 	andmi	r1, r2, r5, lsl r0

200003f0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
200003f0:	b580      	push	{r7, lr}
200003f2:	b082      	sub	sp, #8
200003f4:	af00      	add	r7, sp, #0
200003f6:	0002      	movs	r2, r0
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200003fc:	2001      	movs	r0, #1
200003fe:	f7ff ffb7 	bl	20000370 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000402:	2002      	movs	r0, #2
20000404:	f7ff ffb4 	bl	20000370 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000408:	1dfb      	adds	r3, r7, #7
2000040a:	781b      	ldrb	r3, [r3, #0]
2000040c:	0018      	movs	r0, r3
2000040e:	f7ff ffd3 	bl	200003b8 <ascii_write_controller>
}
20000412:	46c0      	nop			; (mov r8, r8)
20000414:	46bd      	mov	sp, r7
20000416:	b002      	add	sp, #8
20000418:	bd80      	pop	{r7, pc}

2000041a <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
2000041a:	b580      	push	{r7, lr}
2000041c:	b082      	sub	sp, #8
2000041e:	af00      	add	r7, sp, #0
20000420:	0002      	movs	r2, r0
20000422:	1dfb      	adds	r3, r7, #7
20000424:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000426:	2001      	movs	r0, #1
20000428:	f7ff ff86 	bl	20000338 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000042c:	2002      	movs	r0, #2
2000042e:	f7ff ff9f 	bl	20000370 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000432:	1dfb      	adds	r3, r7, #7
20000434:	781b      	ldrb	r3, [r3, #0]
20000436:	0018      	movs	r0, r3
20000438:	f7ff ffbe 	bl	200003b8 <ascii_write_controller>
}
2000043c:	46c0      	nop			; (mov r8, r8)
2000043e:	46bd      	mov	sp, r7
20000440:	b002      	add	sp, #8
20000442:	bd80      	pop	{r7, pc}

20000444 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
2000044a:	2040      	movs	r0, #64	; 0x40
2000044c:	f7ff ff74 	bl	20000338 <ascii_ctrl_bit_set>
	delay_250ns();
20000450:	f7ff fe9c 	bl	2000018c <delay_250ns>
	delay_250ns(); // 360ns
20000454:	f7ff fe9a 	bl	2000018c <delay_250ns>
	unsigned char rv = *portIdrHigh;
20000458:	4a06      	ldr	r2, [pc, #24]	; (20000474 <ascii_read_controller+0x30>)
2000045a:	1dfb      	adds	r3, r7, #7
2000045c:	7812      	ldrb	r2, [r2, #0]
2000045e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000460:	2040      	movs	r0, #64	; 0x40
20000462:	f7ff ff85 	bl	20000370 <ascii_ctrl_bit_clear>
	return rv;
20000466:	1dfb      	adds	r3, r7, #7
20000468:	781b      	ldrb	r3, [r3, #0]
}
2000046a:	0018      	movs	r0, r3
2000046c:	46bd      	mov	sp, r7
2000046e:	b002      	add	sp, #8
20000470:	bd80      	pop	{r7, pc}
20000472:	46c0      	nop			; (mov r8, r8)
20000474:	40021011 	andmi	r1, r2, r1, lsl r0

20000478 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
20000478:	b590      	push	{r4, r7, lr}
2000047a:	b083      	sub	sp, #12
2000047c:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
2000047e:	4b0b      	ldr	r3, [pc, #44]	; (200004ac <ascii_read_status+0x34>)
20000480:	4a0b      	ldr	r2, [pc, #44]	; (200004b0 <ascii_read_status+0x38>)
20000482:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000484:	2001      	movs	r0, #1
20000486:	f7ff ff73 	bl	20000370 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000048a:	2002      	movs	r0, #2
2000048c:	f7ff ff54 	bl	20000338 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000490:	1dfc      	adds	r4, r7, #7
20000492:	f7ff ffd7 	bl	20000444 <ascii_read_controller>
20000496:	0003      	movs	r3, r0
20000498:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output
2000049a:	4b04      	ldr	r3, [pc, #16]	; (200004ac <ascii_read_status+0x34>)
2000049c:	4a05      	ldr	r2, [pc, #20]	; (200004b4 <ascii_read_status+0x3c>)
2000049e:	601a      	str	r2, [r3, #0]
	return rv;
200004a0:	1dfb      	adds	r3, r7, #7
200004a2:	781b      	ldrb	r3, [r3, #0]
}
200004a4:	0018      	movs	r0, r3
200004a6:	46bd      	mov	sp, r7
200004a8:	b003      	add	sp, #12
200004aa:	bd90      	pop	{r4, r7, pc}
200004ac:	40021000 	andmi	r1, r2, r0
200004b0:	00005555 	andeq	r5, r0, r5, asr r5
200004b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004b8 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200004b8:	b590      	push	{r4, r7, lr}
200004ba:	b083      	sub	sp, #12
200004bc:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
200004be:	4b0b      	ldr	r3, [pc, #44]	; (200004ec <ascii_read_data+0x34>)
200004c0:	4a0b      	ldr	r2, [pc, #44]	; (200004f0 <ascii_read_data+0x38>)
200004c2:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200004c4:	2001      	movs	r0, #1
200004c6:	f7ff ff37 	bl	20000338 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200004ca:	2002      	movs	r0, #2
200004cc:	f7ff ff34 	bl	20000338 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200004d0:	1dfc      	adds	r4, r7, #7
200004d2:	f7ff ffb7 	bl	20000444 <ascii_read_controller>
200004d6:	0003      	movs	r3, r0
200004d8:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output 
200004da:	4b04      	ldr	r3, [pc, #16]	; (200004ec <ascii_read_data+0x34>)
200004dc:	4a05      	ldr	r2, [pc, #20]	; (200004f4 <ascii_read_data+0x3c>)
200004de:	601a      	str	r2, [r3, #0]
	return rv;
200004e0:	1dfb      	adds	r3, r7, #7
200004e2:	781b      	ldrb	r3, [r3, #0]
}
200004e4:	0018      	movs	r0, r3
200004e6:	46bd      	mov	sp, r7
200004e8:	b003      	add	sp, #12
200004ea:	bd90      	pop	{r4, r7, pc}
200004ec:	40021000 	andmi	r1, r2, r0
200004f0:	00005555 	andeq	r5, r0, r5, asr r5
200004f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004f8 <ascii_command>:

void ascii_command(unsigned char command)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b082      	sub	sp, #8
200004fc:	af00      	add	r7, sp, #0
200004fe:	0002      	movs	r2, r0
20000500:	1dfb      	adds	r3, r7, #7
20000502:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000504:	46c0      	nop			; (mov r8, r8)
20000506:	f7ff ffb7 	bl	20000478 <ascii_read_status>
2000050a:	0003      	movs	r3, r0
2000050c:	001a      	movs	r2, r3
2000050e:	2380      	movs	r3, #128	; 0x80
20000510:	4013      	ands	r3, r2
20000512:	2b80      	cmp	r3, #128	; 0x80
20000514:	d0f7      	beq.n	20000506 <ascii_command+0xe>
	{}
	delay_micro(8);
20000516:	2008      	movs	r0, #8
20000518:	f7ff fe5a 	bl	200001d0 <delay_micro>
	ascii_write_cmd(command);
2000051c:	1dfb      	adds	r3, r7, #7
2000051e:	781b      	ldrb	r3, [r3, #0]
20000520:	0018      	movs	r0, r3
20000522:	f7ff ff65 	bl	200003f0 <ascii_write_cmd>
	delay_micro(45);
20000526:	202d      	movs	r0, #45	; 0x2d
20000528:	f7ff fe52 	bl	200001d0 <delay_micro>
}
2000052c:	46c0      	nop			; (mov r8, r8)
2000052e:	46bd      	mov	sp, r7
20000530:	b002      	add	sp, #8
20000532:	bd80      	pop	{r7, pc}

20000534 <ascii_init>:

void ascii_init(void)
{
20000534:	b580      	push	{r7, lr}
20000536:	af00      	add	r7, sp, #0
	ascii_command(0x38); // 2 rows, 5x8 
20000538:	2038      	movs	r0, #56	; 0x38
2000053a:	f7ff ffdd 	bl	200004f8 <ascii_command>
	ascii_command(0x0E); // Activate display, activate cursor and set it as constant 
2000053e:	200e      	movs	r0, #14
20000540:	f7ff ffda 	bl	200004f8 <ascii_command>
	ascii_command(0x01); // Clear Display
20000544:	2001      	movs	r0, #1
20000546:	f7ff ffd7 	bl	200004f8 <ascii_command>
	ascii_command(0x06); // Increment, No shift
2000054a:	2006      	movs	r0, #6
2000054c:	f7ff ffd4 	bl	200004f8 <ascii_command>
}
20000550:	46c0      	nop			; (mov r8, r8)
20000552:	46bd      	mov	sp, r7
20000554:	bd80      	pop	{r7, pc}

20000556 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000556:	b580      	push	{r7, lr}
20000558:	b082      	sub	sp, #8
2000055a:	af00      	add	r7, sp, #0
2000055c:	0002      	movs	r2, r0
2000055e:	1dfb      	adds	r3, r7, #7
20000560:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000562:	46c0      	nop			; (mov r8, r8)
20000564:	f7ff ff88 	bl	20000478 <ascii_read_status>
20000568:	0003      	movs	r3, r0
2000056a:	001a      	movs	r2, r3
2000056c:	2380      	movs	r3, #128	; 0x80
2000056e:	4013      	ands	r3, r2
20000570:	2b80      	cmp	r3, #128	; 0x80
20000572:	d0f7      	beq.n	20000564 <ascii_write_char+0xe>
	{}
	delay_micro(8);
20000574:	2008      	movs	r0, #8
20000576:	f7ff fe2b 	bl	200001d0 <delay_micro>
	ascii_write_data(c);
2000057a:	1dfb      	adds	r3, r7, #7
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	0018      	movs	r0, r3
20000580:	f7ff ff4b 	bl	2000041a <ascii_write_data>
	delay_micro(45);
20000584:	202d      	movs	r0, #45	; 0x2d
20000586:	f7ff fe23 	bl	200001d0 <delay_micro>
}
2000058a:	46c0      	nop			; (mov r8, r8)
2000058c:	46bd      	mov	sp, r7
2000058e:	b002      	add	sp, #8
20000590:	bd80      	pop	{r7, pc}

20000592 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
20000592:	b580      	push	{r7, lr}
20000594:	b084      	sub	sp, #16
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
2000059a:	6039      	str	r1, [r7, #0]
	unsigned char adress = x - 1;
2000059c:	687b      	ldr	r3, [r7, #4]
2000059e:	b2da      	uxtb	r2, r3
200005a0:	210f      	movs	r1, #15
200005a2:	187b      	adds	r3, r7, r1
200005a4:	3a01      	subs	r2, #1
200005a6:	701a      	strb	r2, [r3, #0]
	if ( y == 2 )
200005a8:	683b      	ldr	r3, [r7, #0]
200005aa:	2b02      	cmp	r3, #2
200005ac:	d104      	bne.n	200005b8 <ascii_gotoxy+0x26>
	{
		adress = adress + 0x40;
200005ae:	187b      	adds	r3, r7, r1
200005b0:	187a      	adds	r2, r7, r1
200005b2:	7812      	ldrb	r2, [r2, #0]
200005b4:	3240      	adds	r2, #64	; 0x40
200005b6:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | adress);
200005b8:	230f      	movs	r3, #15
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	781b      	ldrb	r3, [r3, #0]
200005be:	2280      	movs	r2, #128	; 0x80
200005c0:	4252      	negs	r2, r2
200005c2:	4313      	orrs	r3, r2
200005c4:	b2db      	uxtb	r3, r3
200005c6:	0018      	movs	r0, r3
200005c8:	f7ff ff12 	bl	200003f0 <ascii_write_cmd>
}
200005cc:	46c0      	nop			; (mov r8, r8)
200005ce:	46bd      	mov	sp, r7
200005d0:	b004      	add	sp, #16
200005d2:	bd80      	pop	{r7, pc}

200005d4 <swap>:

// ------------------------------------------------------- LCD MODULE ------------------------------------------------------------------------------- //
void swap(unsigned char *a, unsigned char *b)
{
200005d4:	b580      	push	{r7, lr}
200005d6:	b084      	sub	sp, #16
200005d8:	af00      	add	r7, sp, #0
200005da:	6078      	str	r0, [r7, #4]
200005dc:	6039      	str	r1, [r7, #0]
	unsigned char temp = *a;
200005de:	210f      	movs	r1, #15
200005e0:	187b      	adds	r3, r7, r1
200005e2:	687a      	ldr	r2, [r7, #4]
200005e4:	7812      	ldrb	r2, [r2, #0]
200005e6:	701a      	strb	r2, [r3, #0]
	*a = *b;
200005e8:	683b      	ldr	r3, [r7, #0]
200005ea:	781a      	ldrb	r2, [r3, #0]
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	701a      	strb	r2, [r3, #0]
	*b = temp;
200005f0:	683b      	ldr	r3, [r7, #0]
200005f2:	187a      	adds	r2, r7, r1
200005f4:	7812      	ldrb	r2, [r2, #0]
200005f6:	701a      	strb	r2, [r3, #0]
}
200005f8:	46c0      	nop			; (mov r8, r8)
200005fa:	46bd      	mov	sp, r7
200005fc:	b004      	add	sp, #16
200005fe:	bd80      	pop	{r7, pc}

20000600 <draw_line>:

int draw_line(PLINE l)
{
20000600:	b590      	push	{r4, r7, lr}
20000602:	b087      	sub	sp, #28
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
	// This just checks so that there are no points outside of the display which is 128x64 
	if ((l->p0.x < 1 && l->p0.x > 64) | (l->p1.x < 1 && l->p1.x > 64) | (l->p0.y < 1 && l->p0.y > 128) | (l->p1.y < 1 && l->p1.y > 128))
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	781b      	ldrb	r3, [r3, #0]
2000060c:	2b00      	cmp	r3, #0
2000060e:	d105      	bne.n	2000061c <draw_line+0x1c>
20000610:	687b      	ldr	r3, [r7, #4]
20000612:	781b      	ldrb	r3, [r3, #0]
20000614:	2b40      	cmp	r3, #64	; 0x40
20000616:	d901      	bls.n	2000061c <draw_line+0x1c>
20000618:	2301      	movs	r3, #1
2000061a:	e000      	b.n	2000061e <draw_line+0x1e>
2000061c:	2300      	movs	r3, #0
2000061e:	1c1a      	adds	r2, r3, #0
20000620:	2301      	movs	r3, #1
20000622:	4013      	ands	r3, r2
20000624:	b2da      	uxtb	r2, r3
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	789b      	ldrb	r3, [r3, #2]
2000062a:	2b00      	cmp	r3, #0
2000062c:	d105      	bne.n	2000063a <draw_line+0x3a>
2000062e:	687b      	ldr	r3, [r7, #4]
20000630:	789b      	ldrb	r3, [r3, #2]
20000632:	2b40      	cmp	r3, #64	; 0x40
20000634:	d901      	bls.n	2000063a <draw_line+0x3a>
20000636:	2301      	movs	r3, #1
20000638:	e000      	b.n	2000063c <draw_line+0x3c>
2000063a:	2300      	movs	r3, #0
2000063c:	1c19      	adds	r1, r3, #0
2000063e:	2301      	movs	r3, #1
20000640:	400b      	ands	r3, r1
20000642:	b2db      	uxtb	r3, r3
20000644:	4313      	orrs	r3, r2
20000646:	b2db      	uxtb	r3, r3
20000648:	001a      	movs	r2, r3
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	785b      	ldrb	r3, [r3, #1]
2000064e:	2b00      	cmp	r3, #0
20000650:	d105      	bne.n	2000065e <draw_line+0x5e>
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	785b      	ldrb	r3, [r3, #1]
20000656:	2b80      	cmp	r3, #128	; 0x80
20000658:	d901      	bls.n	2000065e <draw_line+0x5e>
2000065a:	2301      	movs	r3, #1
2000065c:	e000      	b.n	20000660 <draw_line+0x60>
2000065e:	2300      	movs	r3, #0
20000660:	431a      	orrs	r2, r3
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	78db      	ldrb	r3, [r3, #3]
20000666:	2b00      	cmp	r3, #0
20000668:	d105      	bne.n	20000676 <draw_line+0x76>
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	78db      	ldrb	r3, [r3, #3]
2000066e:	2b80      	cmp	r3, #128	; 0x80
20000670:	d901      	bls.n	20000676 <draw_line+0x76>
20000672:	2301      	movs	r3, #1
20000674:	e000      	b.n	20000678 <draw_line+0x78>
20000676:	2300      	movs	r3, #0
20000678:	4313      	orrs	r3, r2
2000067a:	d001      	beq.n	20000680 <draw_line+0x80>
		return 0;
2000067c:	2300      	movs	r3, #0
2000067e:	e0b6      	b.n	200007ee <draw_line+0x1ee>
	
	// Bresenhams Algorithm - honestly no idea how it works 
	char steep;
	if (abs(l->p0.y - l->p1.y) > abs(l->p0.x - l->p1.x))
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	785b      	ldrb	r3, [r3, #1]
20000684:	001a      	movs	r2, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	78db      	ldrb	r3, [r3, #3]
2000068a:	1ad3      	subs	r3, r2, r3
2000068c:	17d9      	asrs	r1, r3, #31
2000068e:	185a      	adds	r2, r3, r1
20000690:	404a      	eors	r2, r1
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	0019      	movs	r1, r3
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	789b      	ldrb	r3, [r3, #2]
2000069c:	1acb      	subs	r3, r1, r3
2000069e:	17d9      	asrs	r1, r3, #31
200006a0:	185b      	adds	r3, r3, r1
200006a2:	404b      	eors	r3, r1
200006a4:	429a      	cmp	r2, r3
200006a6:	dd04      	ble.n	200006b2 <draw_line+0xb2>
		steep = 1;
200006a8:	2317      	movs	r3, #23
200006aa:	18fb      	adds	r3, r7, r3
200006ac:	2201      	movs	r2, #1
200006ae:	701a      	strb	r2, [r3, #0]
200006b0:	e003      	b.n	200006ba <draw_line+0xba>
	else
		steep = 0;
200006b2:	2317      	movs	r3, #23
200006b4:	18fb      	adds	r3, r7, r3
200006b6:	2200      	movs	r2, #0
200006b8:	701a      	strb	r2, [r3, #0]
	if (steep)
200006ba:	2317      	movs	r3, #23
200006bc:	18fb      	adds	r3, r7, r3
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	2b00      	cmp	r3, #0
200006c2:	d00e      	beq.n	200006e2 <draw_line+0xe2>
	{
		swap(&l->p0.x, &l->p0.y);
200006c4:	687a      	ldr	r2, [r7, #4]
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	3301      	adds	r3, #1
200006ca:	0019      	movs	r1, r3
200006cc:	0010      	movs	r0, r2
200006ce:	f7ff ff81 	bl	200005d4 <swap>
		swap(&l->p1.x, &l->p1.y);
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	1c9a      	adds	r2, r3, #2
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	3303      	adds	r3, #3
200006da:	0019      	movs	r1, r3
200006dc:	0010      	movs	r0, r2
200006de:	f7ff ff79 	bl	200005d4 <swap>
	}
	if (l->p0.x > l->p1.x)
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	781a      	ldrb	r2, [r3, #0]
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	789b      	ldrb	r3, [r3, #2]
200006ea:	429a      	cmp	r2, r3
200006ec:	d90e      	bls.n	2000070c <draw_line+0x10c>
	{
		swap(&l->p0.x, &l->p1.x);
200006ee:	687a      	ldr	r2, [r7, #4]
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	3302      	adds	r3, #2
200006f4:	0019      	movs	r1, r3
200006f6:	0010      	movs	r0, r2
200006f8:	f7ff ff6c 	bl	200005d4 <swap>
		swap(&l->p0.y, &l->p1.y);
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	1c5a      	adds	r2, r3, #1
20000700:	687b      	ldr	r3, [r7, #4]
20000702:	3303      	adds	r3, #3
20000704:	0019      	movs	r1, r3
20000706:	0010      	movs	r0, r2
20000708:	f7ff ff64 	bl	200005d4 <swap>
	}
	char deltax = l->p1.x - l->p0.x;
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	7899      	ldrb	r1, [r3, #2]
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	781a      	ldrb	r2, [r3, #0]
20000714:	230f      	movs	r3, #15
20000716:	18fb      	adds	r3, r7, r3
20000718:	1a8a      	subs	r2, r1, r2
2000071a:	701a      	strb	r2, [r3, #0]
	char deltay = abs(l->p1.y - l->p0.y);
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	78db      	ldrb	r3, [r3, #3]
20000720:	001a      	movs	r2, r3
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	785b      	ldrb	r3, [r3, #1]
20000726:	1ad3      	subs	r3, r2, r3
20000728:	17d9      	asrs	r1, r3, #31
2000072a:	185a      	adds	r2, r3, r1
2000072c:	404a      	eors	r2, r1
2000072e:	230e      	movs	r3, #14
20000730:	18fb      	adds	r3, r7, r3
20000732:	701a      	strb	r2, [r3, #0]
	char error = 0;
20000734:	2316      	movs	r3, #22
20000736:	18fb      	adds	r3, r7, r3
20000738:	2200      	movs	r2, #0
2000073a:	701a      	strb	r2, [r3, #0]
	char y = l->p0.y;
2000073c:	2315      	movs	r3, #21
2000073e:	18fb      	adds	r3, r7, r3
20000740:	687a      	ldr	r2, [r7, #4]
20000742:	7852      	ldrb	r2, [r2, #1]
20000744:	701a      	strb	r2, [r3, #0]
	char ystep;
	if (l->p0.y < l->p1.y)
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	785a      	ldrb	r2, [r3, #1]
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	78db      	ldrb	r3, [r3, #3]
2000074e:	429a      	cmp	r2, r3
20000750:	d204      	bcs.n	2000075c <draw_line+0x15c>
		ystep = 1;
20000752:	2314      	movs	r3, #20
20000754:	18fb      	adds	r3, r7, r3
20000756:	2201      	movs	r2, #1
20000758:	701a      	strb	r2, [r3, #0]
2000075a:	e003      	b.n	20000764 <draw_line+0x164>
	else
		ystep = -1;
2000075c:	2314      	movs	r3, #20
2000075e:	18fb      	adds	r3, r7, r3
20000760:	22ff      	movs	r2, #255	; 0xff
20000762:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	613b      	str	r3, [r7, #16]
2000076a:	e039      	b.n	200007e0 <draw_line+0x1e0>
	{
		if (steep)
2000076c:	2317      	movs	r3, #23
2000076e:	18fb      	adds	r3, r7, r3
20000770:	781b      	ldrb	r3, [r3, #0]
20000772:	2b00      	cmp	r3, #0
20000774:	d008      	beq.n	20000788 <draw_line+0x188>
			graphic_pixel_set(y, x);
20000776:	2315      	movs	r3, #21
20000778:	18fb      	adds	r3, r7, r3
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	693a      	ldr	r2, [r7, #16]
2000077e:	0011      	movs	r1, r2
20000780:	0018      	movs	r0, r3
20000782:	f000 fa8f 	bl	20000ca4 <graphic_pixel_set>
20000786:	e007      	b.n	20000798 <draw_line+0x198>
		else
			graphic_pixel_set(x, y);
20000788:	2315      	movs	r3, #21
2000078a:	18fb      	adds	r3, r7, r3
2000078c:	781a      	ldrb	r2, [r3, #0]
2000078e:	693b      	ldr	r3, [r7, #16]
20000790:	0011      	movs	r1, r2
20000792:	0018      	movs	r0, r3
20000794:	f000 fa86 	bl	20000ca4 <graphic_pixel_set>
		error = error + deltay;
20000798:	2016      	movs	r0, #22
2000079a:	183b      	adds	r3, r7, r0
2000079c:	1839      	adds	r1, r7, r0
2000079e:	220e      	movs	r2, #14
200007a0:	18ba      	adds	r2, r7, r2
200007a2:	7809      	ldrb	r1, [r1, #0]
200007a4:	7812      	ldrb	r2, [r2, #0]
200007a6:	188a      	adds	r2, r1, r2
200007a8:	701a      	strb	r2, [r3, #0]
		if (2 * error >= deltax)
200007aa:	183b      	adds	r3, r7, r0
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	005a      	lsls	r2, r3, #1
200007b0:	240f      	movs	r4, #15
200007b2:	193b      	adds	r3, r7, r4
200007b4:	781b      	ldrb	r3, [r3, #0]
200007b6:	429a      	cmp	r2, r3
200007b8:	db0f      	blt.n	200007da <draw_line+0x1da>
		{
			y = y +ystep;
200007ba:	2215      	movs	r2, #21
200007bc:	18bb      	adds	r3, r7, r2
200007be:	18b9      	adds	r1, r7, r2
200007c0:	2214      	movs	r2, #20
200007c2:	18ba      	adds	r2, r7, r2
200007c4:	7809      	ldrb	r1, [r1, #0]
200007c6:	7812      	ldrb	r2, [r2, #0]
200007c8:	188a      	adds	r2, r1, r2
200007ca:	701a      	strb	r2, [r3, #0]
			error = error - deltax;
200007cc:	183b      	adds	r3, r7, r0
200007ce:	1839      	adds	r1, r7, r0
200007d0:	193a      	adds	r2, r7, r4
200007d2:	7809      	ldrb	r1, [r1, #0]
200007d4:	7812      	ldrb	r2, [r2, #0]
200007d6:	1a8a      	subs	r2, r1, r2
200007d8:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
200007da:	693b      	ldr	r3, [r7, #16]
200007dc:	3301      	adds	r3, #1
200007de:	613b      	str	r3, [r7, #16]
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	789b      	ldrb	r3, [r3, #2]
200007e4:	001a      	movs	r2, r3
200007e6:	693b      	ldr	r3, [r7, #16]
200007e8:	4293      	cmp	r3, r2
200007ea:	ddbf      	ble.n	2000076c <draw_line+0x16c>
		}
	}

	// Returns 1 if it succeded
	return 1;
200007ec:	2301      	movs	r3, #1
}
200007ee:	0018      	movs	r0, r3
200007f0:	46bd      	mov	sp, r7
200007f2:	b007      	add	sp, #28
200007f4:	bd90      	pop	{r4, r7, pc}

200007f6 <draw_rectangle>:

void draw_rectangle(PRECT r)
{
200007f6:	b5f0      	push	{r4, r5, r6, r7, lr}
200007f8:	b087      	sub	sp, #28
200007fa:	af00      	add	r7, sp, #0
200007fc:	6078      	str	r0, [r7, #4]
	POINT start;
	POINT end;
	LINE side;
	// Honestly would never write code like this but in the book it looked like this. 
	start.x = r->p.x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	781a      	ldrb	r2, [r3, #0]
20000802:	2114      	movs	r1, #20
20000804:	187b      	adds	r3, r7, r1
20000806:	701a      	strb	r2, [r3, #0]
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	785a      	ldrb	r2, [r3, #1]
2000080c:	187b      	adds	r3, r7, r1
2000080e:	705a      	strb	r2, [r3, #1]
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	781a      	ldrb	r2, [r3, #0]
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	789b      	ldrb	r3, [r3, #2]
20000818:	18d3      	adds	r3, r2, r3
2000081a:	b2da      	uxtb	r2, r3
2000081c:	2510      	movs	r5, #16
2000081e:	197b      	adds	r3, r7, r5
20000820:	701a      	strb	r2, [r3, #0]
20000822:	687b      	ldr	r3, [r7, #4]
20000824:	785a      	ldrb	r2, [r3, #1]
20000826:	197b      	adds	r3, r7, r5
20000828:	705a      	strb	r2, [r3, #1]
2000082a:	260c      	movs	r6, #12
2000082c:	19bb      	adds	r3, r7, r6
2000082e:	000c      	movs	r4, r1
20000830:	187a      	adds	r2, r7, r1
20000832:	8812      	ldrh	r2, [r2, #0]
20000834:	801a      	strh	r2, [r3, #0]
20000836:	19bb      	adds	r3, r7, r6
20000838:	2102      	movs	r1, #2
2000083a:	197a      	adds	r2, r7, r5
2000083c:	8812      	ldrh	r2, [r2, #0]
2000083e:	525a      	strh	r2, [r3, r1]
20000840:	19bb      	adds	r3, r7, r6
20000842:	0018      	movs	r0, r3
20000844:	f7ff fedc 	bl	20000600 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	781a      	ldrb	r2, [r3, #0]
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	789b      	ldrb	r3, [r3, #2]
20000850:	18d3      	adds	r3, r2, r3
20000852:	b2da      	uxtb	r2, r3
20000854:	0021      	movs	r1, r4
20000856:	187b      	adds	r3, r7, r1
20000858:	701a      	strb	r2, [r3, #0]
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	785a      	ldrb	r2, [r3, #1]
2000085e:	187b      	adds	r3, r7, r1
20000860:	705a      	strb	r2, [r3, #1]
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	781a      	ldrb	r2, [r3, #0]
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	789b      	ldrb	r3, [r3, #2]
2000086a:	18d3      	adds	r3, r2, r3
2000086c:	b2da      	uxtb	r2, r3
2000086e:	197b      	adds	r3, r7, r5
20000870:	701a      	strb	r2, [r3, #0]
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	785a      	ldrb	r2, [r3, #1]
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	78db      	ldrb	r3, [r3, #3]
2000087a:	18d3      	adds	r3, r2, r3
2000087c:	b2da      	uxtb	r2, r3
2000087e:	197b      	adds	r3, r7, r5
20000880:	705a      	strb	r2, [r3, #1]
20000882:	19bb      	adds	r3, r7, r6
20000884:	000c      	movs	r4, r1
20000886:	187a      	adds	r2, r7, r1
20000888:	8812      	ldrh	r2, [r2, #0]
2000088a:	801a      	strh	r2, [r3, #0]
2000088c:	19bb      	adds	r3, r7, r6
2000088e:	2102      	movs	r1, #2
20000890:	197a      	adds	r2, r7, r5
20000892:	8812      	ldrh	r2, [r2, #0]
20000894:	525a      	strh	r2, [r3, r1]
20000896:	19bb      	adds	r3, r7, r6
20000898:	0018      	movs	r0, r3
2000089a:	f7ff feb1 	bl	20000600 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	781a      	ldrb	r2, [r3, #0]
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	789b      	ldrb	r3, [r3, #2]
200008a6:	18d3      	adds	r3, r2, r3
200008a8:	b2da      	uxtb	r2, r3
200008aa:	0021      	movs	r1, r4
200008ac:	187b      	adds	r3, r7, r1
200008ae:	701a      	strb	r2, [r3, #0]
200008b0:	687b      	ldr	r3, [r7, #4]
200008b2:	785a      	ldrb	r2, [r3, #1]
200008b4:	687b      	ldr	r3, [r7, #4]
200008b6:	78db      	ldrb	r3, [r3, #3]
200008b8:	18d3      	adds	r3, r2, r3
200008ba:	b2da      	uxtb	r2, r3
200008bc:	187b      	adds	r3, r7, r1
200008be:	705a      	strb	r2, [r3, #1]
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	781a      	ldrb	r2, [r3, #0]
200008c4:	197b      	adds	r3, r7, r5
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	785a      	ldrb	r2, [r3, #1]
200008cc:	687b      	ldr	r3, [r7, #4]
200008ce:	78db      	ldrb	r3, [r3, #3]
200008d0:	18d3      	adds	r3, r2, r3
200008d2:	b2da      	uxtb	r2, r3
200008d4:	197b      	adds	r3, r7, r5
200008d6:	705a      	strb	r2, [r3, #1]
200008d8:	19bb      	adds	r3, r7, r6
200008da:	000c      	movs	r4, r1
200008dc:	187a      	adds	r2, r7, r1
200008de:	8812      	ldrh	r2, [r2, #0]
200008e0:	801a      	strh	r2, [r3, #0]
200008e2:	19bb      	adds	r3, r7, r6
200008e4:	2102      	movs	r1, #2
200008e6:	197a      	adds	r2, r7, r5
200008e8:	8812      	ldrh	r2, [r2, #0]
200008ea:	525a      	strh	r2, [r3, r1]
200008ec:	19bb      	adds	r3, r7, r6
200008ee:	0018      	movs	r0, r3
200008f0:	f7ff fe86 	bl	20000600 <draw_line>
	start.x = r->p.x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
200008f4:	687b      	ldr	r3, [r7, #4]
200008f6:	781a      	ldrb	r2, [r3, #0]
200008f8:	0021      	movs	r1, r4
200008fa:	187b      	adds	r3, r7, r1
200008fc:	701a      	strb	r2, [r3, #0]
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	785a      	ldrb	r2, [r3, #1]
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	78db      	ldrb	r3, [r3, #3]
20000906:	18d3      	adds	r3, r2, r3
20000908:	b2da      	uxtb	r2, r3
2000090a:	187b      	adds	r3, r7, r1
2000090c:	705a      	strb	r2, [r3, #1]
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	781a      	ldrb	r2, [r3, #0]
20000912:	197b      	adds	r3, r7, r5
20000914:	701a      	strb	r2, [r3, #0]
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	785a      	ldrb	r2, [r3, #1]
2000091a:	197b      	adds	r3, r7, r5
2000091c:	705a      	strb	r2, [r3, #1]
2000091e:	19bb      	adds	r3, r7, r6
20000920:	187a      	adds	r2, r7, r1
20000922:	8812      	ldrh	r2, [r2, #0]
20000924:	801a      	strh	r2, [r3, #0]
20000926:	19bb      	adds	r3, r7, r6
20000928:	2102      	movs	r1, #2
2000092a:	197a      	adds	r2, r7, r5
2000092c:	8812      	ldrh	r2, [r2, #0]
2000092e:	525a      	strh	r2, [r3, r1]
20000930:	19bb      	adds	r3, r7, r6
20000932:	0018      	movs	r0, r3
20000934:	f7ff fe64 	bl	20000600 <draw_line>
}
20000938:	46c0      	nop			; (mov r8, r8)
2000093a:	46bd      	mov	sp, r7
2000093c:	b007      	add	sp, #28
2000093e:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000940 <draw_polygon>:

void draw_polygon(PPOLYPOINT polygon)
{
20000940:	b5b0      	push	{r4, r5, r7, lr}
20000942:	b088      	sub	sp, #32
20000944:	af00      	add	r7, sp, #0
20000946:	6078      	str	r0, [r7, #4]
	POLYPOINT p0;
	p0.x = polygon->x;
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	781a      	ldrb	r2, [r3, #0]
2000094c:	2114      	movs	r1, #20
2000094e:	187b      	adds	r3, r7, r1
20000950:	701a      	strb	r2, [r3, #0]
	p0.y = polygon->y;
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	785a      	ldrb	r2, [r3, #1]
20000956:	187b      	adds	r3, r7, r1
20000958:	705a      	strb	r2, [r3, #1]
	PPOLYPOINT ptr = polygon->next;
2000095a:	687b      	ldr	r3, [r7, #4]
2000095c:	685b      	ldr	r3, [r3, #4]
2000095e:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
20000960:	e02a      	b.n	200009b8 <draw_polygon+0x78>
	{
		POLYPOINT p1;
		p1.x = ptr->x;
20000962:	69fb      	ldr	r3, [r7, #28]
20000964:	781a      	ldrb	r2, [r3, #0]
20000966:	210c      	movs	r1, #12
20000968:	187b      	adds	r3, r7, r1
2000096a:	701a      	strb	r2, [r3, #0]
		p1.y = ptr->y;
2000096c:	69fb      	ldr	r3, [r7, #28]
2000096e:	785a      	ldrb	r2, [r3, #1]
20000970:	187b      	adds	r3, r7, r1
20000972:	705a      	strb	r2, [r3, #1]
		LINE side = {{p0.x, p0.y}, {p1.x, p1.y}};
20000974:	2514      	movs	r5, #20
20000976:	197b      	adds	r3, r7, r5
20000978:	781a      	ldrb	r2, [r3, #0]
2000097a:	2008      	movs	r0, #8
2000097c:	183b      	adds	r3, r7, r0
2000097e:	701a      	strb	r2, [r3, #0]
20000980:	197b      	adds	r3, r7, r5
20000982:	785a      	ldrb	r2, [r3, #1]
20000984:	183b      	adds	r3, r7, r0
20000986:	705a      	strb	r2, [r3, #1]
20000988:	187b      	adds	r3, r7, r1
2000098a:	781a      	ldrb	r2, [r3, #0]
2000098c:	183b      	adds	r3, r7, r0
2000098e:	709a      	strb	r2, [r3, #2]
20000990:	000c      	movs	r4, r1
20000992:	187b      	adds	r3, r7, r1
20000994:	785a      	ldrb	r2, [r3, #1]
20000996:	183b      	adds	r3, r7, r0
20000998:	70da      	strb	r2, [r3, #3]
		draw_line(&side);
2000099a:	183b      	adds	r3, r7, r0
2000099c:	0018      	movs	r0, r3
2000099e:	f7ff fe2f 	bl	20000600 <draw_line>
		p0.x = p1.x; p0.y = p1.y;
200009a2:	193b      	adds	r3, r7, r4
200009a4:	781a      	ldrb	r2, [r3, #0]
200009a6:	197b      	adds	r3, r7, r5
200009a8:	701a      	strb	r2, [r3, #0]
200009aa:	193b      	adds	r3, r7, r4
200009ac:	785a      	ldrb	r2, [r3, #1]
200009ae:	197b      	adds	r3, r7, r5
200009b0:	705a      	strb	r2, [r3, #1]
		ptr = ptr->next;
200009b2:	69fb      	ldr	r3, [r7, #28]
200009b4:	685b      	ldr	r3, [r3, #4]
200009b6:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
200009b8:	69fb      	ldr	r3, [r7, #28]
200009ba:	2b00      	cmp	r3, #0
200009bc:	d1d1      	bne.n	20000962 <draw_polygon+0x22>
	}
}
200009be:	46c0      	nop			; (mov r8, r8)
200009c0:	46c0      	nop			; (mov r8, r8)
200009c2:	46bd      	mov	sp, r7
200009c4:	b008      	add	sp, #32
200009c6:	bdb0      	pop	{r4, r5, r7, pc}

200009c8 <draw_ballobject>:

// ------------------------------------------------------- Objects ------------------------------------------------------------------------------- //
void draw_ballobject(POBJECT o)
{
200009c8:	b580      	push	{r7, lr}
200009ca:	b086      	sub	sp, #24
200009cc:	af00      	add	r7, sp, #0
200009ce:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	681b      	ldr	r3, [r3, #0]
200009d4:	681b      	ldr	r3, [r3, #0]
200009d6:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < pixels; i++)
200009d8:	2300      	movs	r3, #0
200009da:	617b      	str	r3, [r7, #20]
200009dc:	e033      	b.n	20000a46 <draw_ballobject+0x7e>
	{
		// (o->geo->px+i) gets the position of one of the pixels and then the period after gets x/y value of that point
		int testx = o->posx + (o->geo->px+i)->x;
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	68da      	ldr	r2, [r3, #12]
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	681b      	ldr	r3, [r3, #0]
200009e6:	330c      	adds	r3, #12
200009e8:	0019      	movs	r1, r3
200009ea:	697b      	ldr	r3, [r7, #20]
200009ec:	005b      	lsls	r3, r3, #1
200009ee:	18cb      	adds	r3, r1, r3
200009f0:	781b      	ldrb	r3, [r3, #0]
200009f2:	18d3      	adds	r3, r2, r3
200009f4:	60fb      	str	r3, [r7, #12]
		int testy = o->posy + (o->geo->px+i)->y;
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	691a      	ldr	r2, [r3, #16]
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	681b      	ldr	r3, [r3, #0]
200009fe:	330c      	adds	r3, #12
20000a00:	0019      	movs	r1, r3
20000a02:	697b      	ldr	r3, [r7, #20]
20000a04:	005b      	lsls	r3, r3, #1
20000a06:	18cb      	adds	r3, r1, r3
20000a08:	785b      	ldrb	r3, [r3, #1]
20000a0a:	18d3      	adds	r3, r2, r3
20000a0c:	60bb      	str	r3, [r7, #8]
		graphic_pixel_set(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000a0e:	687b      	ldr	r3, [r7, #4]
20000a10:	68da      	ldr	r2, [r3, #12]
20000a12:	687b      	ldr	r3, [r7, #4]
20000a14:	681b      	ldr	r3, [r3, #0]
20000a16:	330c      	adds	r3, #12
20000a18:	0019      	movs	r1, r3
20000a1a:	697b      	ldr	r3, [r7, #20]
20000a1c:	005b      	lsls	r3, r3, #1
20000a1e:	18cb      	adds	r3, r1, r3
20000a20:	781b      	ldrb	r3, [r3, #0]
20000a22:	18d0      	adds	r0, r2, r3
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	691a      	ldr	r2, [r3, #16]
20000a28:	687b      	ldr	r3, [r7, #4]
20000a2a:	681b      	ldr	r3, [r3, #0]
20000a2c:	330c      	adds	r3, #12
20000a2e:	0019      	movs	r1, r3
20000a30:	697b      	ldr	r3, [r7, #20]
20000a32:	005b      	lsls	r3, r3, #1
20000a34:	18cb      	adds	r3, r1, r3
20000a36:	785b      	ldrb	r3, [r3, #1]
20000a38:	18d3      	adds	r3, r2, r3
20000a3a:	0019      	movs	r1, r3
20000a3c:	f000 f932 	bl	20000ca4 <graphic_pixel_set>
	for (int i = 0; i < pixels; i++)
20000a40:	697b      	ldr	r3, [r7, #20]
20000a42:	3301      	adds	r3, #1
20000a44:	617b      	str	r3, [r7, #20]
20000a46:	697a      	ldr	r2, [r7, #20]
20000a48:	693b      	ldr	r3, [r7, #16]
20000a4a:	429a      	cmp	r2, r3
20000a4c:	dbc7      	blt.n	200009de <draw_ballobject+0x16>
	}

}
20000a4e:	46c0      	nop			; (mov r8, r8)
20000a50:	46c0      	nop			; (mov r8, r8)
20000a52:	46bd      	mov	sp, r7
20000a54:	b006      	add	sp, #24
20000a56:	bd80      	pop	{r7, pc}

20000a58 <clear_ballobject>:

void clear_ballobject(POBJECT o)
{
20000a58:	b580      	push	{r7, lr}
20000a5a:	b084      	sub	sp, #16
20000a5c:	af00      	add	r7, sp, #0
20000a5e:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	681b      	ldr	r3, [r3, #0]
20000a64:	681b      	ldr	r3, [r3, #0]
20000a66:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pixels; i++)
20000a68:	2300      	movs	r3, #0
20000a6a:	60fb      	str	r3, [r7, #12]
20000a6c:	e01b      	b.n	20000aa6 <clear_ballobject+0x4e>
	{
		graphic_pixel_clear(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	68da      	ldr	r2, [r3, #12]
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	681b      	ldr	r3, [r3, #0]
20000a76:	330c      	adds	r3, #12
20000a78:	0019      	movs	r1, r3
20000a7a:	68fb      	ldr	r3, [r7, #12]
20000a7c:	005b      	lsls	r3, r3, #1
20000a7e:	18cb      	adds	r3, r1, r3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	18d0      	adds	r0, r2, r3
20000a84:	687b      	ldr	r3, [r7, #4]
20000a86:	691a      	ldr	r2, [r3, #16]
20000a88:	687b      	ldr	r3, [r7, #4]
20000a8a:	681b      	ldr	r3, [r3, #0]
20000a8c:	330c      	adds	r3, #12
20000a8e:	0019      	movs	r1, r3
20000a90:	68fb      	ldr	r3, [r7, #12]
20000a92:	005b      	lsls	r3, r3, #1
20000a94:	18cb      	adds	r3, r1, r3
20000a96:	785b      	ldrb	r3, [r3, #1]
20000a98:	18d3      	adds	r3, r2, r3
20000a9a:	0019      	movs	r1, r3
20000a9c:	f000 f905 	bl	20000caa <graphic_pixel_clear>
	for (int i = 0; i < pixels; i++)
20000aa0:	68fb      	ldr	r3, [r7, #12]
20000aa2:	3301      	adds	r3, #1
20000aa4:	60fb      	str	r3, [r7, #12]
20000aa6:	68fa      	ldr	r2, [r7, #12]
20000aa8:	68bb      	ldr	r3, [r7, #8]
20000aaa:	429a      	cmp	r2, r3
20000aac:	dbdf      	blt.n	20000a6e <clear_ballobject+0x16>
	}

}
20000aae:	46c0      	nop			; (mov r8, r8)
20000ab0:	46c0      	nop			; (mov r8, r8)
20000ab2:	46bd      	mov	sp, r7
20000ab4:	b004      	add	sp, #16
20000ab6:	bd80      	pop	{r7, pc}

20000ab8 <move_ballobject>:

void move_ballobject(POBJECT o)
{
20000ab8:	b580      	push	{r7, lr}
20000aba:	b084      	sub	sp, #16
20000abc:	af00      	add	r7, sp, #0
20000abe:	6078      	str	r0, [r7, #4]
	clear_ballobject(o);
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	0018      	movs	r0, r3
20000ac4:	f7ff ffc8 	bl	20000a58 <clear_ballobject>
	int newx = o->dirx + o->posx;
20000ac8:	687b      	ldr	r3, [r7, #4]
20000aca:	685a      	ldr	r2, [r3, #4]
20000acc:	687b      	ldr	r3, [r7, #4]
20000ace:	68db      	ldr	r3, [r3, #12]
20000ad0:	18d3      	adds	r3, r2, r3
20000ad2:	60fb      	str	r3, [r7, #12]
	int newy = o->diry + o->posy;
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	689a      	ldr	r2, [r3, #8]
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	691b      	ldr	r3, [r3, #16]
20000adc:	18d3      	adds	r3, r2, r3
20000ade:	60bb      	str	r3, [r7, #8]
	if (newx < 1) // touches left side
20000ae0:	68fb      	ldr	r3, [r7, #12]
20000ae2:	2b00      	cmp	r3, #0
20000ae4:	dc0c      	bgt.n	20000b00 <move_ballobject+0x48>
	{
		// if its towards the left side x dir is negative which means we need to set it as positive 
		o->dirx = abs(o->dirx);
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	685b      	ldr	r3, [r3, #4]
20000aea:	17d9      	asrs	r1, r3, #31
20000aec:	185a      	adds	r2, r3, r1
20000aee:	404a      	eors	r2, r1
20000af0:	687b      	ldr	r3, [r7, #4]
20000af2:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	685a      	ldr	r2, [r3, #4]
20000af8:	687b      	ldr	r3, [r7, #4]
20000afa:	68db      	ldr	r3, [r3, #12]
20000afc:	18d3      	adds	r3, r2, r3
20000afe:	60fb      	str	r3, [r7, #12]
	}	
	if (newx > 128) // touches right side
20000b00:	68fb      	ldr	r3, [r7, #12]
20000b02:	2b80      	cmp	r3, #128	; 0x80
20000b04:	dd0a      	ble.n	20000b1c <move_ballobject+0x64>
	{
		// if it touches right side x dir is positive and we need to set it negative. 
		o->dirx = -(o->dirx);
20000b06:	687b      	ldr	r3, [r7, #4]
20000b08:	685b      	ldr	r3, [r3, #4]
20000b0a:	425a      	negs	r2, r3
20000b0c:	687b      	ldr	r3, [r7, #4]
20000b0e:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000b10:	687b      	ldr	r3, [r7, #4]
20000b12:	685a      	ldr	r2, [r3, #4]
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	68db      	ldr	r3, [r3, #12]
20000b18:	18d3      	adds	r3, r2, r3
20000b1a:	60fb      	str	r3, [r7, #12]
	}
	if (newy < 1) // touches top side
20000b1c:	68bb      	ldr	r3, [r7, #8]
20000b1e:	2b00      	cmp	r3, #0
20000b20:	dc0c      	bgt.n	20000b3c <move_ballobject+0x84>
	{
		o->diry = abs(o->diry);
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	689b      	ldr	r3, [r3, #8]
20000b26:	17d9      	asrs	r1, r3, #31
20000b28:	185a      	adds	r2, r3, r1
20000b2a:	404a      	eors	r2, r1
20000b2c:	687b      	ldr	r3, [r7, #4]
20000b2e:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	689a      	ldr	r2, [r3, #8]
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	691b      	ldr	r3, [r3, #16]
20000b38:	18d3      	adds	r3, r2, r3
20000b3a:	60bb      	str	r3, [r7, #8]
	}
	if (newy > 64) // touches bottom side
20000b3c:	68bb      	ldr	r3, [r7, #8]
20000b3e:	2b40      	cmp	r3, #64	; 0x40
20000b40:	dd0a      	ble.n	20000b58 <move_ballobject+0xa0>
	{
		o->diry = -(o->diry);
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	689b      	ldr	r3, [r3, #8]
20000b46:	425a      	negs	r2, r3
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b4c:	687b      	ldr	r3, [r7, #4]
20000b4e:	689a      	ldr	r2, [r3, #8]
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	691b      	ldr	r3, [r3, #16]
20000b54:	18d3      	adds	r3, r2, r3
20000b56:	60bb      	str	r3, [r7, #8]
	}
	o->posx = newx;
20000b58:	687b      	ldr	r3, [r7, #4]
20000b5a:	68fa      	ldr	r2, [r7, #12]
20000b5c:	60da      	str	r2, [r3, #12]
	o->posy = newy;
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	68ba      	ldr	r2, [r7, #8]
20000b62:	611a      	str	r2, [r3, #16]
	draw_ballobject(o);
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	0018      	movs	r0, r3
20000b68:	f7ff ff2e 	bl	200009c8 <draw_ballobject>
}
20000b6c:	46c0      	nop			; (mov r8, r8)
20000b6e:	46bd      	mov	sp, r7
20000b70:	b004      	add	sp, #16
20000b72:	bd80      	pop	{r7, pc}

20000b74 <set_ballobject_speed>:

void set_ballobject_speed(POBJECT o, int speedx, int speedy)
{
20000b74:	b580      	push	{r7, lr}
20000b76:	b084      	sub	sp, #16
20000b78:	af00      	add	r7, sp, #0
20000b7a:	60f8      	str	r0, [r7, #12]
20000b7c:	60b9      	str	r1, [r7, #8]
20000b7e:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000b80:	68fb      	ldr	r3, [r7, #12]
20000b82:	68ba      	ldr	r2, [r7, #8]
20000b84:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000b86:	68fb      	ldr	r3, [r7, #12]
20000b88:	687a      	ldr	r2, [r7, #4]
20000b8a:	609a      	str	r2, [r3, #8]
}
20000b8c:	46c0      	nop			; (mov r8, r8)
20000b8e:	46bd      	mov	sp, r7
20000b90:	b004      	add	sp, #16
20000b92:	bd80      	pop	{r7, pc}

20000b94 <move_paddle>:

void move_paddle(POBJECT p)
{
20000b94:	b580      	push	{r7, lr}
20000b96:	b084      	sub	sp, #16
20000b98:	af00      	add	r7, sp, #0
20000b9a:	6078      	str	r0, [r7, #4]
	clear_ballobject(p);
20000b9c:	687b      	ldr	r3, [r7, #4]
20000b9e:	0018      	movs	r0, r3
20000ba0:	f7ff ff5a 	bl	20000a58 <clear_ballobject>
	int newy = p->posy + p->diry;
20000ba4:	687b      	ldr	r3, [r7, #4]
20000ba6:	691a      	ldr	r2, [r3, #16]
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	689b      	ldr	r3, [r3, #8]
20000bac:	18d3      	adds	r3, r2, r3
20000bae:	60fb      	str	r3, [r7, #12]
	if (newy > -1 && newy < 60)
20000bb0:	68fb      	ldr	r3, [r7, #12]
20000bb2:	2b00      	cmp	r3, #0
20000bb4:	db05      	blt.n	20000bc2 <move_paddle+0x2e>
20000bb6:	68fb      	ldr	r3, [r7, #12]
20000bb8:	2b3b      	cmp	r3, #59	; 0x3b
20000bba:	dc02      	bgt.n	20000bc2 <move_paddle+0x2e>
		p->posy = newy;
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	68fa      	ldr	r2, [r7, #12]
20000bc0:	611a      	str	r2, [r3, #16]
	draw_ballobject(p);
20000bc2:	687b      	ldr	r3, [r7, #4]
20000bc4:	0018      	movs	r0, r3
20000bc6:	f7ff feff 	bl	200009c8 <draw_ballobject>
}
20000bca:	46c0      	nop			; (mov r8, r8)
20000bcc:	46bd      	mov	sp, r7
20000bce:	b004      	add	sp, #16
20000bd0:	bd80      	pop	{r7, pc}

20000bd2 <bounce>:

void bounce(POBJECT paddle, POBJECT ball)
{
20000bd2:	b590      	push	{r4, r7, lr}
20000bd4:	b089      	sub	sp, #36	; 0x24
20000bd6:	af00      	add	r7, sp, #0
20000bd8:	6078      	str	r0, [r7, #4]
20000bda:	6039      	str	r1, [r7, #0]
	int ballx = ball->posx + ball->dirx;
20000bdc:	683b      	ldr	r3, [r7, #0]
20000bde:	68da      	ldr	r2, [r3, #12]
20000be0:	683b      	ldr	r3, [r7, #0]
20000be2:	685b      	ldr	r3, [r3, #4]
20000be4:	18d3      	adds	r3, r2, r3
20000be6:	61fb      	str	r3, [r7, #28]
	int bally = ball->posy;
20000be8:	683b      	ldr	r3, [r7, #0]
20000bea:	691b      	ldr	r3, [r3, #16]
20000bec:	61bb      	str	r3, [r7, #24]
	int paddlex = paddle->posx;
20000bee:	687b      	ldr	r3, [r7, #4]
20000bf0:	68db      	ldr	r3, [r3, #12]
20000bf2:	617b      	str	r3, [r7, #20]
	int paddley = paddle->posy;
20000bf4:	687b      	ldr	r3, [r7, #4]
20000bf6:	691b      	ldr	r3, [r3, #16]
20000bf8:	613b      	str	r3, [r7, #16]
	int dir = -ball->dirx;
20000bfa:	683b      	ldr	r3, [r7, #0]
20000bfc:	685b      	ldr	r3, [r3, #4]
20000bfe:	425b      	negs	r3, r3
20000c00:	60fb      	str	r3, [r7, #12]
	if (ballx >= paddlex && bally >= paddley && bally <= (paddley + 8))
20000c02:	69fa      	ldr	r2, [r7, #28]
20000c04:	697b      	ldr	r3, [r7, #20]
20000c06:	429a      	cmp	r2, r3
20000c08:	db10      	blt.n	20000c2c <bounce+0x5a>
20000c0a:	69ba      	ldr	r2, [r7, #24]
20000c0c:	693b      	ldr	r3, [r7, #16]
20000c0e:	429a      	cmp	r2, r3
20000c10:	db0c      	blt.n	20000c2c <bounce+0x5a>
20000c12:	693b      	ldr	r3, [r7, #16]
20000c14:	3308      	adds	r3, #8
20000c16:	69ba      	ldr	r2, [r7, #24]
20000c18:	429a      	cmp	r2, r3
20000c1a:	dc07      	bgt.n	20000c2c <bounce+0x5a>
	{
		ball->set_speed(ball, dir, ball->diry);
20000c1c:	683b      	ldr	r3, [r7, #0]
20000c1e:	6a1c      	ldr	r4, [r3, #32]
20000c20:	683b      	ldr	r3, [r7, #0]
20000c22:	689a      	ldr	r2, [r3, #8]
20000c24:	68f9      	ldr	r1, [r7, #12]
20000c26:	683b      	ldr	r3, [r7, #0]
20000c28:	0018      	movs	r0, r3
20000c2a:	47a0      	blx	r4
	}
}
20000c2c:	46c0      	nop			; (mov r8, r8)
20000c2e:	46bd      	mov	sp, r7
20000c30:	b009      	add	sp, #36	; 0x24
20000c32:	bd90      	pop	{r4, r7, pc}

20000c34 <gameover>:

int gameover(POBJECT b)
{
20000c34:	b5b0      	push	{r4, r5, r7, lr}
20000c36:	b086      	sub	sp, #24
20000c38:	af00      	add	r7, sp, #0
20000c3a:	6078      	str	r0, [r7, #4]
	if (b->posx >= 127)
20000c3c:	687b      	ldr	r3, [r7, #4]
20000c3e:	68db      	ldr	r3, [r3, #12]
20000c40:	2b7e      	cmp	r3, #126	; 0x7e
20000c42:	dd1c      	ble.n	20000c7e <gameover+0x4a>
	{
		char *s;
		char test1[] = "Game Over! ";
20000c44:	2408      	movs	r4, #8
20000c46:	193b      	adds	r3, r7, r4
20000c48:	4a0f      	ldr	r2, [pc, #60]	; (20000c88 <gameover+0x54>)
20000c4a:	ca23      	ldmia	r2!, {r0, r1, r5}
20000c4c:	c323      	stmia	r3!, {r0, r1, r5}

		init_app();
20000c4e:	f7ff fa67 	bl	20000120 <init_app>
		ascii_init();
20000c52:	f7ff fc6f 	bl	20000534 <ascii_init>
		ascii_gotoxy(1, 1);
20000c56:	2101      	movs	r1, #1
20000c58:	2001      	movs	r0, #1
20000c5a:	f7ff fc9a 	bl	20000592 <ascii_gotoxy>
		s = test1;
20000c5e:	193b      	adds	r3, r7, r4
20000c60:	617b      	str	r3, [r7, #20]
		while (*s)
20000c62:	e006      	b.n	20000c72 <gameover+0x3e>
		{
			ascii_write_char(*s++);
20000c64:	697b      	ldr	r3, [r7, #20]
20000c66:	1c5a      	adds	r2, r3, #1
20000c68:	617a      	str	r2, [r7, #20]
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	0018      	movs	r0, r3
20000c6e:	f7ff fc72 	bl	20000556 <ascii_write_char>
		while (*s)
20000c72:	697b      	ldr	r3, [r7, #20]
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	2b00      	cmp	r3, #0
20000c78:	d1f4      	bne.n	20000c64 <gameover+0x30>
		}
		return 1;
20000c7a:	2301      	movs	r3, #1
20000c7c:	e000      	b.n	20000c80 <gameover+0x4c>
	}
	return 0;
20000c7e:	2300      	movs	r3, #0
}
20000c80:	0018      	movs	r0, r3
20000c82:	46bd      	mov	sp, r7
20000c84:	b006      	add	sp, #24
20000c86:	bdb0      	pop	{r4, r5, r7, pc}
20000c88:	20000dac 	andcs	r0, r0, ip, lsr #27

20000c8c <my_irq_handler>:

// ------------------------------------------------------- Interrupt ------------------------------------------------------------------------------- //
void my_irq_handler(void)
{
20000c8c:	b580      	push	{r7, lr}
20000c8e:	af00      	add	r7, sp, #0
	// tänd diodramp på port D 
	//*GPIO_D_MODER = 0x00005555;
	//*GPIO_D_ODR_LOW = 0xFF;
}
20000c90:	46c0      	nop			; (mov r8, r8)
20000c92:	46bd      	mov	sp, r7
20000c94:	bd80      	pop	{r7, pc}
20000c96:	46c0      	nop			; (mov r8, r8)

20000c98 <graphic_initalize>:

// ------------------------------------------------------- MD407 BUILT IN FUNCTIONS ------------------------------------------------------------------------------- //
__attribute__((naked))
void graphic_initalize(void)
{
20000c98:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
20000c9c:	46c0      	nop			; (mov r8, r8)

20000c9e <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
20000c9e:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
20000ca2:	46c0      	nop			; (mov r8, r8)

20000ca4 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(void)
{
20000ca4:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
20000ca8:	46c0      	nop			; (mov r8, r8)

20000caa <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(void)
{
20000caa:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
20000cae:	46c0      	nop			; (mov r8, r8)

20000cb0 <ball_geometry>:
20000cb0:	0000000c 	andeq	r0, r0, ip
20000cb4:	00000004 	andeq	r0, r0, r4
20000cb8:	00000004 	andeq	r0, r0, r4
20000cbc:	02000100 	andeq	r0, r0, #0, 2
20000cc0:	01010001 	tsteq	r1, r1
20000cc4:	03010201 	movweq	r0, #4609	; 0x1201
20000cc8:	01020002 	tsteq	r2, r2
20000ccc:	03020202 	movweq	r0, #8706	; 0x2202
20000cd0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000cf8 <ballobject>:
20000cf8:	20000cb0 			; <UNDEFINED> instruction: 0x20000cb0
20000cfc:	00000007 	andeq	r0, r0, r7
20000d00:	00000001 	andeq	r0, r0, r1
20000d04:	00000001 	andeq	r0, r0, r1
20000d08:	00000001 	andeq	r0, r0, r1
20000d0c:	200009c9 	andcs	r0, r0, r9, asr #19
20000d10:	20000a59 	andcs	r0, r0, r9, asr sl
20000d14:	20000ab9 			; <UNDEFINED> instruction: 0x20000ab9
20000d18:	20000b75 	andcs	r0, r0, r5, ror fp

20000d1c <paddle>:
20000d1c:	0000001b 	andeq	r0, r0, fp, lsl r0
20000d20:	00000005 	andeq	r0, r0, r5
20000d24:	00000009 	andeq	r0, r0, r9
20000d28:	00010000 	andeq	r0, r1, r0
20000d2c:	00030002 	andeq	r0, r3, r2
20000d30:	01040004 	tsteq	r4, r4
20000d34:	03040204 	movweq	r0, #16900	; 0x4204
20000d38:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
20000d3c:	07040604 	streq	r0, [r4, -r4, lsl #12]
20000d40:	08030804 	stmdaeq	r3, {r2, fp}
20000d44:	08010802 	stmdaeq	r1, {r1, fp}
20000d48:	07000800 	streq	r0, [r0, -r0, lsl #16]
20000d4c:	05000600 	streq	r0, [r0, #-1536]	; 0xfffffa00
20000d50:	03000400 	movweq	r0, #1024	; 0x400
20000d54:	01000200 	mrseq	r0, R8_usr
20000d58:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
20000d5c:	00000502 	andeq	r0, r0, r2, lsl #10
20000d60:	00000000 	andeq	r0, r0, r0

20000d64 <paddle_object>:
20000d64:	20000d1c 	andcs	r0, r0, ip, lsl sp
	...
20000d70:	00000073 	andeq	r0, r0, r3, ror r0
20000d74:	00000019 	andeq	r0, r0, r9, lsl r0
20000d78:	200009c9 	andcs	r0, r0, r9, asr #19
20000d7c:	20000a59 	andcs	r0, r0, r9, asr sl
20000d80:	20000b95 	mulcs	r0, r5, fp
20000d84:	20000b75 	andcs	r0, r0, r5, ror fp
20000d88:	20000264 	andcs	r0, r0, r4, ror #4
20000d8c:	20000244 	andcs	r0, r0, r4, asr #4
20000d90:	2000024c 	andcs	r0, r0, ip, asr #4
20000d94:	20000254 	andcs	r0, r0, r4, asr r2
20000d98:	2000025c 	andcs	r0, r0, ip, asr r2
20000d9c:	0a030201 	beq	200c15a8 <paddle_object+0xc0844>
20000da0:	0b060504 	bleq	201821b8 <paddle_object+0x181454>
20000da4:	0c090807 	stceq	8, cr0, [r9], {7}
20000da8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000d78 <paddle_object+0x14>
20000dac:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
20000db0:	65764f20 	ldrbvs	r4, [r6, #-3872]!	; 0xfffff0e0
20000db4:	00202172 	eoreq	r2, r0, r2, ror r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013c 	andeq	r0, r0, ip, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003e 	andeq	r0, r0, lr, lsr r0
  10:	0000360c 	andeq	r3, r0, ip, lsl #12
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00006a20 	andeq	r6, r0, r0, lsr #20
  20:	00000000 	andeq	r0, r0, r0
  24:	011a0200 	tsteq	sl, r0, lsl #4
  28:	00d60905 	sbcseq	r0, r6, r5, lsl #18
  2c:	73030000 	movwvc	r0, #12288	; 0x3000
  30:	06010072 			; <UNDEFINED> instruction: 0x06010072
  34:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  38:	2d040000 	stccs	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	00dd1a07 	sbcseq	r1, sp, r7, lsl #20
  44:	03020000 	movweq	r0, #8192	; 0x2000
  48:	01007264 	tsteq	r0, r4, ror #4
  4c:	00dd1a08 	sbcseq	r1, sp, r8, lsl #20
  50:	04040000 	streq	r0, [r4], #-0
  54:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	dd1a0901 	vldrle.16	s0, [sl, #-2]	; <UNPREDICTABLE>
  5c:	06000000 	streq	r0, [r0], -r0
  60:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
  64:	1a0a0100 	bne	28046c <startup-0x1fd7fb94>
  68:	000000dd 	ldrdeq	r0, [r0], -sp
  6c:	00b90408 	adcseq	r0, r9, r8, lsl #8
  70:	0b010000 	bleq	40078 <startup-0x1ffbff88>
  74:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  78:	63030a00 	movwvs	r0, #14848	; 0x3a00
  7c:	01003172 	tsteq	r0, r2, ror r1
  80:	00dd1a0c 	sbcseq	r1, sp, ip, lsl #20
  84:	040c0000 	streq	r0, [ip], #-0
  88:	000000c2 	andeq	r0, r0, r2, asr #1
  8c:	dd1a0d01 	ldcle	13, cr0, [sl, #-4]
  90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  94:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
  98:	1a0e0100 	bne	3804a0 <startup-0x1fc7fb60>
  9c:	000000dd 	ldrdeq	r0, [r0], -sp
  a0:	00cb0410 	sbceq	r0, fp, r0, lsl r4
  a4:	0f010000 	svceq	0x00010000
  a8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  ac:	63031200 	movwvs	r1, #12800	; 0x3200
  b0:	01003372 	tsteq	r0, r2, ror r3
  b4:	00dd1a10 	sbcseq	r1, sp, r0, lsl sl
  b8:	04140000 	ldreq	r0, [r4], #-0
  bc:	000000d4 	ldrdeq	r0, [r0], -r4
  c0:	dd1a1101 	ldfles	f1, [sl, #-4]
  c4:	16000000 	strne	r0, [r0], -r0
  c8:	0000f004 	andeq	pc, r0, r4
  cc:	1a120100 	bne	4804d4 <startup-0x1fb7fb2c>
  d0:	000000dd 	ldrdeq	r0, [r0], -sp
  d4:	02050018 	andeq	r0, r5, #24
  d8:	0000dd07 	andeq	sp, r0, r7, lsl #26
  dc:	00d60600 	sbcseq	r0, r6, r0, lsl #12
  e0:	fb070000 	blx	1c00ea <startup-0x1fe3ff16>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	00250313 	eoreq	r0, r5, r3, lsl r3
  ec:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	00500621 	subseq	r0, r0, r1, lsr #12
  f8:	002a2000 	eoreq	r2, sl, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	01007309 	tsteq	r0, r9, lsl #6
 108:	01121221 	tsteq	r2, r1, lsr #4
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	6c080105 	stfvss	f0, [r8], {5}
 11c:	0b000003 	bleq	130 <startup-0x1ffffed0>
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	100d1701 	andne	r1, sp, r1, lsl #14
 128:	40200000 	eormi	r0, r0, r0
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0063099c 	mlseq	r3, ip, r9, r0
 134:	181d1701 	ldmdane	sp, {r0, r8, r9, sl, ip}
 138:	02000001 	andeq	r0, r0, #1
 13c:	00007791 	muleq	r0, r1, r7
 140:	00000b18 	andeq	r0, r0, r8, lsl fp
 144:	00b40004 	adcseq	r0, r4, r4
 148:	01040000 	mrseq	r0, (UNDEF: 4)
 14c:	0000003e 	andeq	r0, r0, lr, lsr r0
 150:	0002940c 	andeq	r9, r2, ip, lsl #8
 154:	00000000 	andeq	r0, r0, r0
 158:	00007c00 	andeq	r7, r0, r0, lsl #24
 15c:	000c1a20 	andeq	r1, ip, r0, lsr #20
 160:	00007600 	andeq	r7, r0, r0, lsl #12
 164:	07040200 	streq	r0, [r4, -r0, lsl #4]
 168:	0000012d 	andeq	r0, r0, sp, lsr #2
 16c:	69050403 	stmdbvs	r5, {r0, r1, sl}
 170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 174:	01700508 	cmneq	r0, r8, lsl #10
 178:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 17c:	0002c504 	andeq	ip, r2, r4, lsl #10
 180:	06010200 	streq	r0, [r1], -r0, lsl #4
 184:	00000365 	andeq	r0, r0, r5, ror #6
 188:	63080102 	movwvs	r0, #33026	; 0x8102
 18c:	02000003 	andeq	r0, r0, #3
 190:	03710502 	cmneq	r1, #8388608	; 0x800000
 194:	02020000 	andeq	r0, r2, #0
 198:	0000dd07 	andeq	sp, r0, r7, lsl #26
 19c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a0:	00000175 	andeq	r0, r0, r5, ror r1
 1a4:	28070402 	stmdacs	r7, {r1, sl}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	01230708 			; <UNDEFINED> instruction: 0x01230708
 1b0:	04040000 	streq	r0, [r4], #-0
 1b4:	00000048 	andeq	r0, r0, r8, asr #32
 1b8:	007e0404 	rsbseq	r0, lr, r4, lsl #8
 1bc:	01020000 	mrseq	r0, (UNDEF: 2)
 1c0:	00036c08 	andeq	r6, r3, r8, lsl #24
 1c4:	01020500 	tsteq	r2, r0, lsl #10
 1c8:	00a50922 	adceq	r0, r5, r2, lsr #18
 1cc:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
 1d0:	10240100 	eorne	r0, r4, r0, lsl #2
 1d4:	00000048 	andeq	r0, r0, r8, asr #32
 1d8:	00790600 	rsbseq	r0, r9, r0, lsl #12
 1dc:	48122401 	ldmdami	r2, {r0, sl, sp}
 1e0:	01000000 	mrseq	r0, (UNDEF: 0)
 1e4:	018f0700 	orreq	r0, pc, r0, lsl #14
 1e8:	25010000 	strcs	r0, [r1, #-0]
 1ec:	00008503 	andeq	r8, r0, r3, lsl #10
 1f0:	01040500 	tsteq	r4, r0, lsl #10
 1f4:	00d30927 	sbcseq	r0, r3, r7, lsr #18
 1f8:	70060000 	andvc	r0, r6, r0
 1fc:	29010030 	stmdbcs	r1, {r4, r5}
 200:	0000a508 	andeq	sl, r0, r8, lsl #10
 204:	70060000 	andvc	r0, r6, r0
 208:	29010031 	stmdbcs	r1, {r0, r4, r5}
 20c:	0000a50b 	andeq	sl, r0, fp, lsl #10
 210:	07000200 	streq	r0, [r0, -r0, lsl #4]
 214:	000002e5 	andeq	r0, r0, r5, ror #5
 218:	b1032a01 	tstlt	r3, r1, lsl #20
 21c:	07000000 	streq	r0, [r0, -r0]
 220:	000002e4 	andeq	r0, r0, r4, ror #5
 224:	eb0a2a01 	bl	28aa30 <startup-0x1fd755d0>
 228:	04000000 	streq	r0, [r0], #-0
 22c:	0000b104 	andeq	fp, r0, r4, lsl #2
 230:	01040500 	tsteq	r4, r0, lsl #10
 234:	011c092c 	tsteq	ip, ip, lsr #18
 238:	70060000 	andvc	r0, r6, r0
 23c:	082e0100 	stmdaeq	lr!, {r8}
 240:	000000a5 	andeq	r0, r0, r5, lsr #1
 244:	00780600 	rsbseq	r0, r8, r0, lsl #12
 248:	48102f01 	ldmdami	r0, {r0, r8, r9, sl, fp, sp}
 24c:	02000000 	andeq	r0, r0, #0
 250:	01007906 	tsteq	r0, r6, lsl #18
 254:	0048122f 	subeq	r1, r8, pc, lsr #4
 258:	00030000 	andeq	r0, r3, r0
 25c:	00019507 	andeq	r9, r1, r7, lsl #10
 260:	0a300100 	beq	c00668 <startup-0x1f3ff998>
 264:	00000128 	andeq	r0, r0, r8, lsr #2
 268:	00f10404 	rscseq	r0, r1, r4, lsl #8
 26c:	01080000 	mrseq	r0, (UNDEF: 8)
 270:	08000002 	stmdaeq	r0, {r1}
 274:	5f103201 	svcpl	0x00103201
 278:	06000001 	streq	r0, [r0], -r1
 27c:	34010078 	strcc	r0, [r1], #-120	; 0xffffff88
 280:	00007e07 	andeq	r7, r0, r7, lsl #28
 284:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
 288:	09340100 	ldmdbeq	r4!, {r8}
 28c:	0000007e 	andeq	r0, r0, lr, ror r0
 290:	015b0901 	cmpeq	fp, r1, lsl #18
 294:	35010000 	strcc	r0, [r1, #-0]
 298:	00015f17 	andeq	r5, r1, r7, lsl pc
 29c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
 2a0:	00012e04 	andeq	r2, r1, r4, lsl #28
 2a4:	018b0700 	orreq	r0, fp, r0, lsl #14
 2a8:	36010000 	strcc	r0, [r1], -r0
 2ac:	00012e03 	andeq	r2, r1, r3, lsl #28
 2b0:	018a0700 	orreq	r0, sl, r0, lsl #14
 2b4:	36010000 	strcc	r0, [r1], -r0
 2b8:	00015f0f 	andeq	r5, r1, pc, lsl #30
 2bc:	01480500 	cmpeq	r8, r0, lsl #10
 2c0:	01ba0938 			; <UNDEFINED> instruction: 0x01ba0938
 2c4:	8a090000 	bhi	2402cc <startup-0x1fdbfd34>
 2c8:	01000002 	tsteq	r0, r2
 2cc:	002c063a 	eoreq	r0, ip, sl, lsr r6
 2d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 2d4:	00000455 	andeq	r0, r0, r5, asr r4
 2d8:	2c063b01 			; <UNDEFINED> instruction: 0x2c063b01
 2dc:	04000000 	streq	r0, [r0], #-0
 2e0:	00045b09 	andeq	r5, r4, r9, lsl #22
 2e4:	063c0100 	ldrteq	r0, [ip], -r0, lsl #2
 2e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ec:	78700608 	ldmdavc	r0!, {r3, r9, sl}^
 2f0:	083d0100 	ldmdaeq	sp!, {r8}
 2f4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 2f8:	a50a000c 	strge	r0, [sl, #-12]
 2fc:	ca000000 	bgt	304 <startup-0x1ffffcfc>
 300:	0b000001 	bleq	30c <startup-0x1ffffcf4>
 304:	00000025 	andeq	r0, r0, r5, lsr #32
 308:	eb07001d 	bl	1c0384 <startup-0x1fe3fc7c>
 30c:	01000002 	tsteq	r0, r2
 310:	017d033e 	cmneq	sp, lr, lsr r3
 314:	ea070000 	b	1c031c <startup-0x1fe3fce4>
 318:	01000002 	tsteq	r0, r2
 31c:	01e20e3e 	mvneq	r0, lr, lsr lr
 320:	04040000 	streq	r0, [r4], #-0
 324:	0000017d 	andeq	r0, r0, sp, ror r1
 328:	00040708 	andeq	r0, r4, r8, lsl #14
 32c:	40012400 	andmi	r2, r1, r0, lsl #8
 330:	00026b10 	andeq	r6, r2, r0, lsl fp
 334:	65670600 	strbvs	r0, [r7, #-1536]!	; 0xfffffa00
 338:	4201006f 	andmi	r0, r1, #111	; 0x6f
 33c:	0001d60c 	andeq	sp, r1, ip, lsl #12
 340:	b6090000 	strlt	r0, [r9], -r0
 344:	01000003 	tsteq	r0, r3
 348:	002c0643 	eoreq	r0, ip, r3, asr #12
 34c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 350:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
 354:	2c0c4301 	stccs	3, cr4, [ip], {1}
 358:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 35c:	0002a909 	andeq	sl, r2, r9, lsl #18
 360:	06440100 	strbeq	r0, [r4], -r0, lsl #2
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	02ae090c 	adceq	r0, lr, #12, 18	; 0x30000
 36c:	44010000 	strmi	r0, [r1], #-0
 370:	00002c0c 	andeq	r2, r0, ip, lsl #24
 374:	2f091000 	svccs	0x00091000
 378:	01000004 	tsteq	r0, r4
 37c:	027c0a45 	rsbseq	r0, ip, #282624	; 0x45000
 380:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
 384:	00000258 	andeq	r0, r0, r8, asr r2
 388:	7c0a4601 	stcvc	6, cr4, [sl], {1}
 38c:	18000002 	stmdane	r0, {r1}
 390:	00016b09 	andeq	r6, r1, r9, lsl #22
 394:	0a470100 	beq	11c079c <startup-0x1ee3f864>
 398:	0000027c 	andeq	r0, r0, ip, ror r2
 39c:	013a091c 	teqeq	sl, ip, lsl r9
 3a0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 3a4:	0002970a 	andeq	r9, r2, sl, lsl #14
 3a8:	0c002000 	stceq	0, cr2, [r0], {-0}
 3ac:	00000276 	andeq	r0, r0, r6, ror r2
 3b0:	0002760d 	andeq	r7, r2, sp, lsl #12
 3b4:	04040000 	streq	r0, [r4], #-0
 3b8:	000001e8 	andeq	r0, r0, r8, ror #3
 3bc:	026b0404 	rsbeq	r0, fp, #4, 8	; 0x4000000
 3c0:	970c0000 	strls	r0, [ip, -r0]
 3c4:	0d000002 	stceq	0, cr0, [r0, #-8]
 3c8:	00000276 	andeq	r0, r0, r6, ror r2
 3cc:	00002c0d 	andeq	r2, r0, sp, lsl #24
 3d0:	002c0d00 	eoreq	r0, ip, r0, lsl #26
 3d4:	04000000 	streq	r0, [r0], #-0
 3d8:	00028204 	andeq	r8, r2, r4, lsl #4
 3dc:	02d80700 	sbcseq	r0, r8, #0, 14
 3e0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 3e4:	0001e803 	andeq	lr, r1, r3, lsl #16
 3e8:	02d70700 	sbcseq	r0, r7, #0, 14
 3ec:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 3f0:	0002760c 	andeq	r7, r2, ip, lsl #12
 3f4:	03960e00 	orrseq	r0, r6, #0, 28
 3f8:	73010000 	movwvc	r0, #4096	; 0x1000
 3fc:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 400:	b0030500 	andlt	r0, r3, r0, lsl #10
 404:	0f20000c 	svceq	0x0020000c
 408:	00000150 	andeq	r0, r0, r0, asr r1
 40c:	9d0f7c01 	stcls	12, cr7, [pc, #-4]	; 410 <startup-0x1ffffbf0>
 410:	05000002 	streq	r0, [r0, #-2]
 414:	000cf803 	andeq	pc, ip, r3, lsl #16
 418:	03af0e20 			; <UNDEFINED> instruction: 0x03af0e20
 41c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
 420:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 424:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
 428:	0f20000d 	svceq	0x0020000d
 42c:	00000434 	andeq	r0, r0, r4, lsr r4
 430:	9d0f9101 	stflsd	f1, [pc, #-4]	; 434 <startup-0x1ffffbcc>
 434:	05000002 	streq	r0, [r0, #-2]
 438:	000d6403 	andeq	r6, sp, r3, lsl #8
 43c:	01e61020 	mvneq	r1, r0, lsr #32
 440:	57010000 	strpl	r0, [r1, -r0]
 444:	0c8c0602 	stceq	6, cr0, [ip], {2}
 448:	000a2000 	andeq	r2, sl, r0
 44c:	9c010000 	stcls	0, cr0, [r1], {-0}
 450:	00020e11 	andeq	r0, r2, r1, lsl lr
 454:	02420100 	subeq	r0, r2, #0, 2
 458:	00002c05 	andeq	r2, r0, r5, lsl #24
 45c:	000c3400 	andeq	r3, ip, r0, lsl #8
 460:	00005820 	andeq	r5, r0, r0, lsr #16
 464:	629c0100 	addsvs	r0, ip, #0, 2
 468:	12000003 	andne	r0, r0, #3
 46c:	42010062 	andmi	r0, r1, #98	; 0x62
 470:	02a91602 	adceq	r1, r9, #2097152	; 0x200000
 474:	91020000 	mrsls	r0, (UNDEF: 2)
 478:	0c44135c 	mcrreq	3, 5, r1, r4, cr12
 47c:	003a2000 	eorseq	r2, sl, r0
 480:	73140000 	tstvc	r4, #0
 484:	02460100 	subeq	r0, r6, #0, 2
 488:	00007809 	andeq	r7, r0, r9, lsl #16
 48c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 490:	00041d15 	andeq	r1, r4, r5, lsl sp
 494:	02470100 	subeq	r0, r7, #0, 2
 498:	00036208 	andeq	r6, r3, r8, lsl #4
 49c:	60910200 	addsvs	r0, r1, r0, lsl #4
 4a0:	7e0a0000 	cdpvc	0, 0, cr0, cr10, cr0, {0}
 4a4:	72000000 	andvc	r0, r0, #0
 4a8:	0b000003 	bleq	4bc <startup-0x1ffffb44>
 4ac:	00000025 	andeq	r0, r0, r5, lsr #32
 4b0:	5c16000b 	ldcpl	0, cr0, [r6], {11}
 4b4:	01000003 	tsteq	r0, r3
 4b8:	d2060235 	andle	r0, r6, #1342177283	; 0x50000003
 4bc:	6220000b 	eorvs	r0, r0, #11
 4c0:	01000000 	mrseq	r0, (UNDEF: 0)
 4c4:	0003fa9c 	muleq	r3, ip, sl
 4c8:	03af1700 			; <UNDEFINED> instruction: 0x03af1700
 4cc:	35010000 	strcc	r0, [r1, #-0]
 4d0:	02a91502 	adceq	r1, r9, #8388608	; 0x800000
 4d4:	91020000 	mrsls	r0, (UNDEF: 2)
 4d8:	03051754 	movweq	r1, #22356	; 0x5754
 4dc:	35010000 	strcc	r0, [r1, #-0]
 4e0:	02a92502 	adceq	r2, r9, #8388608	; 0x800000
 4e4:	91020000 	mrsls	r0, (UNDEF: 2)
 4e8:	03a41550 			; <UNDEFINED> instruction: 0x03a41550
 4ec:	37010000 	strcc	r0, [r1, -r0]
 4f0:	002c0602 	eoreq	r0, ip, r2, lsl #12
 4f4:	91020000 	mrsls	r0, (UNDEF: 2)
 4f8:	0217156c 	andseq	r1, r7, #108, 10	; 0x1b000000
 4fc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 500:	002c0602 	eoreq	r0, ip, r2, lsl #12
 504:	91020000 	mrsls	r0, (UNDEF: 2)
 508:	02291568 	eoreq	r1, r9, #104, 10	; 0x1a000000
 50c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
 510:	002c0602 	eoreq	r0, ip, r2, lsl #12
 514:	91020000 	mrsls	r0, (UNDEF: 2)
 518:	02311564 	eorseq	r1, r1, #100, 10	; 0x19000000
 51c:	3a010000 	bcc	40524 <startup-0x1ffbfadc>
 520:	002c0602 	eoreq	r0, ip, r2, lsl #12
 524:	91020000 	mrsls	r0, (UNDEF: 2)
 528:	69641460 	stmdbvs	r4!, {r5, r6, sl, ip}^
 52c:	3b010072 	blcc	406fc <startup-0x1ffbf904>
 530:	002c0602 	eoreq	r0, ip, r2, lsl #12
 534:	91020000 	mrsls	r0, (UNDEF: 2)
 538:	aa16005c 	bge	5806b0 <startup-0x1fa7f950>
 53c:	01000003 	tsteq	r0, r3
 540:	9406022c 	strls	r0, [r6], #-556	; 0xfffffdd4
 544:	3e20000b 	cdpcc	0, 2, cr0, cr0, cr11, {0}
 548:	01000000 	mrseq	r0, (UNDEF: 0)
 54c:	0004309c 	muleq	r4, ip, r0
 550:	00701200 	rsbseq	r1, r0, r0, lsl #4
 554:	1a022c01 	bne	8b560 <startup-0x1ff74aa0>
 558:	000002a9 	andeq	r0, r0, r9, lsr #5
 55c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 560:	00000111 	andeq	r0, r0, r1, lsl r1
 564:	06022f01 	streq	r2, [r2], -r1, lsl #30
 568:	0000002c 	andeq	r0, r0, ip, lsr #32
 56c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 570:	00030a18 	andeq	r0, r3, r8, lsl sl
 574:	02260100 	eoreq	r0, r6, #0, 2
 578:	000b7406 	andeq	r7, fp, r6, lsl #8
 57c:	00002020 	andeq	r2, r0, r0, lsr #32
 580:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
 584:	12000004 	andne	r0, r0, #4
 588:	2601006f 	strcs	r0, [r1], -pc, rrx
 58c:	02a92302 	adceq	r2, r9, #134217728	; 0x8000000
 590:	91020000 	mrsls	r0, (UNDEF: 2)
 594:	025e1774 	subseq	r1, lr, #116, 14	; 0x1d00000
 598:	26010000 	strcs	r0, [r1], -r0
 59c:	002c2a02 	eoreq	r2, ip, r2, lsl #20
 5a0:	91020000 	mrsls	r0, (UNDEF: 2)
 5a4:	02651770 	rsbeq	r1, r5, #112, 14	; 0x1c00000
 5a8:	26010000 	strcs	r0, [r1], -r0
 5ac:	002c3602 	eoreq	r3, ip, r2, lsl #12
 5b0:	91020000 	mrsls	r0, (UNDEF: 2)
 5b4:	4b16006c 	blmi	58076c <startup-0x1fa7f894>
 5b8:	01000001 	tsteq	r0, r1
 5bc:	b8060206 	stmdalt	r6, {r1, r2, r9}
 5c0:	bc20000a 	stclt	0, cr0, [r0], #-40	; 0xffffffd8
 5c4:	01000000 	mrseq	r0, (UNDEF: 0)
 5c8:	0004bc9c 	muleq	r4, ip, ip
 5cc:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 5d0:	1e020601 	cfmadd32ne	mvax0, mvfx0, mvfx2, mvfx1
 5d4:	000002a9 	andeq	r0, r0, r9, lsr #5
 5d8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 5dc:	0000010c 	andeq	r0, r0, ip, lsl #2
 5e0:	06020901 	streq	r0, [r2], -r1, lsl #18
 5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 5e8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 5ec:	00000111 	andeq	r0, r0, r1, lsl r1
 5f0:	06020a01 	streq	r0, [r2], -r1, lsl #20
 5f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 5f8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 5fc:	0002f416 	andeq	pc, r2, r6, lsl r4	; <UNPREDICTABLE>
 600:	01fc0100 	mvnseq	r0, r0, lsl #2
 604:	000a5806 	andeq	r5, sl, r6, lsl #16
 608:	00006020 	andeq	r6, r0, r0, lsr #32
 60c:	239c0100 	orrscs	r0, ip, #0, 2
 610:	12000005 	andne	r0, r0, #5
 614:	fc01006f 	stc2	0, cr0, [r1], {111}	; 0x6f
 618:	02a91f01 	adceq	r1, r9, #1, 30
 61c:	91020000 	mrsls	r0, (UNDEF: 2)
 620:	021d156c 	andseq	r1, sp, #108, 10	; 0x1b000000
 624:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
 628:	002c0601 	eoreq	r0, ip, r1, lsl #12
 62c:	91020000 	mrsls	r0, (UNDEF: 2)
 630:	0a681370 	beq	1a053f8 <startup-0x1e5fac08>
 634:	00462000 	subeq	r2, r6, r0
 638:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
 63c:	01ff0100 	mvnseq	r0, r0, lsl #2
 640:	00002c0b 	andeq	r2, r0, fp, lsl #24
 644:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 648:	000a6e13 	andeq	r6, sl, r3, lsl lr
 64c:	00003220 	andeq	r3, r0, r0, lsr #4
 650:	024a1900 	subeq	r1, sl, #0, 18
 654:	01010000 	mrseq	r0, (UNDEF: 1)
 658:	002c0302 	eoreq	r0, ip, r2, lsl #6
 65c:	001a0000 	andseq	r0, sl, r0
 660:	16000000 	strne	r0, [r0], -r0
 664:	000003c0 	andeq	r0, r0, r0, asr #7
 668:	0601ee01 	streq	lr, [r1], -r1, lsl #28
 66c:	200009c8 	andcs	r0, r0, r8, asr #19
 670:	00000090 	muleq	r0, r0, r0
 674:	05aa9c01 	streq	r9, [sl, #3073]!	; 0xc01
 678:	6f120000 	svcvs	0x00120000
 67c:	01ee0100 	mvneq	r0, r0, lsl #2
 680:	0002a91e 	andeq	sl, r2, lr, lsl r9
 684:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 688:	00021d15 	andeq	r1, r2, r5, lsl sp
 68c:	01f00100 	mvnseq	r0, r0, lsl #2
 690:	00002c06 	andeq	r2, r0, r6, lsl #24
 694:	70910200 	addsvc	r0, r1, r0, lsl #4
 698:	0009d813 	andeq	sp, r9, r3, lsl r8
 69c:	00007620 	andeq	r7, r0, r0, lsr #12
 6a0:	00691400 	rsbeq	r1, r9, r0, lsl #8
 6a4:	0b01f201 	bleq	7ceb0 <startup-0x1ff83150>
 6a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 6ac:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 6b0:	200009de 	ldrdcs	r0, [r0], -lr
 6b4:	00000062 	andeq	r0, r0, r2, rrx
 6b8:	0001da15 	andeq	sp, r1, r5, lsl sl
 6bc:	01f50100 	mvnseq	r0, r0, lsl #2
 6c0:	00002c07 	andeq	r2, r0, r7, lsl #24
 6c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 6c8:	0001e015 	andeq	lr, r1, r5, lsl r0
 6cc:	01f60100 	mvnseq	r0, r0, lsl #2
 6d0:	00002c07 	andeq	r2, r0, r7, lsl #24
 6d4:	68910200 	ldmvs	r1, {r9}
 6d8:	0002b319 	andeq	fp, r2, r9, lsl r3
 6dc:	01c00100 	biceq	r0, r0, r0, lsl #2
 6e0:	00002c04 	andeq	r2, r0, r4, lsl #24
 6e4:	00001a00 	andeq	r1, r0, r0, lsl #20
 6e8:	16160000 	ldrne	r0, [r6], -r0
 6ec:	01000001 	tsteq	r0, r1
 6f0:	400601db 	ldrdmi	r0, [r6], -fp
 6f4:	88200009 	stmdahi	r0!, {r0, r3}
 6f8:	01000000 	mrseq	r0, (UNDEF: 0)
 6fc:	00061a9c 	muleq	r6, ip, sl
 700:	011b1700 	tsteq	fp, r0, lsl #14
 704:	db010000 	blle	4070c <startup-0x1ffbf8f4>
 708:	01711e01 	cmneq	r1, r1, lsl #28
 70c:	91020000 	mrsls	r0, (UNDEF: 2)
 710:	30701454 	rsbscc	r1, r0, r4, asr r4
 714:	01dd0100 	bicseq	r0, sp, r0, lsl #2
 718:	0001650c 	andeq	r6, r1, ip, lsl #10
 71c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 720:	72747014 	rsbsvc	r7, r4, #20
 724:	01e00100 	mvneq	r0, r0, lsl #2
 728:	0001710d 	andeq	r7, r1, sp, lsl #2
 72c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 730:	00096213 	andeq	r6, r9, r3, lsl r2
 734:	00005620 	andeq	r5, r0, r0, lsr #12
 738:	31701400 	cmncc	r0, r0, lsl #8
 73c:	01e30100 	mvneq	r0, r0, lsl #2
 740:	0001650d 	andeq	r6, r1, sp, lsl #10
 744:	5c910200 	lfmpl	f0, 4, [r1], {0}
 748:	00023915 	andeq	r3, r2, r5, lsl r9
 74c:	01e60100 	mvneq	r0, r0, lsl #2
 750:	0000d308 	andeq	sp, r0, r8, lsl #6
 754:	58910200 	ldmpl	r1, {r9}
 758:	ef160000 	svc	0x00160000
 75c:	01000003 	tsteq	r0, r3
 760:	f60601cf 			; <UNDEFINED> instruction: 0xf60601cf
 764:	4a200007 	bmi	800788 <startup-0x1f7ff878>
 768:	01000001 	tsteq	r0, r1
 76c:	0006709c 	muleq	r6, ip, r0
 770:	00721200 	rsbseq	r1, r2, r0, lsl #4
 774:	1b01cf01 	blne	74380 <startup-0x1ff8bc80>
 778:	0000011c 	andeq	r0, r0, ip, lsl r1
 77c:	15549102 	ldrbne	r9, [r4, #-258]	; 0xfffffefe
 780:	00000461 	andeq	r0, r0, r1, ror #8
 784:	0801d101 	stmdaeq	r1, {r0, r8, ip, lr, pc}
 788:	000000a5 	andeq	r0, r0, r5, lsr #1
 78c:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
 790:	00646e65 	rsbeq	r6, r4, r5, ror #28
 794:	0801d201 	stmdaeq	r1, {r0, r9, ip, lr, pc}
 798:	000000a5 	andeq	r0, r0, r5, lsr #1
 79c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
 7a0:	00000239 	andeq	r0, r0, r9, lsr r2
 7a4:	0701d301 	streq	sp, [r1, -r1, lsl #6]
 7a8:	000000d3 	ldrdeq	r0, [r0], -r3
 7ac:	005c9102 	subseq	r9, ip, r2, lsl #2
 7b0:	0003d011 	andeq	sp, r3, r1, lsl r0
 7b4:	019e0100 	orrseq	r0, lr, r0, lsl #2
 7b8:	00002c05 	andeq	r2, r0, r5, lsl #24
 7bc:	00060000 	andeq	r0, r6, r0
 7c0:	0001f620 	andeq	pc, r1, r0, lsr #12
 7c4:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
 7c8:	12000007 	andne	r0, r0, #7
 7cc:	9e01006c 	cdpls	0, 0, cr0, cr1, cr12, {3}
 7d0:	00df1501 	sbcseq	r1, pc, r1, lsl #10
 7d4:	91020000 	mrsls	r0, (UNDEF: 2)
 7d8:	02d1155c 	sbcseq	r1, r1, #92, 10	; 0x17000000
 7dc:	a5010000 	strge	r0, [r1, #-0]
 7e0:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 7e4:	91020000 	mrsls	r0, (UNDEF: 2)
 7e8:	0483156f 	streq	r1, [r3], #1391	; 0x56f
 7ec:	b4010000 	strlt	r0, [r1], #-0
 7f0:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 7f4:	91020000 	mrsls	r0, (UNDEF: 2)
 7f8:	01fa1567 	mvnseq	r1, r7, ror #10
 7fc:	b5010000 	strlt	r0, [r1, #-0]
 800:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 804:	91020000 	mrsls	r0, (UNDEF: 2)
 808:	03461566 	movteq	r1, #25958	; 0x6566
 80c:	b6010000 	strlt	r0, [r1], -r0
 810:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 814:	91020000 	mrsls	r0, (UNDEF: 2)
 818:	0079146e 	rsbseq	r1, r9, lr, ror #8
 81c:	0701b701 	streq	fp, [r1, -r1, lsl #14]
 820:	0000007e 	andeq	r0, r0, lr, ror r0
 824:	156d9102 	strbne	r9, [sp, #-258]!	; 0xfffffefe
 828:	00000390 	muleq	r0, r0, r3
 82c:	0701b801 	streq	fp, [r1, -r1, lsl #16]
 830:	0000007e 	andeq	r0, r0, lr, ror r0
 834:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 838:	20000764 	andcs	r0, r0, r4, ror #14
 83c:	00000088 	andeq	r0, r0, r8, lsl #1
 840:	01007814 	tsteq	r0, r4, lsl r8
 844:	2c0b01bd 	stfcss	f0, [fp], {189}	; 0xbd
 848:	02000000 	andeq	r0, r0, #0
 84c:	761b6891 			; <UNDEFINED> instruction: 0x761b6891
 850:	10200007 	eorne	r0, r0, r7
 854:	2b000000 	blcs	85c <startup-0x1ffff7a4>
 858:	19000007 	stmdbne	r0, {r0, r1, r2}
 85c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
 860:	0401c001 	streq	ip, [r1], #-1
 864:	0000002c 	andeq	r0, r0, ip, lsr #32
 868:	1300001a 	movwne	r0, #26
 86c:	20000788 	andcs	r0, r0, r8, lsl #15
 870:	00000010 	andeq	r0, r0, r0, lsl r0
 874:	0002b319 	andeq	fp, r2, r9, lsl r3
 878:	01c00100 	biceq	r0, r0, r0, lsl #2
 87c:	00002c04 	andeq	r2, r0, r4, lsl #24
 880:	00001a00 	andeq	r1, r0, r0, lsl #20
 884:	2f180000 	svccs	0x00180000
 888:	01000003 	tsteq	r0, r3
 88c:	d4060197 	strle	r0, [r6], #-407	; 0xfffffe69
 890:	2c200005 	stccs	0, cr0, [r0], #-20	; 0xffffffec
 894:	01000000 	mrseq	r0, (UNDEF: 0)
 898:	00078a9c 	muleq	r7, ip, sl
 89c:	00611200 	rsbeq	r1, r1, r0, lsl #4
 8a0:	1a019701 	bne	664ac <startup-0x1ff99b54>
 8a4:	00000072 	andeq	r0, r0, r2, ror r0
 8a8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 8ac:	97010062 	strls	r0, [r1, -r2, rrx]
 8b0:	00722c01 	rsbseq	r2, r2, r1, lsl #24
 8b4:	91020000 	mrsls	r0, (UNDEF: 2)
 8b8:	02241568 	eoreq	r1, r4, #104, 10	; 0x1a000000
 8bc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 8c0:	00481001 	subeq	r1, r8, r1
 8c4:	91020000 	mrsls	r0, (UNDEF: 2)
 8c8:	cd160077 	ldcgt	0, cr0, [r6, #-476]	; 0xfffffe24
 8cc:	01000001 	tsteq	r0, r1
 8d0:	9206018c 	andls	r0, r6, #140, 2	; 0x23
 8d4:	42200005 	eormi	r0, r0, #5
 8d8:	01000000 	mrseq	r0, (UNDEF: 0)
 8dc:	0007ce9c 	muleq	r7, ip, lr
 8e0:	00781200 	rsbseq	r1, r8, r0, lsl #4
 8e4:	17018c01 	strne	r8, [r1, -r1, lsl #24]
 8e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 8ec:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 8f0:	8c010079 	stchi	0, cr0, [r1], {121}	; 0x79
 8f4:	002c1e01 	eoreq	r1, ip, r1, lsl #28
 8f8:	91020000 	mrsls	r0, (UNDEF: 2)
 8fc:	01441568 	cmpeq	r4, r8, ror #10
 900:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 904:	00481001 	subeq	r1, r8, r1
 908:	91020000 	mrsls	r0, (UNDEF: 2)
 90c:	9b160077 	blls	580af0 <startup-0x1fa7f510>
 910:	01000001 	tsteq	r0, r1
 914:	56060183 	strpl	r0, [r6], -r3, lsl #3
 918:	3c200005 	stccc	0, cr0, [r0], #-20	; 0xffffffec
 91c:	01000000 	mrseq	r0, (UNDEF: 0)
 920:	0007f49c 	muleq	r7, ip, r4
 924:	00631200 	rsbeq	r1, r3, r0, lsl #4
 928:	25018301 	strcs	r8, [r1, #-769]	; 0xfffffcff
 92c:	00000048 	andeq	r0, r0, r8, asr #32
 930:	00779102 	rsbseq	r9, r7, r2, lsl #2
 934:	0001c21c 	andeq	ip, r1, ip, lsl r2
 938:	017b0100 	cmneq	fp, r0, lsl #2
 93c:	00053406 	andeq	r3, r5, r6, lsl #8
 940:	00002220 	andeq	r2, r0, r0, lsr #4
 944:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 948:	0000029b 	muleq	r0, fp, r2
 94c:	06017201 	streq	r7, [r1], -r1, lsl #4
 950:	200004f8 	strdcs	r0, [r0], -r8
 954:	0000003c 	andeq	r0, r0, ip, lsr r0
 958:	082f9c01 	stmdaeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
 95c:	a1170000 	tstge	r7, r0
 960:	01000002 	tsteq	r0, r2
 964:	48220172 	stmdami	r2!, {r1, r4, r5, r6, r8}
 968:	02000000 	andeq	r0, r0, #0
 96c:	11007791 			; <UNDEFINED> instruction: 0x11007791
 970:	0000031f 	andeq	r0, r0, pc, lsl r3
 974:	0f016801 	svceq	0x00016801
 978:	00000048 	andeq	r0, r0, r8, asr #32
 97c:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
 980:	00000040 	andeq	r0, r0, r0, asr #32
 984:	085a9c01 	ldmdaeq	sl, {r0, sl, fp, ip, pc}^
 988:	72140000 	andsvc	r0, r4, #0
 98c:	6d010076 	stcvs	0, cr0, [r1, #-472]	; 0xfffffe28
 990:	00481001 	subeq	r1, r8, r1
 994:	91020000 	mrsls	r0, (UNDEF: 2)
 998:	3411006f 	ldrcc	r0, [r1], #-111	; 0xffffff91
 99c:	01000003 	tsteq	r0, r3
 9a0:	480f015e 	stmdami	pc, {r1, r2, r3, r4, r6, r8}	; <UNPREDICTABLE>
 9a4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 9a8:	40200004 	eormi	r0, r0, r4
 9ac:	01000000 	mrseq	r0, (UNDEF: 0)
 9b0:	0008859c 	muleq	r8, ip, r5
 9b4:	76721400 	ldrbtvc	r1, [r2], -r0, lsl #8
 9b8:	01630100 	cmneq	r3, r0, lsl #2
 9bc:	00004810 	andeq	r4, r0, r0, lsl r8
 9c0:	6f910200 	svcvs	0x00910200
 9c4:	01ac1100 			; <UNDEFINED> instruction: 0x01ac1100
 9c8:	54010000 	strpl	r0, [r1], #-0
 9cc:	00480f01 	subeq	r0, r8, r1, lsl #30
 9d0:	04440000 	strbeq	r0, [r4], #-0
 9d4:	00342000 	eorseq	r2, r4, r0
 9d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9dc:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
 9e0:	00767214 	rsbseq	r7, r6, r4, lsl r2
 9e4:	10015901 	andne	r5, r1, r1, lsl #18
 9e8:	00000048 	andeq	r0, r0, r8, asr #32
 9ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
 9f0:	00040c16 	andeq	r0, r4, r6, lsl ip
 9f4:	014d0100 	mrseq	r0, (UNDEF: 93)
 9f8:	00041a06 	andeq	r1, r4, r6, lsl #20
 9fc:	00002a20 	andeq	r2, r0, r0, lsr #20
 a00:	d89c0100 	ldmle	ip, {r8}
 a04:	17000008 	strne	r0, [r0, -r8]
 a08:	0000032a 	andeq	r0, r0, sl, lsr #6
 a0c:	25014d01 	strcs	r4, [r1, #-3329]	; 0xfffff2ff
 a10:	00000048 	andeq	r0, r0, r8, asr #32
 a14:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a18:	00034c16 	andeq	r4, r3, r6, lsl ip
 a1c:	01460100 	mrseq	r0, (UNDEF: 86)
 a20:	0003f006 	andeq	pc, r3, r6
 a24:	00002a20 	andeq	r2, r0, r0, lsr #20
 a28:	009c0100 	addseq	r0, ip, r0, lsl #2
 a2c:	17000009 	strne	r0, [r0, -r9]
 a30:	000002a1 	andeq	r0, r0, r1, lsr #5
 a34:	24014601 	strcs	r4, [r1], #-1537	; 0xfffff9ff
 a38:	00000048 	andeq	r0, r0, r8, asr #32
 a3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a40:	00046c16 	andeq	r6, r4, r6, lsl ip
 a44:	013b0100 	teqeq	fp, r0, lsl #2
 a48:	0003b806 	andeq	fp, r3, r6, lsl #16
 a4c:	00003820 	andeq	r3, r0, r0, lsr #16
 a50:	289c0100 	ldmcs	ip, {r8}
 a54:	17000009 	strne	r0, [r0, -r9]
 a58:	000001f5 	strdeq	r0, [r0], -r5
 a5c:	2b013b01 	blcs	4f668 <startup-0x1ffb0998>
 a60:	00000048 	andeq	r0, r0, r8, asr #32
 a64:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a68:	0003da18 	andeq	sp, r3, r8, lsl sl
 a6c:	01330100 	teqeq	r3, r0, lsl #2
 a70:	00037006 	andeq	r7, r3, r6
 a74:	00004820 	andeq	r4, r0, r0, lsr #16
 a78:	5c9c0100 	ldfpls	f0, [ip], {0}
 a7c:	12000009 	andne	r0, r0, #9
 a80:	33010078 	movwcc	r0, #4216	; 0x1078
 a84:	007e2001 	rsbseq	r2, lr, r1
 a88:	91020000 	mrsls	r0, (UNDEF: 2)
 a8c:	0063146f 	rsbeq	r1, r3, pc, ror #8
 a90:	07013501 	streq	r3, [r1, -r1, lsl #10]
 a94:	0000007e 	andeq	r0, r0, lr, ror r0
 a98:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a9c:	00044218 	andeq	r4, r4, r8, lsl r2
 aa0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
 aa4:	00033806 	andeq	r3, r3, r6, lsl #16
 aa8:	00003820 	andeq	r3, r0, r0, lsr #16
 aac:	909c0100 	addsls	r0, ip, r0, lsl #2
 ab0:	12000009 	andne	r0, r0, #9
 ab4:	2c010078 	stccs	0, cr0, [r1], {120}	; 0x78
 ab8:	007e1e01 	rsbseq	r1, lr, r1, lsl #28
 abc:	91020000 	mrsls	r0, (UNDEF: 2)
 ac0:	0063146f 	rsbeq	r1, r3, pc, ror #8
 ac4:	07012e01 	streq	r2, [r1, -r1, lsl #28]
 ac8:	0000007e 	andeq	r0, r0, lr, ror r0
 acc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ad0:	0002df11 	andeq	sp, r2, r1, lsl pc
 ad4:	01170100 	tsteq	r7, r0, lsl #2
 ad8:	0000480f 	andeq	r4, r0, pc, lsl #16
 adc:	0002d000 	andeq	sp, r2, r0
 ae0:	00006820 	andeq	r6, r0, r0, lsr #16
 ae4:	dc9c0100 	ldfles	f0, [ip], {0}
 ae8:	14000009 	strne	r0, [r0], #-9
 aec:	0079656b 	rsbseq	r6, r9, fp, ror #10
 af0:	13011a01 	movwne	r1, #6657	; 0x1a01
 af4:	000009dc 	ldrdeq	r0, [r0], -ip
 af8:	14589102 	ldrbne	r9, [r8], #-258	; 0xfffffefe
 afc:	00776f72 	rsbseq	r6, r7, r2, ror pc
 b00:	09011c01 	stmdbeq	r1, {r0, sl, fp, ip}
 b04:	0000002c 	andeq	r0, r0, ip, lsr #32
 b08:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
 b0c:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 b10:	0e011c01 	cdpeq	12, 0, cr1, cr1, cr1, {0}
 b14:	0000002c 	andeq	r0, r0, ip, lsr #32
 b18:	00689102 	rsbeq	r9, r8, r2, lsl #2
 b1c:	0000480a 	andeq	r4, r0, sl, lsl #16
 b20:	0009ec00 	andeq	lr, r9, r0, lsl #24
 b24:	00250b00 	eoreq	r0, r5, r0, lsl #22
 b28:	000f0000 	andeq	r0, pc, r0
 b2c:	0001601d 	andeq	r6, r1, sp, lsl r0
 b30:	01010100 	mrseq	r0, (UNDEF: 17)
 b34:	00002c05 	andeq	r2, r0, r5, lsl #24
 b38:	00027c00 	andeq	r7, r2, r0, lsl #24
 b3c:	00005420 	andeq	r5, r0, r0, lsr #8
 b40:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 b44:	1400000a 	strne	r0, [r0], #-10
 b48:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
 b4c:	00481301 	subeq	r1, r8, r1, lsl #6
 b50:	91020000 	mrsls	r0, (UNDEF: 2)
 b54:	3e1e0077 	mrccc	0, 0, r0, cr14, cr7, {3}
 b58:	01000002 	tsteq	r0, r2
 b5c:	022a06ef 	eoreq	r0, sl, #250609664	; 0xef00000
 b60:	00522000 	subseq	r2, r2, r0
 b64:	9c010000 	stcls	0, cr0, [r1], {-0}
 b68:	00000a3c 	andeq	r0, r0, ip, lsr sl
 b6c:	776f721f 			; <UNDEFINED> instruction: 0x776f721f
 b70:	20ef0100 	rsccs	r0, pc, r0, lsl #2
 b74:	00000025 	andeq	r0, r0, r5, lsr #32
 b78:	00749102 	rsbseq	r9, r4, r2, lsl #2
 b7c:	00027e20 	andeq	r7, r2, r0, lsr #28
 b80:	06e20100 	strbteq	r0, [r2], r0, lsl #2
 b84:	20000206 	andcs	r0, r0, r6, lsl #4
 b88:	00000024 	andeq	r0, r0, r4, lsr #32
 b8c:	0a619c01 	beq	1867b98 <startup-0x1e798468>
 b90:	6d1f0000 	ldcvs	0, cr0, [pc, #-0]	; b98 <startup-0x1ffff468>
 b94:	e2010073 	and	r0, r1, #115	; 0x73
 b98:	0000251f 	andeq	r2, r0, pc, lsl r5
 b9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 ba0:	04232000 	strteq	r2, [r3], #-0
 ba4:	d0010000 	andle	r0, r1, r0
 ba8:	0001d006 	andeq	sp, r1, r6
 bac:	00003620 	andeq	r3, r0, r0, lsr #12
 bb0:	9d9c0100 	ldflss	f0, [ip]
 bb4:	1f00000a 	svcne	0x0000000a
 bb8:	0100736d 	tsteq	r0, sp, ror #6
 bbc:	00251fd0 	ldrdeq	r1, [r5], -r0	; <UNPREDICTABLE>
 bc0:	91020000 	mrsls	r0, (UNDEF: 2)
 bc4:	01d8136c 	bicseq	r1, r8, ip, ror #6
 bc8:	00242000 	eoreq	r2, r4, r0
 bcc:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
 bd0:	0bd80100 	bleq	ff600fd8 <paddle_object+0xdf600274>
 bd4:	0000002c 	andeq	r0, r0, ip, lsr #32
 bd8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 bdc:	017e2200 	cmneq	lr, r0, lsl #4
 be0:	c5010000 	strgt	r0, [r1, #-0]
 be4:	00018c06 	andeq	r8, r1, r6, lsl #24
 be8:	00004420 	andeq	r4, r0, r0, lsr #8
 bec:	229c0100 	addscs	r0, ip, #0, 2
 bf0:	000003fe 	strdeq	r0, [r0], -lr
 bf4:	2006b601 	andcs	fp, r6, r1, lsl #12
 bf8:	6c200001 	stcvs	0, cr0, [r0], #-4
 bfc:	01000000 	mrseq	r0, (UNDEF: 0)
 c00:	0467239c 	strbteq	r2, [r7], #-924	; 0xfffffc64
 c04:	9c010000 	stcls	0, cr0, [r1], {-0}
 c08:	00007c06 	andeq	r7, r0, r6, lsl #24
 c0c:	0000a420 	andeq	sl, r0, r0, lsr #8
 c10:	219c0100 	orrscs	r0, ip, r0, lsl #2
 c14:	9e010063 	cdpls	0, 0, cr0, cr1, cr3, {3}
 c18:	00007e07 	andeq	r7, r0, r7, lsl #28
 c1c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 c20:	01007021 	tsteq	r0, r1, lsr #32
 c24:	02a90a9f 	adceq	r0, r9, #651264	; 0x9f000
 c28:	91020000 	mrsls	r0, (UNDEF: 2)
 c2c:	0072216c 	rsbseq	r2, r2, ip, ror #2
 c30:	a90aa001 	stmdbge	sl, {r0, sp, pc}
 c34:	02000002 	andeq	r0, r0, #2
 c38:	6c246891 	stcvs	8, cr6, [r4], #-580	; 0xfffffdbc
 c3c:	01000002 	tsteq	r0, r2
 c40:	002c02a2 	eoreq	r0, ip, r2, lsr #5
 c44:	0b0c0000 	bleq	300c4c <startup-0x1fcff3b4>
 c48:	001a0000 	andseq	r0, sl, r0
 c4c:	00037b25 	andeq	r7, r3, r5, lsr #22
 c50:	02a30100 	adceq	r0, r3, #0, 2
 c54:	0000002c 	andeq	r0, r0, ip, lsr #32
 c58:	0000001a 	andeq	r0, r0, sl, lsl r0
 c5c:	0000007c 	andeq	r0, r0, ip, ror r0
 c60:	034c0004 	movteq	r0, #49156	; 0xc004
 c64:	01040000 	mrseq	r0, (UNDEF: 4)
 c68:	0000003e 	andeq	r0, r0, lr, lsr r0
 c6c:	00048a0c 	andeq	r8, r4, ip, lsl #20
	...
 c7c:	0007c800 	andeq	ip, r7, r0, lsl #16
 c80:	024a0200 	subeq	r0, sl, #0, 4
 c84:	24010000 	strcs	r0, [r1], #-0
 c88:	000caa06 	andeq	sl, ip, r6, lsl #20
 c8c:	00000620 	andeq	r0, r0, r0, lsr #12
 c90:	029c0100 	addseq	r0, ip, #0, 2
 c94:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
 c98:	a4061d01 	strge	r1, [r6], #-3329	; 0xfffff2ff
 c9c:	0620000c 	strteq	r0, [r0], -ip
 ca0:	01000000 	mrseq	r0, (UNDEF: 0)
 ca4:	037b029c 	cmneq	fp, #156, 4	; 0xc0000009
 ca8:	16010000 	strne	r0, [r1], -r0
 cac:	000c9e06 	andeq	r9, ip, r6, lsl #28
 cb0:	00000620 	andeq	r0, r0, r0, lsr #12
 cb4:	029c0100 	addseq	r0, ip, #0, 2
 cb8:	0000026c 	andeq	r0, r0, ip, ror #4
 cbc:	98060f01 	stmdals	r6, {r0, r8, r9, sl, fp}
 cc0:	0620000c 	strteq	r0, [r0], -ip
 cc4:	01000000 	mrseq	r0, (UNDEF: 0)
 cc8:	0494029c 	ldreq	r0, [r4], #668	; 0x29c
 ccc:	06010000 	streq	r0, [r1], -r0
 cd0:	00000001 	andeq	r0, r0, r1
 cd4:	00000c20 	andeq	r0, r0, r0, lsr #24
 cd8:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	13490b39 	movtne	r0, #39737	; 0x9b39
  40:	00000b38 	andeq	r0, r0, r8, lsr fp
  44:	0b002405 	bleq	9060 <startup-0x1fff6fa0>
  48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  4c:	0600000e 	streq	r0, [r0], -lr
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	0013490b 	andseq	r4, r3, fp, lsl #18
  64:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050900 	andeq	r0, r5, r0, lsl #18
  84:	0b3a0803 	bleq	e82098 <startup-0x1f17df68>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	0f0a0000 	svceq	0x000a0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0b000013 	bleq	ec <startup-0x1fffff14>
  9c:	0e03012e 	adfeqsp	f0, f3, #0.5
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	110e1b0e 	tstne	lr, lr, lsl #22
  c0:	10061201 	andne	r1, r6, r1, lsl #4
  c4:	02000017 	andeq	r0, r0, #23
  c8:	0b0b0024 	bleq	2c0160 <startup-0x1fd3fea0>
  cc:	0e030b3e 	vmoveq.16	d3[0], r0
  d0:	24030000 	strcs	r0, [r3], #-0
  d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d8:	0008030b 	andeq	r0, r8, fp, lsl #6
  dc:	000f0400 	andeq	r0, pc, r0, lsl #8
  e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  e4:	13050000 	movwne	r0, #20480	; 0x5000
  e8:	3a0b0b01 	bcc	2c2cf4 <startup-0x1fd3d30c>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0803 	bleq	e8210c <startup-0x1f17def4>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	16070000 	strne	r0, [r7], -r0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0013490b 	andseq	r4, r3, fp, lsl #18
 114:	01130800 	tsteq	r3, r0, lsl #16
 118:	0b0b0e03 	bleq	2c392c <startup-0x1fd3c6d4>
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	13010b39 	movwne	r0, #6969	; 0x1b39
 124:	0d090000 	stceq	0, cr0, [r9, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 134:	0a00000b 	beq	168 <startup-0x1ffffe98>
 138:	13490101 	movtne	r0, #37121	; 0x9101
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 144:	000b2f13 	andeq	r2, fp, r3, lsl pc
 148:	01150c00 	tsteq	r5, r0, lsl #24
 14c:	13011927 	movwne	r1, #6439	; 0x1927
 150:	050d0000 	streq	r0, [sp, #-0]
 154:	00134900 	andseq	r4, r3, r0, lsl #18
 158:	00340e00 	eorseq	r0, r4, r0, lsl #28
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	0b390b3b 	bleq	e42e54 <startup-0x1f1bd1ac>
 164:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 168:	00001802 	andeq	r1, r0, r2, lsl #16
 16c:	0300340f 	movweq	r3, #1039	; 0x40f
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	002e1000 	eoreq	r1, lr, r0
 180:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	11000019 	tstne	r0, r9, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	0b39053b 	bleq	e41694 <startup-0x1f1be96c>
 1a4:	13491927 	movtne	r1, #39207	; 0x9927
 1a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b0:	00130119 	andseq	r0, r3, r9, lsl r1
 1b4:	00051200 	andeq	r1, r5, r0, lsl #4
 1b8:	0b3a0803 	bleq	e821cc <startup-0x1f17de34>
 1bc:	0b39053b 	bleq	e416b0 <startup-0x1f1be950>
 1c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c4:	0b130000 	bleq	4c01cc <startup-0x1fb3fe34>
 1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1cc:	14000006 	strne	r0, [r0], #-6
 1d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1d8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1dc:	00001802 	andeq	r1, r0, r2, lsl #16
 1e0:	03003415 	movweq	r3, #1045	; 0x415
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1ec:	00180213 	andseq	r0, r8, r3, lsl r2
 1f0:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 1f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	00130119 	andseq	r0, r3, r9, lsl r1
 20c:	00051700 	andeq	r1, r5, r0, lsl #14
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	0b39053b 	bleq	e41708 <startup-0x1f1be8f8>
 218:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 21c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 220:	03193f01 	tsteq	r9, #1, 30
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 22c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 230:	97184006 	ldrls	r4, [r8, -r6]
 234:	13011942 	movwne	r1, #6466	; 0x1942
 238:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 23c:	03193f01 	tsteq	r9, #1, 30
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 248:	00193c13 	andseq	r3, r9, r3, lsl ip
 24c:	00181a00 	andseq	r1, r8, r0, lsl #20
 250:	0b1b0000 	bleq	6c0258 <startup-0x1f93fda8>
 254:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 258:	00130106 	andseq	r0, r3, r6, lsl #2
 25c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
 260:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 268:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 26c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 270:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 274:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
 278:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 27c:	0b3a0e03 	bleq	e83a90 <startup-0x1f17c570>
 280:	0b39053b 	bleq	e41774 <startup-0x1f1be88c>
 284:	13491927 	movtne	r1, #39207	; 0x9927
 288:	06120111 			; <UNDEFINED> instruction: 0x06120111
 28c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 290:	00130119 	andseq	r0, r3, r9, lsl r1
 294:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 298:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 29c:	0b3b0b3a 	bleq	ec2f8c <startup-0x1f13d074>
 2a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2ac:	00130119 	andseq	r0, r3, r9, lsl r1
 2b0:	00051f00 	andeq	r1, r5, r0, lsl #30
 2b4:	0b3a0803 	bleq	e822c8 <startup-0x1f17dd38>
 2b8:	0b390b3b 	bleq	e42fac <startup-0x1f1bd054>
 2bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2c0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 2c4:	03193f01 	tsteq	r9, #1, 30
 2c8:	3b0b3a0e 	blcc	2ceb08 <startup-0x1fd314f8>
 2cc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d4:	96184006 	ldrls	r4, [r8], -r6
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	34210000 	strtcc	r0, [r1], #-0
 2e0:	3a080300 	bcc	200ee8 <startup-0x1fdff118>
 2e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2ec:	22000018 	andcs	r0, r0, #24
 2f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f4:	0b3a0e03 	bleq	e83b08 <startup-0x1f17c4f8>
 2f8:	0b390b3b 	bleq	e42fec <startup-0x1f1bd014>
 2fc:	01111927 	tsteq	r1, r7, lsr #18
 300:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 304:	00194297 	mulseq	r9, r7, r2
 308:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 30c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 318:	06120111 			; <UNDEFINED> instruction: 0x06120111
 31c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 320:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
 324:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 328:	0b3a0e03 	bleq	e83b3c <startup-0x1f17c4c4>
 32c:	0b390b3b 	bleq	e43020 <startup-0x1f1bcfe0>
 330:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	3f012e25 	svccc	0x00012e25
 33c:	3a0e0319 	bcc	380fa8 <startup-0x1fc7f058>
 340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 344:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 348:	00000019 	andeq	r0, r0, r9, lsl r0
 34c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 350:	030b130e 	movweq	r1, #45838	; 0xb30e
 354:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 358:	10011117 	andne	r1, r1, r7, lsl r1
 35c:	02000017 	andeq	r0, r0, #23
 360:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	0b390b3b 	bleq	e4305c <startup-0x1f1bcfa4>
 36c:	01111927 	tsteq	r1, r7, lsr #18
 370:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 374:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000006a 	andeq	r0, r0, sl, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01400002 	cmpeq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000007c 	andcs	r0, r0, ip, ror r0
  34:	00000c1a 	andeq	r0, r0, sl, lsl ip
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0c5c0002 	mrrceq	0, 0, r0, ip, cr2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000c98 	mulcs	r0, r8, ip
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000072 	andeq	r0, r0, r2, ror r0
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
  20:	00632e67 	rsbeq	r2, r3, r7, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	01160320 	tsteq	r6, r0, lsr #6
  34:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
  38:	04020010 	streq	r0, [r2], #-16
  3c:	15052001 	strne	r2, [r5, #-1]
  40:	01040200 	mrseq	r0, R12_usr
  44:	0008053c 	andeq	r0, r8, ip, lsr r5
  48:	3c010402 	cfstrscc	mvf0, [r1], {2}
  4c:	200f0522 	andcs	r0, pc, r2, lsr #10
  50:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
  54:	03052105 	movweq	r2, #20741	; 0x5105
  58:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
  5c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
  60:	11054b08 	tstne	r5, r8, lsl #22
  64:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
  68:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
  6c:	01052e08 	tsteq	r5, r8, lsl #28
  70:	00050231 	andeq	r0, r5, r1, lsr r2
  74:	074e0101 	strbeq	r0, [lr, -r1, lsl #2]
  78:	00030000 	andeq	r0, r3, r0
  7c:	0000001d 	andeq	r0, r0, sp, lsl r0
  80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  84:	0101000d 	tsteq	r1, sp
  88:	00000101 	andeq	r0, r0, r1, lsl #2
  8c:	00000100 	andeq	r0, r0, r0, lsl #2
  90:	616d0001 	cmnvs	sp, r1
  94:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
  98:	00000000 	andeq	r0, r0, r0
  9c:	00010500 	andeq	r0, r1, r0, lsl #10
  a0:	007c0205 	rsbseq	r0, ip, r5, lsl #4
  a4:	9c032000 	stcls	0, cr2, [r3], {-0}
  a8:	0a050101 	beq	1404b4 <startup-0x1febfb4c>
  ac:	02052f3e 	andeq	r2, r5, #62, 30	; 0xf8
  b0:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff189 <paddle_object+0xdfffe425>
  b4:	03053104 	movweq	r3, #20740	; 0x5104
  b8:	04053d2e 	streq	r3, [r5], #-3374	; 0xfffff2d2
  bc:	2e030567 	cfsh32cs	mvfx0, mvfx3, #55
  c0:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
  c4:	03055806 	movweq	r5, #22534	; 0x5806
  c8:	3d070522 	cfstr32cc	mvfx0, [r7, #-136]	; 0xffffff78
  cc:	05590305 	ldrbeq	r0, [r9, #-773]	; 0xfffffcfb
  d0:	0c05680d 	stceq	8, cr6, [r5], {13}
  d4:	4a04052e 	bmi	101594 <startup-0x1fefea6c>
  d8:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
  dc:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
  e0:	210e0558 	tstcs	lr, r8, asr r5
  e4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
  e8:	03054a04 	movweq	r4, #23044	; 0x5a04
  ec:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
  f0:	01052404 	tsteq	r5, r4, lsl #8
  f4:	93200a03 			; <UNDEFINED> instruction: 0x93200a03
  f8:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
  fc:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
 100:	202c0530 	eorcs	r0, ip, r0, lsr r5
 104:	592f2f05 	stmdbpl	pc!, {r0, r2, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
 108:	05673105 	strbeq	r3, [r7, #-261]!	; 0xfffffefb
 10c:	0559592f 	ldrbeq	r5, [r9, #-2351]	; 0xfffff6d1
 110:	32086801 	andcc	r6, r8, #65536	; 0x10000
 114:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 118:	0205200c 	andeq	r2, r5, #12
 11c:	200c052f 	andcs	r0, ip, pc, lsr #10
 120:	052f0205 	streq	r0, [pc, #-517]!	; ffffff23 <paddle_object+0xdffff1bf>
 124:	0205200b 	andeq	r2, r5, #11
 128:	200c052f 	andcs	r0, ip, pc, lsr #10
 12c:	052f0705 	streq	r0, [pc, #-1797]!	; fffffa2f <paddle_object+0xdfffeccb>
 130:	04020008 	streq	r0, [r2], #-8
 134:	12052001 	andne	r2, r5, #1
 138:	01040200 	mrseq	r0, R12_usr
 13c:	0007052e 	andeq	r0, r7, lr, lsr #10
 140:	3c010402 	cfstrscc	mvf0, [r1], {2}
 144:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 148:	0105200c 	tsteq	r5, ip
 14c:	0b05a12f 	bleq	168610 <startup-0x1fe979f0>
 150:	2e020551 	cfrshl32cs	mvfx2, mvfx1, r0
 154:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 158:	00220304 	eoreq	r0, r2, r4, lsl #6
 15c:	2f030402 	svccs	0x00030402
 160:	03040200 	movweq	r0, #16896	; 0x4200
 164:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 168:	1b052f03 	blne	14bd7c <startup-0x1feb4284>
 16c:	03040200 	movweq	r0, #16896	; 0x4200
 170:	00140529 	andseq	r0, r4, r9, lsr #10
 174:	3c010402 	cfstrscc	mvf0, [r1], {2}
 178:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 17c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 180:	055b4401 	ldrbeq	r4, [fp, #-1025]	; 0xfffffbff
 184:	01055102 	tsteq	r5, r2, lsl #2
 188:	05054f9f 	streq	r4, [r5, #-3999]	; 0xfffff061
 18c:	920d054f 	andls	r0, sp, #331350016	; 0x13c00000
 190:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 194:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 198:	201c0521 	andscs	r0, ip, r1, lsr #10
 19c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1a0:	1c05210d 	stfnes	f2, [r5], {13}
 1a4:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 1a8:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 1ac:	0505201c 	streq	r2, [r5, #-28]	; 0xffffffe4
 1b0:	210d052e 	tstcs	sp, lr, lsr #10
 1b4:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 1b8:	01052e05 	tsteq	r5, r5, lsl #28
 1bc:	09058524 	stmdbeq	r5, {r2, r5, r8, sl, pc}
 1c0:	20070544 	andcs	r0, r7, r4, asr #10
 1c4:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 1c8:	10054a08 	andne	r4, r5, r8, lsl #20
 1cc:	2f0c0521 	svccs	0x000c0521
 1d0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1d4:	0c052110 	stfeqs	f2, [r5], {16}
 1d8:	4a08052f 	bmi	20169c <startup-0x1fdfe964>
 1dc:	05211005 	streq	r1, [r1, #-5]!
 1e0:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
 1e4:	2110054a 	tstcs	r0, sl, asr #10
 1e8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 1ec:	05692101 	strbeq	r2, [r9, #-257]!	; 0xfffffeff
 1f0:	0c053e13 	stceq	14, cr3, [r5], {19}
 1f4:	2e050569 	cfsh32cs	mvfx0, mvfx5, #57
 1f8:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
 1fc:	0b054b14 	bleq	152e54 <startup-0x1fead1ac>
 200:	3e0d054a 	cfsh32cc	mvfx0, mvfx13, #42
 204:	053d1f05 	ldreq	r1, [sp, #-3845]!	; 0xfffff0fb
 208:	27052e1a 	smladcs	r5, sl, lr, r2
 20c:	2e220520 	cfsh64cs	mvdx0, mvdx2, #16
 210:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
 214:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 218:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
 21c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 220:	033c0104 	teqeq	ip, #4, 2
 224:	0d053c09 	stceq	12, cr3, [r5, #-36]	; 0xffffffdc
 228:	0001053d 	andeq	r0, r1, sp, lsr r5
 22c:	21010402 	tstcs	r1, r2, lsl #8
 230:	68060579 	stmdavs	r6, {r0, r3, r4, r5, r6, r8, sl}
 234:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 238:	02054b0e 	andeq	r4, r5, #14336	; 0x3800
 23c:	200e0566 	andcs	r0, lr, r6, ror #10
 240:	694b0105 	stmdbvs	fp, {r0, r2, r8}^
 244:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
 248:	08052004 	stmdaeq	r5, {r2, sp}
 24c:	9e04054b 	cfsh32ls	mvfx0, mvfx4, #43
 250:	052f0205 	streq	r0, [pc, #-517]!	; 53 <startup-0x1fffffad>
 254:	0105200e 	tsteq	r5, lr
 258:	02056967 	andeq	r6, r5, #1687552	; 0x19c000
 25c:	053d2f68 	ldreq	r2, [sp, #-3944]!	; 0xfffff098
 260:	0205200f 	andeq	r2, r5, #15
 264:	053d2f3d 	ldreq	r2, [sp, #-3901]!	; 0xfffff0c3
 268:	05692f01 	strbeq	r2, [r9, #-3841]!	; 0xfffff0ff
 26c:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 270:	4d590105 	ldfmie	f0, [r9, #-20]	; 0xffffffec
 274:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 278:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 27c:	3d02054d 	cfstr32cc	mvfx0, [r2, #-308]	; 0xfffffecc
 280:	15052f3d 	strne	r2, [r5, #-3901]	; 0xfffff0c3
 284:	2010052f 	andscs	r0, r0, pc, lsr #10
 288:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 28c:	01053d09 	tsteq	r5, r9, lsl #26
 290:	0205772f 	andeq	r7, r5, #12320768	; 0xbc0000
 294:	200d053d 	andcs	r0, sp, sp, lsr r5
 298:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 28c <startup-0x1ffffd74>
 29c:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 2a0:	0d055902 	vstreq.16	s10, [r5, #-4]	; <UNPREDICTABLE>
 2a4:	2f090520 	svccs	0x00090520
 2a8:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 2ac:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 2b0:	0205200d 	andeq	r2, r5, #13
 2b4:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 2b8:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 2bc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2c0:	01052f09 	tsteq	r5, r9, lsl #30
 2c4:	0705a12f 	streq	sl, [r5, -pc, lsr #2]
 2c8:	000a0567 	andeq	r0, sl, r7, ror #10
 2cc:	20010402 	andcs	r0, r1, r2, lsl #8
 2d0:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 2d4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2d8:	04020007 	streq	r0, [r2], #-7
 2dc:	02053c01 	andeq	r3, r5, #256	; 0x100
 2e0:	05593d30 	ldrbeq	r3, [r9, #-3376]	; 0xfffff2d0
 2e4:	054d3d01 	strbeq	r3, [sp, #-3329]	; 0xfffff2ff
 2e8:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 2ec:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 2f0:	6707053f 	smladxvs	r7, pc, r5, r0	; <UNPREDICTABLE>
 2f4:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 2f8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2fc:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 300:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 304:	01040200 	mrseq	r0, R12_usr
 308:	3002053c 	andcc	r0, r2, ip, lsr r5
 30c:	0105593d 	tsteq	r5, sp, lsr r9
 310:	1b054d3d 	blne	15380c <startup-0x1feac7f4>
 314:	2e100559 	mrccs	5, 0, r0, cr0, cr9, {2}
 318:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 31c:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 320:	9f01055a 	svcls	0x0001055a
 324:	5910054e 	ldmdbpl	r0, {r1, r2, r3, r6, r8, sl}
 328:	05590705 	ldrbeq	r0, [r9, #-1797]	; 0xfffff8fb
 32c:	052f2e05 	streq	r2, [pc, #-3589]!	; fffff52f <paddle_object+0xdfffe7cb>
 330:	054d4b01 	strbeq	r4, [sp, #-2817]	; 0xfffff4ff
 334:	13054c0c 	movwne	r4, #23564	; 0x5c0c
 338:	001b052e 	andseq	r0, fp, lr, lsr #10
 33c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 340:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 344:	002e0104 	eoreq	r0, lr, r4, lsl #2
 348:	06030402 	streq	r0, [r3], -r2, lsl #8
 34c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 350:	24052e04 	strcs	r2, [r5], #-3588	; 0xfffff1fc
 354:	06040200 	streq	r0, [r4], -r0, lsl #4
 358:	2c052006 	stccs	0, cr2, [r5], {6}
 35c:	06040200 	streq	r0, [r4], -r0, lsl #4
 360:	0033054a 	eorseq	r0, r3, sl, asr #10
 364:	2e060402 	cdpcs	4, 0, cr0, cr6, cr2, {0}
 368:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 36c:	052e0704 	streq	r0, [lr, #-1796]!	; 0xfffff8fc
 370:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 374:	02002e07 	andeq	r2, r0, #7, 28	; 0x70
 378:	2e060904 	vmlacs.f16	s0, s12, s8	; <UNPREDICTABLE>
 37c:	0a040200 	beq	100b84 <startup-0x1feff47c>
 380:	0024052e 	eoreq	r0, r4, lr, lsr #10
 384:	060c0402 	streq	r0, [ip], -r2, lsl #8
 388:	004c0520 	subeq	r0, ip, r0, lsr #10
 38c:	740c0402 	strvc	r0, [ip], #-1026	; 0xfffffbfe
 390:	02005305 	andeq	r5, r0, #335544320	; 0x14000000
 394:	052e0c04 	streq	r0, [lr, #-3076]!	; 0xfffff3fc
 398:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 39c:	53052e0d 	movwpl	r2, #24077	; 0x5e0d
 3a0:	0d040200 	sfmeq	f0, 4, [r4, #-0]
 3a4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3a8:	002e060f 	eoreq	r0, lr, pc, lsl #12
 3ac:	2e100402 	cfmulscs	mvf0, mvf0, mvf2
 3b0:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
 3b4:	20061204 	andcs	r1, r6, r4, lsl #4
 3b8:	02006d05 	andeq	r6, r0, #320	; 0x140
 3bc:	05201204 	streq	r1, [r0, #-516]!	; 0xfffffdfc
 3c0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 3c4:	7c052e12 	stcvc	14, cr2, [r5], {18}
 3c8:	13040200 	movwne	r0, #16896	; 0x4200
 3cc:	0074052e 	rsbseq	r0, r4, lr, lsr #10
 3d0:	2e130402 	cfmulscs	mvf0, mvf3, mvf2
 3d4:	15040200 	strne	r0, [r4, #-512]	; 0xfffffe00
 3d8:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 3dc:	052e1604 	streq	r1, [lr, #-1540]!	; 0xfffff9fc
 3e0:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 3e4:	05200618 	streq	r0, [r0, #-1560]!	; 0xfffff9e8
 3e8:	04020005 	streq	r0, [r2], #-5
 3ec:	0a052018 	beq	148454 <startup-0x1feb7bac>
 3f0:	320f0521 	andcc	r0, pc, #138412032	; 0x8400000
 3f4:	053c1905 	ldreq	r1, [ip, #-2309]!	; 0xfffff6fb
 3f8:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
 3fc:	3c280520 	cfstr32cc	mvfx0, [r8], #-128	; 0xffffff80
 400:	053c3205 	ldreq	r3, [ip, #-517]!	; 0xfffffdfb
 404:	1f052e2b 	svcne	0x00052e2b
 408:	3c050520 	cfstr32cc	mvfx0, [r5], {32}
 40c:	5a2f0905 	bpl	bc2828 <startup-0x1f43d7d8>
 410:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 414:	05755a03 	ldrbeq	r5, [r5, #-2563]!	; 0xfffff5fd
 418:	1505840b 	strne	r8, [r5, #-1035]	; 0xfffffbf5
 41c:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 420:	75300305 	ldrvc	r0, [r0, #-773]!	; 0xfffffcfb
 424:	05841505 	streq	r1, [r4, #1285]	; 0x505
 428:	07052e1f 	smladeq	r5, pc, lr, r2	; <UNPREDICTABLE>
 42c:	4b19052e 	blmi	6418ec <startup-0x1f9be714>
 430:	053c2305 	ldreq	r2, [ip, #-773]!	; 0xfffffcfb
 434:	10052e1c 	andne	r2, r5, ip, lsl lr
 438:	3c070520 	cfstr32cc	mvfx0, [r7], {32}
 43c:	0b054b3d 	bleq	153138 <startup-0x1feacec8>
 440:	2e15055a 	mrccs	5, 0, r0, cr5, cr10, {2}
 444:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 448:	055a2f09 	ldrbeq	r2, [sl, #-3849]	; 0xfffff0f7
 44c:	0b054b14 	bleq	1530a4 <startup-0x1feacf5c>
 450:	2002052e 	andcs	r0, r2, lr, lsr #10
 454:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
 458:	05925904 	ldreq	r5, [r2, #2308]	; 0x904
 45c:	05918309 	ldreq	r8, [r1, #777]	; 0x309
 460:	06053c11 			; <UNDEFINED> instruction: 0x06053c11
 464:	0a05303c 	beq	14c55c <startup-0x1feb3aa4>
 468:	00270591 	mlaeq	r7, r1, r5, r0
 46c:	03020402 	movweq	r0, #9218	; 0x2402
 470:	22057476 	andcs	r7, r5, #1979711488	; 0x76000000
 474:	01040200 	mrseq	r0, R12_usr
 478:	0002053c 	andeq	r0, r2, ip, lsr r5
 47c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 480:	0f030905 	svceq	0x00030905
 484:	2101053c 	tstcs	r1, ip, lsr r5
 488:	4f10054d 	svcmi	0x0010054d
 48c:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 490:	1c053c22 	stcne	12, cr3, [r5], {34}	; 0x22
 494:	2e32052e 	cdpcs	5, 3, cr0, cr2, cr14, {1}
 498:	052e3805 	streq	r3, [lr, #-2053]!	; 0xfffff7fb
 49c:	2c052e35 	stccs	14, cr2, [r5], {53}	; 0x35
 4a0:	3c49052e 	cfstr64cc	mvdx0, [r9], {46}	; 0x2e
 4a4:	052e4305 	streq	r4, [lr, #-773]!	; 0xfffffcfb
 4a8:	66052e55 			; <UNDEFINED> instruction: 0x66052e55
 4ac:	586d0566 	stmdapl	sp!, {r1, r2, r5, r6, r8, sl}^
 4b0:	054b1005 	strbeq	r1, [fp, #-5]
 4b4:	13052e16 	movwne	r2, #24086	; 0x5e16
 4b8:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 4bc:	053c2905 	ldreq	r2, [ip, #-2309]!	; 0xfffff6fb
 4c0:	39052e23 	stmdbcc	r5, {r0, r1, r5, r9, sl, fp, sp}
 4c4:	2e3f052e 	cdpcs	5, 3, cr0, cr15, cr14, {1}
 4c8:	052e3c05 	streq	r3, [lr, #-3077]!	; 0xfffff3fb
 4cc:	50052e33 	andpl	r2, r5, r3, lsr lr
 4d0:	2e56052e 	cdpcs	5, 5, cr0, cr6, cr14, {1}
 4d4:	052e5305 	streq	r5, [lr, #-773]!	; 0xfffffcfb
 4d8:	63052e4a 	movwvs	r2, #24138	; 0x5e4a
 4dc:	5874052e 	ldmdapl	r4!, {r1, r2, r3, r5, r8, sl}^
 4e0:	05587b05 	ldrbeq	r7, [r8, #-2821]	; 0xfffff4fb
 4e4:	16054b10 			; <UNDEFINED> instruction: 0x16054b10
 4e8:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
 4ec:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 4f0:	2f053c29 	svccs	0x00053c29
 4f4:	2e2c052e 	cfsh64cs	mvdx0, mvdx12, #30
 4f8:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
 4fc:	3a052e40 	bcc	14be04 <startup-0x1feb41fc>
 500:	2e50052e 	cdpcs	5, 5, cr0, cr0, cr14, {1}
 504:	052e5605 	streq	r5, [lr, #-1541]!	; 0xfffff9fb
 508:	4a052e53 	bmi	14be5c <startup-0x1feb41a4>
 50c:	2e63052e 	cdpcs	5, 6, cr0, cr3, cr14, {1}
 510:	05587405 	ldrbeq	r7, [r8, #-1029]	; 0xfffffbfb
 514:	1005587b 	andne	r5, r5, fp, ror r8
 518:	2e0a054b 	cfsh32cs	mvfx0, mvfx10, #43
 51c:	053c2205 	ldreq	r2, [ip, #-517]!	; 0xfffffdfb
 520:	25052e28 	strcs	r2, [r5, #-3624]	; 0xfffff1d8
 524:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
 528:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 52c:	49052e33 	stmdbmi	r5, {r0, r1, r4, r5, r9, sl, fp, sp}
 530:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
 534:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
 538:	6d054a66 	vstrvs	s8, [r5, #-408]	; 0xfffffe68
 53c:	4b010558 	blmi	41aa4 <startup-0x1ffbe55c>
 540:	4c10054d 	cfldr32mi	mvfx0, [r0], {77}	; 0x4d
 544:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 548:	07053d10 	smladeq	r5, r0, sp, r3
 54c:	2f0d052e 	svccs	0x000d052e
 550:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 554:	0805230d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sp}
 558:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 55c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 560:	08052f13 	stmdaeq	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 564:	3c19053c 	cfldr32cc	mvfx0, [r9], {60}	; 0x3c
 568:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 56c:	08052e21 	stmdaeq	r5, {r0, r5, r9, sl, fp, sp}
 570:	2e27052e 	cfsh64cs	mvdx0, mvdx7, #30
 574:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 578:	0c052f03 	stceq	15, cr2, [r5], {3}
 57c:	2e08054b 	cfsh32cs	mvfx0, mvfx8, #43
 580:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 584:	07052e15 	smladeq	r5, r5, lr, r2
 588:	0308052f 	movweq	r0, #34095	; 0x852f
 58c:	01053c78 	tsteq	r5, r8, ror ip
 590:	5c3c0a03 			; <UNDEFINED> instruction: 0x5c3c0a03
 594:	054b1005 	strbeq	r1, [fp, #-5]
 598:	0b052e06 	bleq	14bdb8 <startup-0x1feb4248>
 59c:	2e020530 	cfmv64hrcs	mvdx2, r0
 5a0:	02001005 	andeq	r1, r0, #5
 5a4:	05230304 	streq	r0, [r3, #-772]!	; 0xfffffcfc
 5a8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 5ac:	1a052e03 	bne	14bdc0 <startup-0x1feb4240>
 5b0:	03040200 	movweq	r0, #16896	; 0x4200
 5b4:	0024052e 	eoreq	r0, r4, lr, lsr #10
 5b8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5bc:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 5c0:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 5c4:	04020007 	streq	r0, [r2], #-7
 5c8:	10052003 	andne	r2, r5, r3
 5cc:	03040200 	movweq	r0, #16896	; 0x4200
 5d0:	001b052f 	andseq	r0, fp, pc, lsr #10
 5d4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5d8:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 5dc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 5e0:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 5e4:	27052e03 	strcs	r2, [r5, -r3, lsl #28]
 5e8:	03040200 	movweq	r0, #16896	; 0x4200
 5ec:	0007053c 	andeq	r0, r7, ip, lsr r5
 5f0:	20030402 	andcs	r0, r3, r2, lsl #8
 5f4:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 5f8:	052f0304 	streq	r0, [pc, #-772]!	; 2fc <startup-0x1ffffd04>
 5fc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 600:	20052e03 	andcs	r2, r5, r3, lsl #28
 604:	03040200 	movweq	r0, #16896	; 0x4200
 608:	002a052e 	eoreq	r0, sl, lr, lsr #10
 60c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 610:	02002d05 	andeq	r2, r0, #320	; 0x140
 614:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 618:	04020003 	streq	r0, [r2], #-3
 61c:	33052003 	movwcc	r2, #20483	; 0x5003
 620:	03040200 	movweq	r0, #16896	; 0x4200
 624:	003e0520 	eorseq	r0, lr, r0, lsr #10
 628:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 62c:	02003d05 	andeq	r3, r0, #320	; 0x140
 630:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 634:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 638:	4a052e03 	bmi	14be4c <startup-0x1feb41b4>
 63c:	03040200 	movweq	r0, #16896	; 0x4200
 640:	0003053c 	andeq	r0, r3, ip, lsr r5
 644:	20030402 	andcs	r0, r3, r2, lsl #8
 648:	02001f05 	andeq	r1, r0, #5, 30
 64c:	05450304 	strbeq	r0, [r5, #-772]	; 0xfffffcfc
 650:	04020002 	streq	r0, [r2], #-2
 654:	01053c01 	tsteq	r5, r1, lsl #24
 658:	10055b52 	andne	r5, r5, r2, asr fp
 65c:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
 660:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffb63 <paddle_object+0xdfffedff>
 664:	18052e02 	stmdane	r5, {r1, r9, sl, fp, sp}
 668:	03040200 	movweq	r0, #16896	; 0x4200
 66c:	00230522 	eoreq	r0, r3, r2, lsr #10
 670:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 674:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 678:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 67c:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 680:	2f052e03 	svccs	0x00052e03
 684:	03040200 	movweq	r0, #16896	; 0x4200
 688:	0003053c 	andeq	r0, r3, ip, lsr r5
 68c:	20030402 	andcs	r0, r3, r2, lsl #8
 690:	02003505 	andeq	r3, r0, #20971520	; 0x1400000
 694:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 698:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 69c:	3f052e03 	svccc	0x00052e03
 6a0:	03040200 	movweq	r0, #16896	; 0x4200
 6a4:	0049052e 	subeq	r0, r9, lr, lsr #10
 6a8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 6ac:	02004c05 	andeq	r4, r0, #1280	; 0x500
 6b0:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 6b4:	04020003 	streq	r0, [r2], #-3
 6b8:	1f052003 	svcne	0x00052003
 6bc:	03040200 	movweq	r0, #16896	; 0x4200
 6c0:	00020548 	andeq	r0, r2, r8, asr #10
 6c4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6c8:	5b4f0105 	blpl	13c0ae4 <startup-0x1ec3f51c>
 6cc:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 6d0:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
 6d4:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 6d8:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff8db <paddle_object+0xdfffeb77>
 6dc:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 6e0:	2f05052e 	svccs	0x0005052e
 6e4:	053f1205 	ldreq	r1, [pc, #-517]!	; 4e7 <startup-0x1ffffb19>
 6e8:	0b052e0d 	bleq	14bf24 <startup-0x1feb40dc>
 6ec:	15052f3c 	strne	r2, [r5, #-3900]	; 0xfffff0c4
 6f0:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
 6f4:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 6f8:	0d053f10 	stceq	15, cr3, [r5, #-64]	; 0xffffffc0
 6fc:	200b052e 	andcs	r0, fp, lr, lsr #10
 700:	2e15052f 	cfmul64cs	mvdx0, mvdx5, mvdx15
 704:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 708:	12053005 	andne	r3, r5, #5
 70c:	2e0d053e 	mcrcs	5, 0, r0, cr13, cr14, {1}
 710:	2f3c0b05 	svccs	0x003c0b05
 714:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 718:	05052e08 	streq	r2, [r5, #-3592]	; 0xfffff1f8
 71c:	3e100530 	cfmvr64hcc	r0, mvdx0
 720:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 724:	052f200b 	streq	r2, [pc, #-11]!	; 721 <startup-0x1ffff8df>
 728:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
 72c:	300a052e 	andcc	r0, sl, lr, lsr #10
 730:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 734:	4d4b0105 	stfmie	f0, [fp, #-20]	; 0xffffffec
 738:	3d670a05 	vstmdbcc	r7!, {s1-s5}
 73c:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 740:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 744:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
 748:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 74c:	052f0505 	streq	r0, [pc, #-1285]!	; 24f <startup-0x1ffffdb1>
 750:	04020010 	streq	r0, [r2], #-16
 754:	0b053c01 	bleq	14f760 <startup-0x1feb08a0>
 758:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 75c:	4d4b0105 	stfmie	f0, [fp, #-20]	; 0xffffffec
 760:	05591205 	ldrbeq	r1, [r9, #-517]	; 0xfffffdfb
 764:	06052e1f 			; <UNDEFINED> instruction: 0x06052e1f
 768:	3d3d2f2e 	ldccc	15, cr2, [sp, #-184]!	; 0xffffff48
 76c:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 770:	05052e06 	streq	r2, [r5, #-3590]	; 0xfffff1fa
 774:	0017052f 	andseq	r0, r7, pc, lsr #10
 778:	4a010402 	bmi	41788 <startup-0x1ffbe878>
 77c:	02004005 	andeq	r4, r0, #5
 780:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 784:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 788:	07052e02 	streq	r2, [r5, -r2, lsl #28]
 78c:	2e03053e 	mcrcs	5, 0, r0, cr3, cr14, {1}
 790:	4d680105 	stfmie	f0, [r8, #-20]!	; 0xffffffec
 794:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 798:	08052e05 	stmdaeq	r5, {r0, r2, r9, sl, fp, sp}
 79c:	5a030531 	bpl	c1c68 <startup-0x1ff3e398>
 7a0:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
 7a4:	2f09054b 	svccs	0x0009054b
 7a8:	05221705 	streq	r1, [r2, #-1797]!	; 0xfffff8fb
 7ac:	0a053c04 	beq	14f7c4 <startup-0x1feb083c>
 7b0:	2e090548 	cfsh32cs	mvfx0, mvfx9, #40
 7b4:	05320a05 	ldreq	r0, [r2, #-2565]!	; 0xfffff5fb
 7b8:	01053009 	tsteq	r5, r9
 7bc:	01040200 	mrseq	r0, R12_usr
 7c0:	02326a21 	eorseq	r6, r2, #135168	; 0x21000
 7c4:	01010003 	tsteq	r1, r3
 7c8:	0000006e 	andeq	r0, r0, lr, rrx
 7cc:	00200003 	eoreq	r0, r0, r3
 7d0:	01020000 	mrseq	r0, (UNDEF: 2)
 7d4:	000d0efb 	strdeq	r0, [sp], -fp
 7d8:	01010101 	tsteq	r1, r1, lsl #2
 7dc:	01000000 	mrseq	r0, (UNDEF: 0)
 7e0:	00010000 	andeq	r0, r1, r0
 7e4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 7e8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 7ec:	00000063 	andeq	r0, r0, r3, rrx
 7f0:	0f050000 	svceq	0x00050000
 7f4:	00020500 	andeq	r0, r2, r0, lsl #10
 7f8:	17200000 	strne	r0, [r0, -r0]!
 7fc:	21130205 	tstcs	r3, r5, lsl #4
 800:	01052f21 	tsteq	r5, r1, lsr #30
 804:	00030221 	andeq	r0, r3, r1, lsr #4
 808:	01050101 	tsteq	r5, r1, lsl #2
 80c:	98020500 	stmdals	r2, {r8, sl}
 810:	0320000c 			; <UNDEFINED> instruction: 0x0320000c
 814:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
 818:	01051321 	tsteq	r5, r1, lsr #6
 81c:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 820:	01051321 	tsteq	r5, r1, lsr #6
 824:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 828:	01051321 	tsteq	r5, r1, lsr #6
 82c:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
 830:	01051321 	tsteq	r5, r1, lsr #6
 834:	00010221 	andeq	r0, r1, r1, lsr #4
 838:	Address 0x0000000000000838 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
   4:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
   8:	72746568 	rsbsvc	r6, r4, #104, 10	; 0x1a000000
   c:	442f6e61 	strtmi	r6, [pc], #-3681	; 14 <startup-0x1fffffec>
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6f6b532f 	svcvs	0x006b532f
  1c:	4d2f616c 	stfmis	f6, [pc, #-432]!	; fffffe74 <paddle_object+0xdffff110>
  20:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffeec <paddle_object+0xdffff188>
  24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffef0 <paddle_object+0xdffff18c>
  28:	37303444 	ldrcc	r3, [r0, -r4, asr #8]!
  2c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  30:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  34:	65640030 	strbvs	r0, [r4, #-48]!	; 0xffffffd0
  38:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
  3c:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
  40:	31432055 	qdaddcc	r2, r5, r3
  44:	30312037 	eorscc	r2, r1, r7, lsr r0
  48:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  4c:	32303220 	eorscc	r3, r0, #32, 4
  50:	32383031 	eorscc	r3, r8, #49	; 0x31
  54:	72282034 	eorvc	r2, r8, #52	; 0x34
  58:	61656c65 	cmnvs	r5, r5, ror #24
  5c:	20296573 	eorcs	r6, r9, r3, ror r5
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	6f6e6d2d 	svcvs	0x006e6d2d
  6c:	616e752d 	cmnvs	lr, sp, lsr #10
  70:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
  74:	612d6465 			; <UNDEFINED> instruction: 0x612d6465
  78:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
  7c:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  80:	616f6c66 	cmnvs	pc, r6, ror #24
  84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  88:	6f733d69 	svcvs	0x00733d69
  8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  90:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  94:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  98:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  9c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  a0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  a4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  a8:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  ac:	00373175 	eorseq	r3, r7, r5, ror r1
  b0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  b4:	31646573 	smccc	18003	; 0x4653
  b8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  bc:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  c0:	755f0032 	ldrbvc	r0, [pc, #-50]	; 96 <startup-0x1fffff6a>
  c4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
  c8:	5f003364 	svcpl	0x00003364
  cc:	73756e75 	cmnvc	r5, #1872	; 0x750
  d0:	00346465 	eorseq	r6, r4, r5, ror #8
  d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  d8:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
  dc:	6f687300 	svcvs	0x00687300
  e0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f0:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
  f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
  fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 100:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 104:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 110:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 114:	72640079 	rsbvc	r0, r4, #121	; 0x79
 118:	705f7761 	subsvc	r7, pc, r1, ror #14
 11c:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 120:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 13c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 140:	00646565 	rsbeq	r6, r4, r5, ror #10
 144:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 148:	6d007373 	stcvs	3, cr7, [r0, #-460]	; 0xfffffe34
 14c:	5f65766f 	svcpl	0x0065766f
 150:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 154:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 158:	6e007463 	cdpvs	4, 0, cr7, cr0, cr3, {3}
 15c:	00747865 	rsbseq	r7, r4, r5, ror #16
 160:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 164:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 168:	6d006e6d 	stcvs	14, cr6, [r0, #-436]	; 0xfffffe4c
 16c:	0065766f 	rsbeq	r7, r5, pc, ror #12
 170:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 174:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 178:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 17c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 180:	5f79616c 	svcpl	0x0079616c
 184:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 188:	50500073 	subspl	r0, r0, r3, ror r0
 18c:	50594c4f 	subspl	r4, r9, pc, asr #24
 190:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 194:	45525000 	ldrbmi	r5, [r2, #-0]
 198:	61005443 	tstvs	r0, r3, asr #8
 19c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1a4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1a8:	00726168 	rsbseq	r6, r2, r8, ror #2
 1ac:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1b0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 1b4:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 1b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1c0:	73610072 	cmnvc	r1, #114	; 0x72
 1c4:	5f696963 	svcpl	0x00696963
 1c8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1cc:	63736100 	cmnvs	r3, #0, 2
 1d0:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 1d4:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 1d8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 1dc:	00787473 	rsbseq	r7, r8, r3, ror r4
 1e0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 1e4:	796d0079 	stmdbvc	sp!, {r0, r3, r4, r5, r6}^
 1e8:	7172695f 	cmnvc	r2, pc, asr r9
 1ec:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 1f0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 1f4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1f8:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 1fc:	7961746c 	stmdbvc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 200:	6c6f7000 	stclvs	0, cr7, [pc], #-0	; 208 <startup-0x1ffffdf8>
 204:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 208:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 20c:	61670074 	smcvs	28676	; 0x7004
 210:	766f656d 	strbtvc	r6, [pc], -sp, ror #10
 214:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
 218:	796c6c61 	stmdbvc	ip!, {r0, r5, r6, sl, fp, sp, lr}^
 21c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 220:	00736c65 	rsbseq	r6, r3, r5, ror #24
 224:	706d6574 	rsbvc	r6, sp, r4, ror r5
 228:	64617000 	strbtvs	r7, [r1], #-0
 22c:	78656c64 	stmdavc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 230:	64617000 	strbtvs	r7, [r1], #-0
 234:	79656c64 	stmdbvc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 238:	64697300 	strbtvs	r7, [r9], #-768	; 0xfffffd00
 23c:	63410065 	movtvs	r0, #4197	; 0x1065
 240:	61766974 	cmnvs	r6, r4, ror r9
 244:	6f526574 	svcvs	0x00526574
 248:	72670077 	rsbvc	r0, r7, #119	; 0x77
 24c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 250:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 254:	5f6c6578 	svcpl	0x006c6578
 258:	61656c63 	cmnvs	r5, r3, ror #24
 25c:	70730072 	rsbsvc	r0, r3, r2, ror r0
 260:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 264:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 268:	00796465 	rsbseq	r6, r9, r5, ror #8
 26c:	70617267 	rsbvc	r7, r1, r7, ror #4
 270:	5f636968 	svcpl	0x00636968
 274:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 278:	7a696c61 	bvc	1a5b404 <startup-0x1e5a4bfc>
 27c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 280:	5f79616c 	svcpl	0x0079616c
 284:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 288:	756e0069 	strbvc	r0, [lr, #-105]!	; 0xffffff97
 28c:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 290:	0073746e 	rsbseq	r7, r3, lr, ror #8
 294:	6e69616d 	powvsez	f6, f1, #5.0
 298:	6100632e 	tstvs	r0, lr, lsr #6
 29c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2a0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 12c <startup-0x1ffffed4>
 2a4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 2a8:	736f7000 	cmnvc	pc, #0
 2ac:	6f700078 	svcvs	0x00700078
 2b0:	67007973 	smlsdxvs	r0, r3, r9, r7
 2b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b8:	705f6369 	subsvc	r6, pc, r9, ror #6
 2bc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 2c0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2c4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 2c8:	6f642067 	svcvs	0x00642067
 2cc:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
 2d0:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0xfffffd00
 2d4:	50007065 	andpl	r7, r0, r5, rrx
 2d8:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 2dc:	6b005443 	blvs	153f0 <startup-0x1ffeac10>
 2e0:	00627965 	rsbeq	r7, r2, r5, ror #18
 2e4:	4e494c50 	mcrmi	12, 2, r4, cr9, cr0, {2}
 2e8:	47500045 	ldrbmi	r0, [r0, -r5, asr #32]
 2ec:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 2f0:	00595254 	subseq	r5, r9, r4, asr r2
 2f4:	61656c63 	cmnvs	r5, r3, ror #24
 2f8:	61625f72 	smcvs	9714	; 0x25f2
 2fc:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 300:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 304:	6c616200 	sfmvs	f6, 2, [r1], #-0
 308:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 30c:	61625f74 	smcvs	9716	; 0x25f4
 310:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 314:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 318:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 31c:	61006465 	tstvs	r0, r5, ror #8
 320:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 324:	6165725f 	cmnvs	r5, pc, asr r2
 328:	61645f64 	cmnvs	r4, r4, ror #30
 32c:	73006174 	movwvc	r6, #372	; 0x174
 330:	00706177 	rsbseq	r6, r0, r7, ror r1
 334:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 338:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 33c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 340:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 344:	72650073 	rsbvc	r0, r5, #115	; 0x73
 348:	00726f72 	rsbseq	r6, r2, r2, ror pc
 34c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 350:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 354:	5f657469 	svcpl	0x00657469
 358:	00646d63 	rsbeq	r6, r4, r3, ror #26
 35c:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 360:	75006563 	strvc	r6, [r0, #-1379]	; 0xfffffa9d
 364:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 368:	2064656e 	rsbcs	r6, r4, lr, ror #10
 36c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 370:	6f687300 	svcvs	0x00687300
 374:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 378:	6700746e 	strvs	r7, [r0, -lr, ror #8]
 37c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 380:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 384:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 388:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 38c:	006e6565 	rsbeq	r6, lr, r5, ror #10
 390:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 394:	61620070 	smcvs	8192	; 0x2000
 398:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 39c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 3a0:	00797274 	rsbseq	r7, r9, r4, ror r2
 3a4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 3a8:	6f6d0078 	svcvs	0x006d0078
 3ac:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 3b0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 3b4:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 3b8:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 3bc:	00797269 	rsbseq	r7, r9, r9, ror #4
 3c0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3c4:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 3c8:	6a626f6c 	bvs	189c180 <startup-0x1e763e80>
 3cc:	00746365 	rsbseq	r6, r4, r5, ror #6
 3d0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3d4:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
 3d8:	73610065 	cmnvc	r1, #101	; 0x65
 3dc:	5f696963 	svcpl	0x00696963
 3e0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 3e4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3e8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 3ec:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 3f0:	5f776172 	svcpl	0x00776172
 3f4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 3f8:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
 3fc:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
 400:	615f7469 	cmpvs	pc, r9, ror #8
 404:	74007070 	strvc	r7, [r0], #-112	; 0xffffff90
 408:	006a624f 	rsbeq	r6, sl, pc, asr #4
 40c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 410:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 414:	5f657469 	svcpl	0x00657469
 418:	61746164 	cmnvs	r4, r4, ror #2
 41c:	73657400 	cmnvc	r5, #0, 8
 420:	64003174 	strvs	r3, [r0], #-372	; 0xfffffe8c
 424:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 428:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 42c:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 430:	00776172 	rsbseq	r6, r7, r2, ror r1
 434:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 438:	6f5f656c 	svcvs	0x005f656c
 43c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 440:	73610074 	cmnvc	r1, #116	; 0x74
 444:	5f696963 	svcpl	0x00696963
 448:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 44c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 450:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 454:	7a697300 	bvc	1a5d05c <startup-0x1e5a2fa4>
 458:	73007865 	movwvc	r7, #2149	; 0x865
 45c:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 460:	61747300 	cmnvs	r4, r0, lsl #6
 464:	6d007472 	cfstrsvs	mvf7, [r0, #-456]	; 0xfffffe38
 468:	006e6961 	rsbeq	r6, lr, r1, ror #18
 46c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 470:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 474:	5f657469 	svcpl	0x00657469
 478:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 47c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 480:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 484:	61746c65 	cmnvs	r4, r5, ror #24
 488:	74730078 	ldrbtvc	r0, [r3], #-120	; 0xffffff88
 48c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 490:	00632e70 	rsbeq	r2, r3, r0, ror lr
 494:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 498:	00707574 	rsbseq	r7, r0, r4, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000050 	andcs	r0, r0, r0, asr r0
  3c:	0000002a 	andeq	r0, r0, sl, lsr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	2000007c 	andcs	r0, r0, ip, ror r0
  6c:	000000a4 	andeq	r0, r0, r4, lsr #1
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	200e4101 	andcs	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	20000120 	andcs	r0, r0, r0, lsr #2
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	2000018c 	andcs	r0, r0, ip, lsl #3
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	00000036 	andeq	r0, r0, r6, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	20000206 	andcs	r0, r0, r6, lsl #4
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	2000022a 	andcs	r0, r0, sl, lsr #4
 104:	00000052 	andeq	r0, r0, r2, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	2000027c 	andcs	r0, r0, ip, ror r2
 124:	00000054 	andeq	r0, r0, r4, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000050 	andeq	r0, r0, r0, asr r0
 140:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 14c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 150:	280e4101 	stmdacs	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	20000338 	andcs	r0, r0, r8, lsr r3
 164:	00000038 	andeq	r0, r0, r8, lsr r0
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000050 	andeq	r0, r0, r0, asr r0
 180:	20000370 	andcs	r0, r0, r0, ror r3
 184:	00000048 	andeq	r0, r0, r8, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
 1c0:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	2000041a 	andcs	r0, r0, sl, lsl r4
 1e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000050 	andeq	r0, r0, r0, asr r0
 200:	20000444 	andcs	r0, r0, r4, asr #8
 204:	00000034 	andeq	r0, r0, r4, lsr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	20000478 	andcs	r0, r0, r8, ror r4
 224:	00000040 	andeq	r0, r0, r0, asr #32
 228:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 22c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 230:	180e4101 	stmdane	lr, {r0, r8, lr}
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000050 	andeq	r0, r0, r0, asr r0
 240:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
 244:	00000040 	andeq	r0, r0, r0, asr #32
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000050 	andeq	r0, r0, r0, asr r0
 260:	200004f8 	strdcs	r0, [r0], -r8
 264:	0000003c 	andeq	r0, r0, ip, lsr r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000050 	andeq	r0, r0, r0, asr r0
 280:	20000534 	andcs	r0, r0, r4, lsr r5
 284:	00000022 	andeq	r0, r0, r2, lsr #32
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000050 	andeq	r0, r0, r0, asr r0
 29c:	20000556 	andcs	r0, r0, r6, asr r5
 2a0:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a8:	41018e02 	tstmi	r1, r2, lsl #28
 2ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b0:	00000007 	andeq	r0, r0, r7
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000050 	andeq	r0, r0, r0, asr r0
 2bc:	20000592 	mulcs	r0, r2, r5
 2c0:	00000042 	andeq	r0, r0, r2, asr #32
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000050 	andeq	r0, r0, r0, asr r0
 2dc:	200005d4 	ldrdcs	r0, [r0], -r4
 2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e8:	41018e02 	tstmi	r1, r2, lsl #28
 2ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2f0:	00000007 	andeq	r0, r0, r7
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000050 	andeq	r0, r0, r0, asr r0
 2fc:	20000600 	andcs	r0, r0, r0, lsl #12
 300:	000001f6 	strdeq	r0, [r0], -r6
 304:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 308:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 30c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	00000020 	andeq	r0, r0, r0, lsr #32
 318:	00000050 	andeq	r0, r0, r0, asr r0
 31c:	200007f6 	strdcs	r0, [r0], -r6
 320:	0000014a 	andeq	r0, r0, sl, asr #2
 324:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 328:	86048505 	strhi	r8, [r4], -r5, lsl #10
 32c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 330:	300e4101 	andcc	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	00000050 	andeq	r0, r0, r0, asr r0
 340:	20000940 	andcs	r0, r0, r0, asr #18
 344:	00000088 	andeq	r0, r0, r8, lsl #1
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 358:	00000007 	andeq	r0, r0, r7
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000050 	andeq	r0, r0, r0, asr r0
 364:	200009c8 	andcs	r0, r0, r8, asr #19
 368:	00000090 	muleq	r0, r0, r0
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000050 	andeq	r0, r0, r0, asr r0
 384:	20000a58 	andcs	r0, r0, r8, asr sl
 388:	00000060 	andeq	r0, r0, r0, rrx
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000050 	andeq	r0, r0, r0, asr r0
 3a4:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
 3a8:	000000bc 	strheq	r0, [r0], -ip
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b8:	00000007 	andeq	r0, r0, r7
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000050 	andeq	r0, r0, r0, asr r0
 3c4:	20000b74 	andcs	r0, r0, r4, ror fp
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d8:	00000007 	andeq	r0, r0, r7
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000050 	andeq	r0, r0, r0, asr r0
 3e4:	20000b94 	mulcs	r0, r4, fp
 3e8:	0000003e 	andeq	r0, r0, lr, lsr r0
 3ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f0:	41018e02 	tstmi	r1, r2, lsl #28
 3f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f8:	00000007 	andeq	r0, r0, r7
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000050 	andeq	r0, r0, r0, asr r0
 404:	20000bd2 	ldrdcs	r0, [r0], -r2
 408:	00000062 	andeq	r0, r0, r2, rrx
 40c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 410:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 414:	300e4101 	andcc	r4, lr, r1, lsl #2
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	00000020 	andeq	r0, r0, r0, lsr #32
 420:	00000050 	andeq	r0, r0, r0, asr r0
 424:	20000c34 	andcs	r0, r0, r4, lsr ip
 428:	00000058 	andeq	r0, r0, r8, asr r0
 42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 430:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 43c:	00000007 	andeq	r0, r0, r7
 440:	00000018 	andeq	r0, r0, r8, lsl r0
 444:	00000050 	andeq	r0, r0, r0, asr r0
 448:	20000c8c 	andcs	r0, r0, ip, lsl #25
 44c:	0000000a 	andeq	r0, r0, sl
 450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 454:	41018e02 	tstmi	r1, r2, lsl #28
 458:	0000070d 	andeq	r0, r0, sp, lsl #14
 45c:	0000000c 	andeq	r0, r0, ip
 460:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 464:	7c020001 	stcvc	0, cr0, [r2], {1}
 468:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 46c:	0000000c 	andeq	r0, r0, ip
 470:	0000045c 	andeq	r0, r0, ip, asr r4
 474:	20000000 	andcs	r0, r0, r0
 478:	0000000c 	andeq	r0, r0, ip
 47c:	0000000c 	andeq	r0, r0, ip
 480:	0000045c 	andeq	r0, r0, ip, asr r4
 484:	20000c98 	mulcs	r0, r8, ip
 488:	00000006 	andeq	r0, r0, r6
 48c:	0000000c 	andeq	r0, r0, ip
 490:	0000045c 	andeq	r0, r0, ip, asr r4
 494:	20000c9e 	mulcs	r0, lr, ip
 498:	00000006 	andeq	r0, r0, r6
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	0000045c 	andeq	r0, r0, ip, asr r4
 4a4:	20000ca4 	andcs	r0, r0, r4, lsr #25
 4a8:	00000006 	andeq	r0, r0, r6
 4ac:	0000000c 	andeq	r0, r0, ip
 4b0:	0000045c 	andeq	r0, r0, ip, asr r4
 4b4:	20000caa 	andcs	r0, r0, sl, lsr #25
 4b8:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000c98 	mulcs	r0, r8, ip
   4:	20000cb0 			; <UNDEFINED> instruction: 0x20000cb0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
