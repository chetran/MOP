
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 f83a 	bl	2000007c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	4b0b      	ldr	r3, [pc, #44]	; (2000004c <print_char+0x3c>)
20000020:	881b      	ldrh	r3, [r3, #0]
20000022:	b29b      	uxth	r3, r3
20000024:	001a      	movs	r2, r3
20000026:	2380      	movs	r3, #128	; 0x80
20000028:	4013      	ands	r3, r2
2000002a:	d0f8      	beq.n	2000001e <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
2000002c:	4a07      	ldr	r2, [pc, #28]	; (2000004c <print_char+0x3c>)
2000002e:	1dfb      	adds	r3, r7, #7
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b29b      	uxth	r3, r3
20000034:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	2b0a      	cmp	r3, #10
2000003c:	d102      	bne.n	20000044 <print_char+0x34>
		print_char('\r');
2000003e:	200d      	movs	r0, #13
20000040:	f7ff ffe6 	bl	20000010 <print_char>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40011000 	andmi	r1, r1, r0

20000050 <print>:

void print(char *s) {
20000050:	b580      	push	{r7, lr}
20000052:	b082      	sub	sp, #8
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000058:	e006      	b.n	20000068 <print+0x18>
		print_char(*(s++));
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	1c5a      	adds	r2, r3, #1
2000005e:	607a      	str	r2, [r7, #4]
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	0018      	movs	r0, r3
20000064:	f7ff ffd4 	bl	20000010 <print_char>
	while (*s != '\0') {
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2b00      	cmp	r3, #0
2000006e:	d1f4      	bne.n	2000005a <print+0xa>
	}
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	46bd      	mov	sp, r7
20000076:	b002      	add	sp, #8
20000078:	bd80      	pop	{r7, pc}
2000007a:	46c0      	nop			; (mov r8, r8)

2000007c <main>:
	move_paddle,
	set_ballobject_speed,
};

void main(void)
{
2000007c:	b590      	push	{r4, r7, lr}
2000007e:	b085      	sub	sp, #20
20000080:	af00      	add	r7, sp, #0
	char c;
	POBJECT p = &ballobject;
20000082:	4b2a      	ldr	r3, [pc, #168]	; (2000012c <main+0xb0>)
20000084:	60fb      	str	r3, [r7, #12]
	POBJECT r = &paddle_object;
20000086:	4b2a      	ldr	r3, [pc, #168]	; (20000130 <main+0xb4>)
20000088:	60bb      	str	r3, [r7, #8]
	init_app();
2000008a:	f000 f853 	bl	20000134 <init_app>
	graphic_initalize();
2000008e:	f000 fe2d 	bl	20000cec <graphic_initalize>
	graphic_clear_screen();
20000092:	f000 fe2e 	bl	20000cf2 <graphic_clear_screen>
	while(1)
	{
		r->move(r);
20000096:	68bb      	ldr	r3, [r7, #8]
20000098:	69db      	ldr	r3, [r3, #28]
2000009a:	68ba      	ldr	r2, [r7, #8]
2000009c:	0010      	movs	r0, r2
2000009e:	4798      	blx	r3
		bounce(r, p);
200000a0:	68fa      	ldr	r2, [r7, #12]
200000a2:	68bb      	ldr	r3, [r7, #8]
200000a4:	0011      	movs	r1, r2
200000a6:	0018      	movs	r0, r3
200000a8:	f000 fd9d 	bl	20000be6 <bounce>
		p->move(p);
200000ac:	68fb      	ldr	r3, [r7, #12]
200000ae:	69db      	ldr	r3, [r3, #28]
200000b0:	68fa      	ldr	r2, [r7, #12]
200000b2:	0010      	movs	r0, r2
200000b4:	4798      	blx	r3
		if (gameover(p))
200000b6:	68fb      	ldr	r3, [r7, #12]
200000b8:	0018      	movs	r0, r3
200000ba:	f000 fdc5 	bl	20000c48 <gameover>
200000be:	1e03      	subs	r3, r0, #0
200000c0:	d12f      	bne.n	20000122 <main+0xa6>
			break;
		delay_micro(100);
200000c2:	2064      	movs	r0, #100	; 0x64
200000c4:	f000 f88e 	bl	200001e4 <delay_micro>
		c = keyb();
200000c8:	1dfc      	adds	r4, r7, #7
200000ca:	f000 f90b 	bl	200002e4 <keyb>
200000ce:	0003      	movs	r3, r0
200000d0:	7023      	strb	r3, [r4, #0]
		switch(c)
200000d2:	1dfb      	adds	r3, r7, #7
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	2b09      	cmp	r3, #9
200000d8:	d005      	beq.n	200000e6 <main+0x6a>
200000da:	dc1a      	bgt.n	20000112 <main+0x96>
200000dc:	2b03      	cmp	r3, #3
200000de:	d009      	beq.n	200000f4 <main+0x78>
200000e0:	2b06      	cmp	r3, #6
200000e2:	d00f      	beq.n	20000104 <main+0x88>
200000e4:	e015      	b.n	20000112 <main+0x96>
		{
			case 9: r->set_speed(r, 0, 5); break;
200000e6:	68bb      	ldr	r3, [r7, #8]
200000e8:	6a1b      	ldr	r3, [r3, #32]
200000ea:	68b8      	ldr	r0, [r7, #8]
200000ec:	2205      	movs	r2, #5
200000ee:	2100      	movs	r1, #0
200000f0:	4798      	blx	r3
200000f2:	e015      	b.n	20000120 <main+0xa4>
			case 3: r->set_speed(r, 0, -5); break;
200000f4:	68bb      	ldr	r3, [r7, #8]
200000f6:	6a1b      	ldr	r3, [r3, #32]
200000f8:	2205      	movs	r2, #5
200000fa:	4252      	negs	r2, r2
200000fc:	68b8      	ldr	r0, [r7, #8]
200000fe:	2100      	movs	r1, #0
20000100:	4798      	blx	r3
20000102:	e00d      	b.n	20000120 <main+0xa4>
			case 6: resetgame(r, p); break;
20000104:	68fa      	ldr	r2, [r7, #12]
20000106:	68bb      	ldr	r3, [r7, #8]
20000108:	0011      	movs	r1, r2
2000010a:	0018      	movs	r0, r3
2000010c:	f000 fdc8 	bl	20000ca0 <resetgame>
20000110:	e006      	b.n	20000120 <main+0xa4>
			default: r->set_speed(r, 0, 0); break;
20000112:	68bb      	ldr	r3, [r7, #8]
20000114:	6a1b      	ldr	r3, [r3, #32]
20000116:	68b8      	ldr	r0, [r7, #8]
20000118:	2200      	movs	r2, #0
2000011a:	2100      	movs	r1, #0
2000011c:	4798      	blx	r3
2000011e:	46c0      	nop			; (mov r8, r8)
		r->move(r);
20000120:	e7b9      	b.n	20000096 <main+0x1a>
			break;
20000122:	46c0      	nop			; (mov r8, r8)
		}
	}
}
20000124:	46c0      	nop			; (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	b005      	add	sp, #20
2000012a:	bd90      	pop	{r4, r7, pc}
2000012c:	20000d4c 	andcs	r0, r0, ip, asr #26
20000130:	20000db8 			; <UNDEFINED> instruction: 0x20000db8

20000134 <init_app>:

void init_app(void)
{
20000134:	b580      	push	{r7, lr}
20000136:	af00      	add	r7, sp, #0
	// Need to intials the outport 
	*((unsigned long *) 0x40023830) = 0x18;
20000138:	4b11      	ldr	r3, [pc, #68]	; (20000180 <init_app+0x4c>)
2000013a:	2218      	movs	r2, #24
2000013c:	601a      	str	r2, [r3, #0]

    *((volatile unsigned int *)0x40020C08) = 0x55555555; // MEDIUM SPEED
2000013e:	4b11      	ldr	r3, [pc, #68]	; (20000184 <init_app+0x50>)
20000140:	4a11      	ldr	r2, [pc, #68]	; (20000188 <init_app+0x54>)
20000142:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) &= 0x00000000; // MODER CONFIG
20000144:	4b11      	ldr	r3, [pc, #68]	; (2000018c <init_app+0x58>)
20000146:	681b      	ldr	r3, [r3, #0]
20000148:	4b10      	ldr	r3, [pc, #64]	; (2000018c <init_app+0x58>)
2000014a:	2200      	movs	r2, #0
2000014c:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) |= 0x55005555; // MODER CONFIG
2000014e:	4b0f      	ldr	r3, [pc, #60]	; (2000018c <init_app+0x58>)
20000150:	681a      	ldr	r2, [r3, #0]
20000152:	4b0e      	ldr	r3, [pc, #56]	; (2000018c <init_app+0x58>)
20000154:	490e      	ldr	r1, [pc, #56]	; (20000190 <init_app+0x5c>)
20000156:	430a      	orrs	r2, r1
20000158:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned short *) 0x40020C04) &= 0x0000; // TYPER CONFIG
2000015a:	4b0e      	ldr	r3, [pc, #56]	; (20000194 <init_app+0x60>)
2000015c:	881b      	ldrh	r3, [r3, #0]
2000015e:	4b0d      	ldr	r3, [pc, #52]	; (20000194 <init_app+0x60>)
20000160:	2200      	movs	r2, #0
20000162:	801a      	strh	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) &= 0x00000000; // PUPDR CONFIG
20000164:	4b0c      	ldr	r3, [pc, #48]	; (20000198 <init_app+0x64>)
20000166:	681b      	ldr	r3, [r3, #0]
20000168:	4b0b      	ldr	r3, [pc, #44]	; (20000198 <init_app+0x64>)
2000016a:	2200      	movs	r2, #0
2000016c:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) |= 0x0000AAAA; // PUPDR CONFIG
2000016e:	4b0a      	ldr	r3, [pc, #40]	; (20000198 <init_app+0x64>)
20000170:	681a      	ldr	r2, [r3, #0]
20000172:	4b09      	ldr	r3, [pc, #36]	; (20000198 <init_app+0x64>)
20000174:	4909      	ldr	r1, [pc, #36]	; (2000019c <init_app+0x68>)
20000176:	430a      	orrs	r2, r1
20000178:	601a      	str	r2, [r3, #0]

}
2000017a:	46c0      	nop			; (mov r8, r8)
2000017c:	46bd      	mov	sp, r7
2000017e:	bd80      	pop	{r7, pc}
20000180:	40023830 	andmi	r3, r2, r0, lsr r8
20000184:	40020c08 	andmi	r0, r2, r8, lsl #24
20000188:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000018c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000190:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000194:	40020c04 	andmi	r0, r2, r4, lsl #24
20000198:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000019c:	0000aaaa 	andeq	sl, r0, sl, lsr #21

200001a0 <delay_250ns>:

// ------------------------------------------------------- DELAYS ------------------------------------------------------------------------------- //
void delay_250ns(void)
{
200001a0:	b580      	push	{r7, lr}
200001a2:	af00      	add	r7, sp, #0
	// page 98
	*STK_CTRL = 0; // Resets SysTick
200001a4:	4b0c      	ldr	r3, [pc, #48]	; (200001d8 <delay_250ns+0x38>)
200001a6:	2200      	movs	r2, #0
200001a8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 / 4) - 1; // Minus 1 comes from how to processor counts 
200001aa:	4b0c      	ldr	r3, [pc, #48]	; (200001dc <delay_250ns+0x3c>)
200001ac:	2229      	movs	r2, #41	; 0x29
200001ae:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0; // Resets counter register 
200001b0:	4b0b      	ldr	r3, [pc, #44]	; (200001e0 <delay_250ns+0x40>)
200001b2:	2200      	movs	r2, #0
200001b4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5; // Starts the count down 
200001b6:	4b08      	ldr	r3, [pc, #32]	; (200001d8 <delay_250ns+0x38>)
200001b8:	2205      	movs	r2, #5
200001ba:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000){} // while the countflag is 1 
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	4b06      	ldr	r3, [pc, #24]	; (200001d8 <delay_250ns+0x38>)
200001c0:	681a      	ldr	r2, [r3, #0]
200001c2:	2380      	movs	r3, #128	; 0x80
200001c4:	025b      	lsls	r3, r3, #9
200001c6:	4013      	ands	r3, r2
200001c8:	d1f9      	bne.n	200001be <delay_250ns+0x1e>
	*STK_CTRL = 0; // resets Systick 
200001ca:	4b03      	ldr	r3, [pc, #12]	; (200001d8 <delay_250ns+0x38>)
200001cc:	2200      	movs	r2, #0
200001ce:	601a      	str	r2, [r3, #0]
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	e000e010 	and	lr, r0, r0, lsl r0
200001dc:	e000e014 	and	lr, r0, r4, lsl r0
200001e0:	e000e018 	and	lr, r0, r8, lsl r0

200001e4 <delay_micro>:

void delay_micro(unsigned int ms)
{
200001e4:	b580      	push	{r7, lr}
200001e6:	b084      	sub	sp, #16
200001e8:	af00      	add	r7, sp, #0
200001ea:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	// 4 * 250 ns = 1 µs
	for (int i = 0; i < ms; i++)
200001ec:	2300      	movs	r3, #0
200001ee:	60fb      	str	r3, [r7, #12]
200001f0:	e00a      	b.n	20000208 <delay_micro+0x24>
	{
		delay_250ns();
200001f2:	f7ff ffd5 	bl	200001a0 <delay_250ns>
		delay_250ns();
200001f6:	f7ff ffd3 	bl	200001a0 <delay_250ns>
		delay_250ns();
200001fa:	f7ff ffd1 	bl	200001a0 <delay_250ns>
		delay_250ns();
200001fe:	f7ff ffcf 	bl	200001a0 <delay_250ns>
	for (int i = 0; i < ms; i++)
20000202:	68fb      	ldr	r3, [r7, #12]
20000204:	3301      	adds	r3, #1
20000206:	60fb      	str	r3, [r7, #12]
20000208:	68fb      	ldr	r3, [r7, #12]
2000020a:	687a      	ldr	r2, [r7, #4]
2000020c:	429a      	cmp	r2, r3
2000020e:	d8f0      	bhi.n	200001f2 <delay_micro+0xe>
	}

}
20000210:	46c0      	nop			; (mov r8, r8)
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	46bd      	mov	sp, r7
20000216:	b004      	add	sp, #16
20000218:	bd80      	pop	{r7, pc}

2000021a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000021a:	b580      	push	{r7, lr}
2000021c:	b082      	sub	sp, #8
2000021e:	af00      	add	r7, sp, #0
20000220:	6078      	str	r0, [r7, #4]
		ms = ms / 1000;
		ms++;
	#endif
	// 1000 µs = 1 ms 
	
	delay_micro(ms * 1000);
20000222:	687a      	ldr	r2, [r7, #4]
20000224:	0013      	movs	r3, r2
20000226:	015b      	lsls	r3, r3, #5
20000228:	1a9b      	subs	r3, r3, r2
2000022a:	009b      	lsls	r3, r3, #2
2000022c:	189b      	adds	r3, r3, r2
2000022e:	00db      	lsls	r3, r3, #3
20000230:	0018      	movs	r0, r3
20000232:	f7ff ffd7 	bl	200001e4 <delay_micro>
}
20000236:	46c0      	nop			; (mov r8, r8)
20000238:	46bd      	mov	sp, r7
2000023a:	b002      	add	sp, #8
2000023c:	bd80      	pop	{r7, pc}

2000023e <ActivateRow>:

// ------------------------------------------------------- keypad ------------------------------------------------------------------------------- //

void ActivateRow( unsigned int row )
{
2000023e:	b580      	push	{r7, lr}
20000240:	b082      	sub	sp, #8
20000242:	af00      	add	r7, sp, #0
20000244:	6078      	str	r0, [r7, #4]

    /* Aktivera angiven rad hos tangentbordet, eller

    * deaktivera samtliga */
    switch( row )
20000246:	687b      	ldr	r3, [r7, #4]
20000248:	2b04      	cmp	r3, #4
2000024a:	d819      	bhi.n	20000280 <ActivateRow+0x42>
2000024c:	687b      	ldr	r3, [r7, #4]
2000024e:	009a      	lsls	r2, r3, #2
20000250:	4b0d      	ldr	r3, [pc, #52]	; (20000288 <ActivateRow+0x4a>)
20000252:	18d3      	adds	r3, r2, r3
20000254:	681b      	ldr	r3, [r3, #0]
20000256:	469f      	mov	pc, r3
    {
    case 1: *GPIO_ODR_HIGH = 0x10; break;
20000258:	4b0c      	ldr	r3, [pc, #48]	; (2000028c <ActivateRow+0x4e>)
2000025a:	2210      	movs	r2, #16
2000025c:	701a      	strb	r2, [r3, #0]
2000025e:	e00f      	b.n	20000280 <ActivateRow+0x42>
    case 2: *GPIO_ODR_HIGH = 0x20; break;
20000260:	4b0a      	ldr	r3, [pc, #40]	; (2000028c <ActivateRow+0x4e>)
20000262:	2220      	movs	r2, #32
20000264:	701a      	strb	r2, [r3, #0]
20000266:	e00b      	b.n	20000280 <ActivateRow+0x42>
    case 3: *GPIO_ODR_HIGH = 0x40; break;
20000268:	4b08      	ldr	r3, [pc, #32]	; (2000028c <ActivateRow+0x4e>)
2000026a:	2240      	movs	r2, #64	; 0x40
2000026c:	701a      	strb	r2, [r3, #0]
2000026e:	e007      	b.n	20000280 <ActivateRow+0x42>
    case 4: *GPIO_ODR_HIGH = 0x80; break;
20000270:	4b06      	ldr	r3, [pc, #24]	; (2000028c <ActivateRow+0x4e>)
20000272:	2280      	movs	r2, #128	; 0x80
20000274:	701a      	strb	r2, [r3, #0]
20000276:	e003      	b.n	20000280 <ActivateRow+0x42>
    case 0: *GPIO_ODR_HIGH = 0x00; break;
20000278:	4b04      	ldr	r3, [pc, #16]	; (2000028c <ActivateRow+0x4e>)
2000027a:	2200      	movs	r2, #0
2000027c:	701a      	strb	r2, [r3, #0]
2000027e:	46c0      	nop			; (mov r8, r8)

    }

}
20000280:	46c0      	nop			; (mov r8, r8)
20000282:	46bd      	mov	sp, r7
20000284:	b002      	add	sp, #8
20000286:	bd80      	pop	{r7, pc}
20000288:	20000ddc 	ldrdcs	r0, [r0], -ip
2000028c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000290 <ReadColumn>:

int ReadColumn( void )
{
20000290:	b580      	push	{r7, lr}
20000292:	b082      	sub	sp, #8
20000294:	af00      	add	r7, sp, #0

    * är nedtryckt, returnera dess kolumnnummer,

    * annars, returnera 0 */
    unsigned char c;
    c = *GPIO_IDR_HIGH;
20000296:	4a12      	ldr	r2, [pc, #72]	; (200002e0 <ReadColumn+0x50>)
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	7812      	ldrb	r2, [r2, #0]
2000029c:	701a      	strb	r2, [r3, #0]
    if ( c & 0x8 )
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	2208      	movs	r2, #8
200002a4:	4013      	ands	r3, r2
200002a6:	d001      	beq.n	200002ac <ReadColumn+0x1c>
        return 4;
200002a8:	2304      	movs	r3, #4
200002aa:	e015      	b.n	200002d8 <ReadColumn+0x48>
    if ( c & 0x4 )
200002ac:	1dfb      	adds	r3, r7, #7
200002ae:	781b      	ldrb	r3, [r3, #0]
200002b0:	2204      	movs	r2, #4
200002b2:	4013      	ands	r3, r2
200002b4:	d001      	beq.n	200002ba <ReadColumn+0x2a>
        return 3;
200002b6:	2303      	movs	r3, #3
200002b8:	e00e      	b.n	200002d8 <ReadColumn+0x48>
    if ( c & 0x2 )
200002ba:	1dfb      	adds	r3, r7, #7
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	2202      	movs	r2, #2
200002c0:	4013      	ands	r3, r2
200002c2:	d001      	beq.n	200002c8 <ReadColumn+0x38>
        return 2;
200002c4:	2302      	movs	r3, #2
200002c6:	e007      	b.n	200002d8 <ReadColumn+0x48>
    if ( c & 0x1 )
200002c8:	1dfb      	adds	r3, r7, #7
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	2201      	movs	r2, #1
200002ce:	4013      	ands	r3, r2
200002d0:	d001      	beq.n	200002d6 <ReadColumn+0x46>
        return 1;
200002d2:	2301      	movs	r3, #1
200002d4:	e000      	b.n	200002d8 <ReadColumn+0x48>

    return 0;
200002d6:	2300      	movs	r3, #0
}
200002d8:	0018      	movs	r0, r3
200002da:	46bd      	mov	sp, r7
200002dc:	b002      	add	sp, #8
200002de:	bd80      	pop	{r7, pc}
200002e0:	40020c11 	andmi	r0, r2, r1, lsl ip

200002e4 <keyb>:

unsigned char keyb(void)
{
200002e4:	b590      	push	{r4, r7, lr}
200002e6:	b087      	sub	sp, #28
200002e8:	af00      	add	r7, sp, #0

    unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200002ea:	003b      	movs	r3, r7
200002ec:	4a16      	ldr	r2, [pc, #88]	; (20000348 <keyb+0x64>)
200002ee:	ca13      	ldmia	r2!, {r0, r1, r4}
200002f0:	c313      	stmia	r3!, {r0, r1, r4}
200002f2:	6812      	ldr	r2, [r2, #0]
200002f4:	601a      	str	r2, [r3, #0]

    int row, col;
    for(row=1; row <=4 ; row++ )
200002f6:	2301      	movs	r3, #1
200002f8:	617b      	str	r3, [r7, #20]
200002fa:	e019      	b.n	20000330 <keyb+0x4c>
    {
        ActivateRow( row );
200002fc:	697b      	ldr	r3, [r7, #20]
200002fe:	0018      	movs	r0, r3
20000300:	f7ff ff9d 	bl	2000023e <ActivateRow>
        if( (col = ReadColumn () ) )
20000304:	f7ff ffc4 	bl	20000290 <ReadColumn>
20000308:	0003      	movs	r3, r0
2000030a:	613b      	str	r3, [r7, #16]
2000030c:	693b      	ldr	r3, [r7, #16]
2000030e:	2b00      	cmp	r3, #0
20000310:	d00b      	beq.n	2000032a <keyb+0x46>
        {
            ActivateRow( 0 );
20000312:	2000      	movs	r0, #0
20000314:	f7ff ff93 	bl	2000023e <ActivateRow>
            return key [4*(row-1)+(col-1) ];
20000318:	697b      	ldr	r3, [r7, #20]
2000031a:	3b01      	subs	r3, #1
2000031c:	009a      	lsls	r2, r3, #2
2000031e:	693b      	ldr	r3, [r7, #16]
20000320:	3b01      	subs	r3, #1
20000322:	18d3      	adds	r3, r2, r3
20000324:	003a      	movs	r2, r7
20000326:	5cd3      	ldrb	r3, [r2, r3]
20000328:	e009      	b.n	2000033e <keyb+0x5a>
    for(row=1; row <=4 ; row++ )
2000032a:	697b      	ldr	r3, [r7, #20]
2000032c:	3301      	adds	r3, #1
2000032e:	617b      	str	r3, [r7, #20]
20000330:	697b      	ldr	r3, [r7, #20]
20000332:	2b04      	cmp	r3, #4
20000334:	dde2      	ble.n	200002fc <keyb+0x18>
        }
    }
    ActivateRow( 0 );
20000336:	2000      	movs	r0, #0
20000338:	f7ff ff81 	bl	2000023e <ActivateRow>
    return  0xFF;
2000033c:	23ff      	movs	r3, #255	; 0xff
}
2000033e:	0018      	movs	r0, r3
20000340:	46bd      	mov	sp, r7
20000342:	b007      	add	sp, #28
20000344:	bd90      	pop	{r4, r7, pc}
20000346:	46c0      	nop			; (mov r8, r8)
20000348:	20000df0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

2000034c <ascii_ctrl_bit_set>:

// ------------------------------------------------------- Ascii display ------------------------------------------------------------------------------- //
// B_SELECT is needed here to activate the ascii display
void ascii_ctrl_bit_set(char x)
{
2000034c:	b580      	push	{r7, lr}
2000034e:	b084      	sub	sp, #16
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000358:	4a09      	ldr	r2, [pc, #36]	; (20000380 <ascii_ctrl_bit_set+0x34>)
2000035a:	210f      	movs	r1, #15
2000035c:	187b      	adds	r3, r7, r1
2000035e:	7812      	ldrb	r2, [r2, #0]
20000360:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
20000362:	1dfa      	adds	r2, r7, #7
20000364:	187b      	adds	r3, r7, r1
20000366:	7812      	ldrb	r2, [r2, #0]
20000368:	781b      	ldrb	r3, [r3, #0]
2000036a:	4313      	orrs	r3, r2
2000036c:	b2db      	uxtb	r3, r3
2000036e:	4a04      	ldr	r2, [pc, #16]	; (20000380 <ascii_ctrl_bit_set+0x34>)
20000370:	2104      	movs	r1, #4
20000372:	430b      	orrs	r3, r1
20000374:	b2db      	uxtb	r3, r3
20000376:	7013      	strb	r3, [r2, #0]
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b004      	add	sp, #16
2000037e:	bd80      	pop	{r7, pc}
20000380:	40021014 	andmi	r1, r2, r4, lsl r0

20000384 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000390:	4a0d      	ldr	r2, [pc, #52]	; (200003c8 <ascii_ctrl_bit_clear+0x44>)
20000392:	210f      	movs	r1, #15
20000394:	187b      	adds	r3, r7, r1
20000396:	7812      	ldrb	r2, [r2, #0]
20000398:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000039a:	1dfb      	adds	r3, r7, #7
2000039c:	781b      	ldrb	r3, [r3, #0]
2000039e:	b25b      	sxtb	r3, r3
200003a0:	43db      	mvns	r3, r3
200003a2:	b25b      	sxtb	r3, r3
200003a4:	187a      	adds	r2, r7, r1
200003a6:	7812      	ldrb	r2, [r2, #0]
200003a8:	b252      	sxtb	r2, r2
200003aa:	4013      	ands	r3, r2
200003ac:	b25a      	sxtb	r2, r3
200003ae:	187b      	adds	r3, r7, r1
200003b0:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
200003b2:	4a05      	ldr	r2, [pc, #20]	; (200003c8 <ascii_ctrl_bit_clear+0x44>)
200003b4:	187b      	adds	r3, r7, r1
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	2104      	movs	r1, #4
200003ba:	430b      	orrs	r3, r1
200003bc:	b2db      	uxtb	r3, r3
200003be:	7013      	strb	r3, [r2, #0]
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b004      	add	sp, #16
200003c6:	bd80      	pop	{r7, pc}
200003c8:	40021014 	andmi	r1, r2, r4, lsl r0

200003cc <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
200003cc:	b580      	push	{r7, lr}
200003ce:	b082      	sub	sp, #8
200003d0:	af00      	add	r7, sp, #0
200003d2:	0002      	movs	r2, r0
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	701a      	strb	r2, [r3, #0]
	// These delays are need for the processor to execute the respective functions.
	delay_250ns(); // 40ns
200003d8:	f7ff fee2 	bl	200001a0 <delay_250ns>
	ascii_ctrl_bit_set(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff ffb5 	bl	2000034c <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
200003e2:	4a07      	ldr	r2, [pc, #28]	; (20000400 <ascii_write_controller+0x34>)
200003e4:	1dfb      	adds	r3, r7, #7
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	7013      	strb	r3, [r2, #0]
	delay_250ns(); //230ns
200003ea:	f7ff fed9 	bl	200001a0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200003ee:	2040      	movs	r0, #64	; 0x40
200003f0:	f7ff ffc8 	bl	20000384 <ascii_ctrl_bit_clear>
	delay_250ns(); // 10ns 
200003f4:	f7ff fed4 	bl	200001a0 <delay_250ns>
}
200003f8:	46c0      	nop			; (mov r8, r8)
200003fa:	46bd      	mov	sp, r7
200003fc:	b002      	add	sp, #8
200003fe:	bd80      	pop	{r7, pc}
20000400:	40021015 	andmi	r1, r2, r5, lsl r0

20000404 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000404:	b580      	push	{r7, lr}
20000406:	b082      	sub	sp, #8
20000408:	af00      	add	r7, sp, #0
2000040a:	0002      	movs	r2, r0
2000040c:	1dfb      	adds	r3, r7, #7
2000040e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000410:	2001      	movs	r0, #1
20000412:	f7ff ffb7 	bl	20000384 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000416:	2002      	movs	r0, #2
20000418:	f7ff ffb4 	bl	20000384 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000041c:	1dfb      	adds	r3, r7, #7
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	0018      	movs	r0, r3
20000422:	f7ff ffd3 	bl	200003cc <ascii_write_controller>
}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	46bd      	mov	sp, r7
2000042a:	b002      	add	sp, #8
2000042c:	bd80      	pop	{r7, pc}

2000042e <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
2000042e:	b580      	push	{r7, lr}
20000430:	b082      	sub	sp, #8
20000432:	af00      	add	r7, sp, #0
20000434:	0002      	movs	r2, r0
20000436:	1dfb      	adds	r3, r7, #7
20000438:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000043a:	2001      	movs	r0, #1
2000043c:	f7ff ff86 	bl	2000034c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000440:	2002      	movs	r0, #2
20000442:	f7ff ff9f 	bl	20000384 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000446:	1dfb      	adds	r3, r7, #7
20000448:	781b      	ldrb	r3, [r3, #0]
2000044a:	0018      	movs	r0, r3
2000044c:	f7ff ffbe 	bl	200003cc <ascii_write_controller>
}
20000450:	46c0      	nop			; (mov r8, r8)
20000452:	46bd      	mov	sp, r7
20000454:	b002      	add	sp, #8
20000456:	bd80      	pop	{r7, pc}

20000458 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000458:	b580      	push	{r7, lr}
2000045a:	b082      	sub	sp, #8
2000045c:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
2000045e:	2040      	movs	r0, #64	; 0x40
20000460:	f7ff ff74 	bl	2000034c <ascii_ctrl_bit_set>
	delay_250ns();
20000464:	f7ff fe9c 	bl	200001a0 <delay_250ns>
	delay_250ns(); // 360ns
20000468:	f7ff fe9a 	bl	200001a0 <delay_250ns>
	unsigned char rv = *portIdrHigh;
2000046c:	4a06      	ldr	r2, [pc, #24]	; (20000488 <ascii_read_controller+0x30>)
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	7812      	ldrb	r2, [r2, #0]
20000472:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000474:	2040      	movs	r0, #64	; 0x40
20000476:	f7ff ff85 	bl	20000384 <ascii_ctrl_bit_clear>
	return rv;
2000047a:	1dfb      	adds	r3, r7, #7
2000047c:	781b      	ldrb	r3, [r3, #0]
}
2000047e:	0018      	movs	r0, r3
20000480:	46bd      	mov	sp, r7
20000482:	b002      	add	sp, #8
20000484:	bd80      	pop	{r7, pc}
20000486:	46c0      	nop			; (mov r8, r8)
20000488:	40021011 	andmi	r1, r2, r1, lsl r0

2000048c <ascii_read_status>:

unsigned char ascii_read_status(void)
{
2000048c:	b590      	push	{r4, r7, lr}
2000048e:	b083      	sub	sp, #12
20000490:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
20000492:	4b0b      	ldr	r3, [pc, #44]	; (200004c0 <ascii_read_status+0x34>)
20000494:	4a0b      	ldr	r2, [pc, #44]	; (200004c4 <ascii_read_status+0x38>)
20000496:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000498:	2001      	movs	r0, #1
2000049a:	f7ff ff73 	bl	20000384 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000049e:	2002      	movs	r0, #2
200004a0:	f7ff ff54 	bl	2000034c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200004a4:	1dfc      	adds	r4, r7, #7
200004a6:	f7ff ffd7 	bl	20000458 <ascii_read_controller>
200004aa:	0003      	movs	r3, r0
200004ac:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output
200004ae:	4b04      	ldr	r3, [pc, #16]	; (200004c0 <ascii_read_status+0x34>)
200004b0:	4a05      	ldr	r2, [pc, #20]	; (200004c8 <ascii_read_status+0x3c>)
200004b2:	601a      	str	r2, [r3, #0]
	return rv;
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	781b      	ldrb	r3, [r3, #0]
}
200004b8:	0018      	movs	r0, r3
200004ba:	46bd      	mov	sp, r7
200004bc:	b003      	add	sp, #12
200004be:	bd90      	pop	{r4, r7, pc}
200004c0:	40021000 	andmi	r1, r2, r0
200004c4:	00005555 	andeq	r5, r0, r5, asr r5
200004c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004cc <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200004cc:	b590      	push	{r4, r7, lr}
200004ce:	b083      	sub	sp, #12
200004d0:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
200004d2:	4b0b      	ldr	r3, [pc, #44]	; (20000500 <ascii_read_data+0x34>)
200004d4:	4a0b      	ldr	r2, [pc, #44]	; (20000504 <ascii_read_data+0x38>)
200004d6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200004d8:	2001      	movs	r0, #1
200004da:	f7ff ff37 	bl	2000034c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200004de:	2002      	movs	r0, #2
200004e0:	f7ff ff34 	bl	2000034c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200004e4:	1dfc      	adds	r4, r7, #7
200004e6:	f7ff ffb7 	bl	20000458 <ascii_read_controller>
200004ea:	0003      	movs	r3, r0
200004ec:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output 
200004ee:	4b04      	ldr	r3, [pc, #16]	; (20000500 <ascii_read_data+0x34>)
200004f0:	4a05      	ldr	r2, [pc, #20]	; (20000508 <ascii_read_data+0x3c>)
200004f2:	601a      	str	r2, [r3, #0]
	return rv;
200004f4:	1dfb      	adds	r3, r7, #7
200004f6:	781b      	ldrb	r3, [r3, #0]
}
200004f8:	0018      	movs	r0, r3
200004fa:	46bd      	mov	sp, r7
200004fc:	b003      	add	sp, #12
200004fe:	bd90      	pop	{r4, r7, pc}
20000500:	40021000 	andmi	r1, r2, r0
20000504:	00005555 	andeq	r5, r0, r5, asr r5
20000508:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000050c <ascii_command>:

void ascii_command(unsigned char command)
{
2000050c:	b580      	push	{r7, lr}
2000050e:	b082      	sub	sp, #8
20000510:	af00      	add	r7, sp, #0
20000512:	0002      	movs	r2, r0
20000514:	1dfb      	adds	r3, r7, #7
20000516:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000518:	46c0      	nop			; (mov r8, r8)
2000051a:	f7ff ffb7 	bl	2000048c <ascii_read_status>
2000051e:	0003      	movs	r3, r0
20000520:	001a      	movs	r2, r3
20000522:	2380      	movs	r3, #128	; 0x80
20000524:	4013      	ands	r3, r2
20000526:	2b80      	cmp	r3, #128	; 0x80
20000528:	d0f7      	beq.n	2000051a <ascii_command+0xe>
	{}
	delay_micro(8);
2000052a:	2008      	movs	r0, #8
2000052c:	f7ff fe5a 	bl	200001e4 <delay_micro>
	ascii_write_cmd(command);
20000530:	1dfb      	adds	r3, r7, #7
20000532:	781b      	ldrb	r3, [r3, #0]
20000534:	0018      	movs	r0, r3
20000536:	f7ff ff65 	bl	20000404 <ascii_write_cmd>
	delay_micro(45);
2000053a:	202d      	movs	r0, #45	; 0x2d
2000053c:	f7ff fe52 	bl	200001e4 <delay_micro>
}
20000540:	46c0      	nop			; (mov r8, r8)
20000542:	46bd      	mov	sp, r7
20000544:	b002      	add	sp, #8
20000546:	bd80      	pop	{r7, pc}

20000548 <ascii_init>:

void ascii_init(void)
{
20000548:	b580      	push	{r7, lr}
2000054a:	af00      	add	r7, sp, #0
	ascii_command(0x38); // 2 rows, 5x8 
2000054c:	2038      	movs	r0, #56	; 0x38
2000054e:	f7ff ffdd 	bl	2000050c <ascii_command>
	ascii_command(0x0E); // Activate display, activate cursor and set it as constant 
20000552:	200e      	movs	r0, #14
20000554:	f7ff ffda 	bl	2000050c <ascii_command>
	ascii_command(0x01); // Clear Display
20000558:	2001      	movs	r0, #1
2000055a:	f7ff ffd7 	bl	2000050c <ascii_command>
	ascii_command(0x06); // Increment, No shift
2000055e:	2006      	movs	r0, #6
20000560:	f7ff ffd4 	bl	2000050c <ascii_command>
}
20000564:	46c0      	nop			; (mov r8, r8)
20000566:	46bd      	mov	sp, r7
20000568:	bd80      	pop	{r7, pc}

2000056a <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
2000056a:	b580      	push	{r7, lr}
2000056c:	b082      	sub	sp, #8
2000056e:	af00      	add	r7, sp, #0
20000570:	0002      	movs	r2, r0
20000572:	1dfb      	adds	r3, r7, #7
20000574:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000576:	46c0      	nop			; (mov r8, r8)
20000578:	f7ff ff88 	bl	2000048c <ascii_read_status>
2000057c:	0003      	movs	r3, r0
2000057e:	001a      	movs	r2, r3
20000580:	2380      	movs	r3, #128	; 0x80
20000582:	4013      	ands	r3, r2
20000584:	2b80      	cmp	r3, #128	; 0x80
20000586:	d0f7      	beq.n	20000578 <ascii_write_char+0xe>
	{}
	delay_micro(8);
20000588:	2008      	movs	r0, #8
2000058a:	f7ff fe2b 	bl	200001e4 <delay_micro>
	ascii_write_data(c);
2000058e:	1dfb      	adds	r3, r7, #7
20000590:	781b      	ldrb	r3, [r3, #0]
20000592:	0018      	movs	r0, r3
20000594:	f7ff ff4b 	bl	2000042e <ascii_write_data>
	delay_micro(45);
20000598:	202d      	movs	r0, #45	; 0x2d
2000059a:	f7ff fe23 	bl	200001e4 <delay_micro>
}
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	46bd      	mov	sp, r7
200005a2:	b002      	add	sp, #8
200005a4:	bd80      	pop	{r7, pc}

200005a6 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
200005a6:	b580      	push	{r7, lr}
200005a8:	b084      	sub	sp, #16
200005aa:	af00      	add	r7, sp, #0
200005ac:	6078      	str	r0, [r7, #4]
200005ae:	6039      	str	r1, [r7, #0]
	unsigned char adress = x - 1;
200005b0:	687b      	ldr	r3, [r7, #4]
200005b2:	b2da      	uxtb	r2, r3
200005b4:	210f      	movs	r1, #15
200005b6:	187b      	adds	r3, r7, r1
200005b8:	3a01      	subs	r2, #1
200005ba:	701a      	strb	r2, [r3, #0]
	if ( y == 2 )
200005bc:	683b      	ldr	r3, [r7, #0]
200005be:	2b02      	cmp	r3, #2
200005c0:	d104      	bne.n	200005cc <ascii_gotoxy+0x26>
	{
		adress = adress + 0x40;
200005c2:	187b      	adds	r3, r7, r1
200005c4:	187a      	adds	r2, r7, r1
200005c6:	7812      	ldrb	r2, [r2, #0]
200005c8:	3240      	adds	r2, #64	; 0x40
200005ca:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | adress);
200005cc:	230f      	movs	r3, #15
200005ce:	18fb      	adds	r3, r7, r3
200005d0:	781b      	ldrb	r3, [r3, #0]
200005d2:	2280      	movs	r2, #128	; 0x80
200005d4:	4252      	negs	r2, r2
200005d6:	4313      	orrs	r3, r2
200005d8:	b2db      	uxtb	r3, r3
200005da:	0018      	movs	r0, r3
200005dc:	f7ff ff12 	bl	20000404 <ascii_write_cmd>
}
200005e0:	46c0      	nop			; (mov r8, r8)
200005e2:	46bd      	mov	sp, r7
200005e4:	b004      	add	sp, #16
200005e6:	bd80      	pop	{r7, pc}

200005e8 <swap>:

// ------------------------------------------------------- LCD MODULE ------------------------------------------------------------------------------- //
void swap(unsigned char *a, unsigned char *b)
{
200005e8:	b580      	push	{r7, lr}
200005ea:	b084      	sub	sp, #16
200005ec:	af00      	add	r7, sp, #0
200005ee:	6078      	str	r0, [r7, #4]
200005f0:	6039      	str	r1, [r7, #0]
	unsigned char temp = *a;
200005f2:	210f      	movs	r1, #15
200005f4:	187b      	adds	r3, r7, r1
200005f6:	687a      	ldr	r2, [r7, #4]
200005f8:	7812      	ldrb	r2, [r2, #0]
200005fa:	701a      	strb	r2, [r3, #0]
	*a = *b;
200005fc:	683b      	ldr	r3, [r7, #0]
200005fe:	781a      	ldrb	r2, [r3, #0]
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	701a      	strb	r2, [r3, #0]
	*b = temp;
20000604:	683b      	ldr	r3, [r7, #0]
20000606:	187a      	adds	r2, r7, r1
20000608:	7812      	ldrb	r2, [r2, #0]
2000060a:	701a      	strb	r2, [r3, #0]
}
2000060c:	46c0      	nop			; (mov r8, r8)
2000060e:	46bd      	mov	sp, r7
20000610:	b004      	add	sp, #16
20000612:	bd80      	pop	{r7, pc}

20000614 <draw_line>:

int draw_line(PLINE l)
{
20000614:	b590      	push	{r4, r7, lr}
20000616:	b087      	sub	sp, #28
20000618:	af00      	add	r7, sp, #0
2000061a:	6078      	str	r0, [r7, #4]
	// This just checks so that there are no points outside of the display which is 128x64 
	if ((l->p0.x < 1 && l->p0.x > 64) | (l->p1.x < 1 && l->p1.x > 64) | (l->p0.y < 1 && l->p0.y > 128) | (l->p1.y < 1 && l->p1.y > 128))
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2b00      	cmp	r3, #0
20000622:	d105      	bne.n	20000630 <draw_line+0x1c>
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	781b      	ldrb	r3, [r3, #0]
20000628:	2b40      	cmp	r3, #64	; 0x40
2000062a:	d901      	bls.n	20000630 <draw_line+0x1c>
2000062c:	2301      	movs	r3, #1
2000062e:	e000      	b.n	20000632 <draw_line+0x1e>
20000630:	2300      	movs	r3, #0
20000632:	1c1a      	adds	r2, r3, #0
20000634:	2301      	movs	r3, #1
20000636:	4013      	ands	r3, r2
20000638:	b2da      	uxtb	r2, r3
2000063a:	687b      	ldr	r3, [r7, #4]
2000063c:	789b      	ldrb	r3, [r3, #2]
2000063e:	2b00      	cmp	r3, #0
20000640:	d105      	bne.n	2000064e <draw_line+0x3a>
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	789b      	ldrb	r3, [r3, #2]
20000646:	2b40      	cmp	r3, #64	; 0x40
20000648:	d901      	bls.n	2000064e <draw_line+0x3a>
2000064a:	2301      	movs	r3, #1
2000064c:	e000      	b.n	20000650 <draw_line+0x3c>
2000064e:	2300      	movs	r3, #0
20000650:	1c19      	adds	r1, r3, #0
20000652:	2301      	movs	r3, #1
20000654:	400b      	ands	r3, r1
20000656:	b2db      	uxtb	r3, r3
20000658:	4313      	orrs	r3, r2
2000065a:	b2db      	uxtb	r3, r3
2000065c:	001a      	movs	r2, r3
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	785b      	ldrb	r3, [r3, #1]
20000662:	2b00      	cmp	r3, #0
20000664:	d105      	bne.n	20000672 <draw_line+0x5e>
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	785b      	ldrb	r3, [r3, #1]
2000066a:	2b80      	cmp	r3, #128	; 0x80
2000066c:	d901      	bls.n	20000672 <draw_line+0x5e>
2000066e:	2301      	movs	r3, #1
20000670:	e000      	b.n	20000674 <draw_line+0x60>
20000672:	2300      	movs	r3, #0
20000674:	431a      	orrs	r2, r3
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	78db      	ldrb	r3, [r3, #3]
2000067a:	2b00      	cmp	r3, #0
2000067c:	d105      	bne.n	2000068a <draw_line+0x76>
2000067e:	687b      	ldr	r3, [r7, #4]
20000680:	78db      	ldrb	r3, [r3, #3]
20000682:	2b80      	cmp	r3, #128	; 0x80
20000684:	d901      	bls.n	2000068a <draw_line+0x76>
20000686:	2301      	movs	r3, #1
20000688:	e000      	b.n	2000068c <draw_line+0x78>
2000068a:	2300      	movs	r3, #0
2000068c:	4313      	orrs	r3, r2
2000068e:	d001      	beq.n	20000694 <draw_line+0x80>
		return 0;
20000690:	2300      	movs	r3, #0
20000692:	e0b6      	b.n	20000802 <draw_line+0x1ee>
	
	// Bresenhams Algorithm - honestly no idea how it works 
	char steep;
	if (abs(l->p0.y - l->p1.y) > abs(l->p0.x - l->p1.x))
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	785b      	ldrb	r3, [r3, #1]
20000698:	001a      	movs	r2, r3
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	78db      	ldrb	r3, [r3, #3]
2000069e:	1ad3      	subs	r3, r2, r3
200006a0:	17d9      	asrs	r1, r3, #31
200006a2:	185a      	adds	r2, r3, r1
200006a4:	404a      	eors	r2, r1
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	0019      	movs	r1, r3
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	789b      	ldrb	r3, [r3, #2]
200006b0:	1acb      	subs	r3, r1, r3
200006b2:	17d9      	asrs	r1, r3, #31
200006b4:	185b      	adds	r3, r3, r1
200006b6:	404b      	eors	r3, r1
200006b8:	429a      	cmp	r2, r3
200006ba:	dd04      	ble.n	200006c6 <draw_line+0xb2>
		steep = 1;
200006bc:	2317      	movs	r3, #23
200006be:	18fb      	adds	r3, r7, r3
200006c0:	2201      	movs	r2, #1
200006c2:	701a      	strb	r2, [r3, #0]
200006c4:	e003      	b.n	200006ce <draw_line+0xba>
	else
		steep = 0;
200006c6:	2317      	movs	r3, #23
200006c8:	18fb      	adds	r3, r7, r3
200006ca:	2200      	movs	r2, #0
200006cc:	701a      	strb	r2, [r3, #0]
	if (steep)
200006ce:	2317      	movs	r3, #23
200006d0:	18fb      	adds	r3, r7, r3
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	2b00      	cmp	r3, #0
200006d6:	d00e      	beq.n	200006f6 <draw_line+0xe2>
	{
		swap(&l->p0.x, &l->p0.y);
200006d8:	687a      	ldr	r2, [r7, #4]
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	3301      	adds	r3, #1
200006de:	0019      	movs	r1, r3
200006e0:	0010      	movs	r0, r2
200006e2:	f7ff ff81 	bl	200005e8 <swap>
		swap(&l->p1.x, &l->p1.y);
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	1c9a      	adds	r2, r3, #2
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	3303      	adds	r3, #3
200006ee:	0019      	movs	r1, r3
200006f0:	0010      	movs	r0, r2
200006f2:	f7ff ff79 	bl	200005e8 <swap>
	}
	if (l->p0.x > l->p1.x)
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	781a      	ldrb	r2, [r3, #0]
200006fa:	687b      	ldr	r3, [r7, #4]
200006fc:	789b      	ldrb	r3, [r3, #2]
200006fe:	429a      	cmp	r2, r3
20000700:	d90e      	bls.n	20000720 <draw_line+0x10c>
	{
		swap(&l->p0.x, &l->p1.x);
20000702:	687a      	ldr	r2, [r7, #4]
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	3302      	adds	r3, #2
20000708:	0019      	movs	r1, r3
2000070a:	0010      	movs	r0, r2
2000070c:	f7ff ff6c 	bl	200005e8 <swap>
		swap(&l->p0.y, &l->p1.y);
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	1c5a      	adds	r2, r3, #1
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	3303      	adds	r3, #3
20000718:	0019      	movs	r1, r3
2000071a:	0010      	movs	r0, r2
2000071c:	f7ff ff64 	bl	200005e8 <swap>
	}
	char deltax = l->p1.x - l->p0.x;
20000720:	687b      	ldr	r3, [r7, #4]
20000722:	7899      	ldrb	r1, [r3, #2]
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	781a      	ldrb	r2, [r3, #0]
20000728:	230f      	movs	r3, #15
2000072a:	18fb      	adds	r3, r7, r3
2000072c:	1a8a      	subs	r2, r1, r2
2000072e:	701a      	strb	r2, [r3, #0]
	char deltay = abs(l->p1.y - l->p0.y);
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	78db      	ldrb	r3, [r3, #3]
20000734:	001a      	movs	r2, r3
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	785b      	ldrb	r3, [r3, #1]
2000073a:	1ad3      	subs	r3, r2, r3
2000073c:	17d9      	asrs	r1, r3, #31
2000073e:	185a      	adds	r2, r3, r1
20000740:	404a      	eors	r2, r1
20000742:	230e      	movs	r3, #14
20000744:	18fb      	adds	r3, r7, r3
20000746:	701a      	strb	r2, [r3, #0]
	char error = 0;
20000748:	2316      	movs	r3, #22
2000074a:	18fb      	adds	r3, r7, r3
2000074c:	2200      	movs	r2, #0
2000074e:	701a      	strb	r2, [r3, #0]
	char y = l->p0.y;
20000750:	2315      	movs	r3, #21
20000752:	18fb      	adds	r3, r7, r3
20000754:	687a      	ldr	r2, [r7, #4]
20000756:	7852      	ldrb	r2, [r2, #1]
20000758:	701a      	strb	r2, [r3, #0]
	char ystep;
	if (l->p0.y < l->p1.y)
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	785a      	ldrb	r2, [r3, #1]
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	78db      	ldrb	r3, [r3, #3]
20000762:	429a      	cmp	r2, r3
20000764:	d204      	bcs.n	20000770 <draw_line+0x15c>
		ystep = 1;
20000766:	2314      	movs	r3, #20
20000768:	18fb      	adds	r3, r7, r3
2000076a:	2201      	movs	r2, #1
2000076c:	701a      	strb	r2, [r3, #0]
2000076e:	e003      	b.n	20000778 <draw_line+0x164>
	else
		ystep = -1;
20000770:	2314      	movs	r3, #20
20000772:	18fb      	adds	r3, r7, r3
20000774:	22ff      	movs	r2, #255	; 0xff
20000776:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	613b      	str	r3, [r7, #16]
2000077e:	e039      	b.n	200007f4 <draw_line+0x1e0>
	{
		if (steep)
20000780:	2317      	movs	r3, #23
20000782:	18fb      	adds	r3, r7, r3
20000784:	781b      	ldrb	r3, [r3, #0]
20000786:	2b00      	cmp	r3, #0
20000788:	d008      	beq.n	2000079c <draw_line+0x188>
			graphic_pixel_set(y, x);
2000078a:	2315      	movs	r3, #21
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	781b      	ldrb	r3, [r3, #0]
20000790:	693a      	ldr	r2, [r7, #16]
20000792:	0011      	movs	r1, r2
20000794:	0018      	movs	r0, r3
20000796:	f000 faaf 	bl	20000cf8 <graphic_pixel_set>
2000079a:	e007      	b.n	200007ac <draw_line+0x198>
		else
			graphic_pixel_set(x, y);
2000079c:	2315      	movs	r3, #21
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	781a      	ldrb	r2, [r3, #0]
200007a2:	693b      	ldr	r3, [r7, #16]
200007a4:	0011      	movs	r1, r2
200007a6:	0018      	movs	r0, r3
200007a8:	f000 faa6 	bl	20000cf8 <graphic_pixel_set>
		error = error + deltay;
200007ac:	2016      	movs	r0, #22
200007ae:	183b      	adds	r3, r7, r0
200007b0:	1839      	adds	r1, r7, r0
200007b2:	220e      	movs	r2, #14
200007b4:	18ba      	adds	r2, r7, r2
200007b6:	7809      	ldrb	r1, [r1, #0]
200007b8:	7812      	ldrb	r2, [r2, #0]
200007ba:	188a      	adds	r2, r1, r2
200007bc:	701a      	strb	r2, [r3, #0]
		if (2 * error >= deltax)
200007be:	183b      	adds	r3, r7, r0
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	005a      	lsls	r2, r3, #1
200007c4:	240f      	movs	r4, #15
200007c6:	193b      	adds	r3, r7, r4
200007c8:	781b      	ldrb	r3, [r3, #0]
200007ca:	429a      	cmp	r2, r3
200007cc:	db0f      	blt.n	200007ee <draw_line+0x1da>
		{
			y = y +ystep;
200007ce:	2215      	movs	r2, #21
200007d0:	18bb      	adds	r3, r7, r2
200007d2:	18b9      	adds	r1, r7, r2
200007d4:	2214      	movs	r2, #20
200007d6:	18ba      	adds	r2, r7, r2
200007d8:	7809      	ldrb	r1, [r1, #0]
200007da:	7812      	ldrb	r2, [r2, #0]
200007dc:	188a      	adds	r2, r1, r2
200007de:	701a      	strb	r2, [r3, #0]
			error = error - deltax;
200007e0:	183b      	adds	r3, r7, r0
200007e2:	1839      	adds	r1, r7, r0
200007e4:	193a      	adds	r2, r7, r4
200007e6:	7809      	ldrb	r1, [r1, #0]
200007e8:	7812      	ldrb	r2, [r2, #0]
200007ea:	1a8a      	subs	r2, r1, r2
200007ec:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
200007ee:	693b      	ldr	r3, [r7, #16]
200007f0:	3301      	adds	r3, #1
200007f2:	613b      	str	r3, [r7, #16]
200007f4:	687b      	ldr	r3, [r7, #4]
200007f6:	789b      	ldrb	r3, [r3, #2]
200007f8:	001a      	movs	r2, r3
200007fa:	693b      	ldr	r3, [r7, #16]
200007fc:	4293      	cmp	r3, r2
200007fe:	ddbf      	ble.n	20000780 <draw_line+0x16c>
		}
	}

	// Returns 1 if it succeded
	return 1;
20000800:	2301      	movs	r3, #1
}
20000802:	0018      	movs	r0, r3
20000804:	46bd      	mov	sp, r7
20000806:	b007      	add	sp, #28
20000808:	bd90      	pop	{r4, r7, pc}

2000080a <draw_rectangle>:

void draw_rectangle(PRECT r)
{
2000080a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000080c:	b087      	sub	sp, #28
2000080e:	af00      	add	r7, sp, #0
20000810:	6078      	str	r0, [r7, #4]
	POINT start;
	POINT end;
	LINE side;
	// Honestly would never write code like this but in the book it looked like this. 
	start.x = r->p.x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
20000812:	687b      	ldr	r3, [r7, #4]
20000814:	781a      	ldrb	r2, [r3, #0]
20000816:	2114      	movs	r1, #20
20000818:	187b      	adds	r3, r7, r1
2000081a:	701a      	strb	r2, [r3, #0]
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	785a      	ldrb	r2, [r3, #1]
20000820:	187b      	adds	r3, r7, r1
20000822:	705a      	strb	r2, [r3, #1]
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	781a      	ldrb	r2, [r3, #0]
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	789b      	ldrb	r3, [r3, #2]
2000082c:	18d3      	adds	r3, r2, r3
2000082e:	b2da      	uxtb	r2, r3
20000830:	2510      	movs	r5, #16
20000832:	197b      	adds	r3, r7, r5
20000834:	701a      	strb	r2, [r3, #0]
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	785a      	ldrb	r2, [r3, #1]
2000083a:	197b      	adds	r3, r7, r5
2000083c:	705a      	strb	r2, [r3, #1]
2000083e:	260c      	movs	r6, #12
20000840:	19bb      	adds	r3, r7, r6
20000842:	000c      	movs	r4, r1
20000844:	187a      	adds	r2, r7, r1
20000846:	8812      	ldrh	r2, [r2, #0]
20000848:	801a      	strh	r2, [r3, #0]
2000084a:	19bb      	adds	r3, r7, r6
2000084c:	2102      	movs	r1, #2
2000084e:	197a      	adds	r2, r7, r5
20000850:	8812      	ldrh	r2, [r2, #0]
20000852:	525a      	strh	r2, [r3, r1]
20000854:	19bb      	adds	r3, r7, r6
20000856:	0018      	movs	r0, r3
20000858:	f7ff fedc 	bl	20000614 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	781a      	ldrb	r2, [r3, #0]
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	789b      	ldrb	r3, [r3, #2]
20000864:	18d3      	adds	r3, r2, r3
20000866:	b2da      	uxtb	r2, r3
20000868:	0021      	movs	r1, r4
2000086a:	187b      	adds	r3, r7, r1
2000086c:	701a      	strb	r2, [r3, #0]
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	785a      	ldrb	r2, [r3, #1]
20000872:	187b      	adds	r3, r7, r1
20000874:	705a      	strb	r2, [r3, #1]
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	781a      	ldrb	r2, [r3, #0]
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	789b      	ldrb	r3, [r3, #2]
2000087e:	18d3      	adds	r3, r2, r3
20000880:	b2da      	uxtb	r2, r3
20000882:	197b      	adds	r3, r7, r5
20000884:	701a      	strb	r2, [r3, #0]
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	785a      	ldrb	r2, [r3, #1]
2000088a:	687b      	ldr	r3, [r7, #4]
2000088c:	78db      	ldrb	r3, [r3, #3]
2000088e:	18d3      	adds	r3, r2, r3
20000890:	b2da      	uxtb	r2, r3
20000892:	197b      	adds	r3, r7, r5
20000894:	705a      	strb	r2, [r3, #1]
20000896:	19bb      	adds	r3, r7, r6
20000898:	000c      	movs	r4, r1
2000089a:	187a      	adds	r2, r7, r1
2000089c:	8812      	ldrh	r2, [r2, #0]
2000089e:	801a      	strh	r2, [r3, #0]
200008a0:	19bb      	adds	r3, r7, r6
200008a2:	2102      	movs	r1, #2
200008a4:	197a      	adds	r2, r7, r5
200008a6:	8812      	ldrh	r2, [r2, #0]
200008a8:	525a      	strh	r2, [r3, r1]
200008aa:	19bb      	adds	r3, r7, r6
200008ac:	0018      	movs	r0, r3
200008ae:	f7ff feb1 	bl	20000614 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	781a      	ldrb	r2, [r3, #0]
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	789b      	ldrb	r3, [r3, #2]
200008ba:	18d3      	adds	r3, r2, r3
200008bc:	b2da      	uxtb	r2, r3
200008be:	0021      	movs	r1, r4
200008c0:	187b      	adds	r3, r7, r1
200008c2:	701a      	strb	r2, [r3, #0]
200008c4:	687b      	ldr	r3, [r7, #4]
200008c6:	785a      	ldrb	r2, [r3, #1]
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	78db      	ldrb	r3, [r3, #3]
200008cc:	18d3      	adds	r3, r2, r3
200008ce:	b2da      	uxtb	r2, r3
200008d0:	187b      	adds	r3, r7, r1
200008d2:	705a      	strb	r2, [r3, #1]
200008d4:	687b      	ldr	r3, [r7, #4]
200008d6:	781a      	ldrb	r2, [r3, #0]
200008d8:	197b      	adds	r3, r7, r5
200008da:	701a      	strb	r2, [r3, #0]
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	785a      	ldrb	r2, [r3, #1]
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	78db      	ldrb	r3, [r3, #3]
200008e4:	18d3      	adds	r3, r2, r3
200008e6:	b2da      	uxtb	r2, r3
200008e8:	197b      	adds	r3, r7, r5
200008ea:	705a      	strb	r2, [r3, #1]
200008ec:	19bb      	adds	r3, r7, r6
200008ee:	000c      	movs	r4, r1
200008f0:	187a      	adds	r2, r7, r1
200008f2:	8812      	ldrh	r2, [r2, #0]
200008f4:	801a      	strh	r2, [r3, #0]
200008f6:	19bb      	adds	r3, r7, r6
200008f8:	2102      	movs	r1, #2
200008fa:	197a      	adds	r2, r7, r5
200008fc:	8812      	ldrh	r2, [r2, #0]
200008fe:	525a      	strh	r2, [r3, r1]
20000900:	19bb      	adds	r3, r7, r6
20000902:	0018      	movs	r0, r3
20000904:	f7ff fe86 	bl	20000614 <draw_line>
	start.x = r->p.x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	781a      	ldrb	r2, [r3, #0]
2000090c:	0021      	movs	r1, r4
2000090e:	187b      	adds	r3, r7, r1
20000910:	701a      	strb	r2, [r3, #0]
20000912:	687b      	ldr	r3, [r7, #4]
20000914:	785a      	ldrb	r2, [r3, #1]
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	78db      	ldrb	r3, [r3, #3]
2000091a:	18d3      	adds	r3, r2, r3
2000091c:	b2da      	uxtb	r2, r3
2000091e:	187b      	adds	r3, r7, r1
20000920:	705a      	strb	r2, [r3, #1]
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	781a      	ldrb	r2, [r3, #0]
20000926:	197b      	adds	r3, r7, r5
20000928:	701a      	strb	r2, [r3, #0]
2000092a:	687b      	ldr	r3, [r7, #4]
2000092c:	785a      	ldrb	r2, [r3, #1]
2000092e:	197b      	adds	r3, r7, r5
20000930:	705a      	strb	r2, [r3, #1]
20000932:	19bb      	adds	r3, r7, r6
20000934:	187a      	adds	r2, r7, r1
20000936:	8812      	ldrh	r2, [r2, #0]
20000938:	801a      	strh	r2, [r3, #0]
2000093a:	19bb      	adds	r3, r7, r6
2000093c:	2102      	movs	r1, #2
2000093e:	197a      	adds	r2, r7, r5
20000940:	8812      	ldrh	r2, [r2, #0]
20000942:	525a      	strh	r2, [r3, r1]
20000944:	19bb      	adds	r3, r7, r6
20000946:	0018      	movs	r0, r3
20000948:	f7ff fe64 	bl	20000614 <draw_line>
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b007      	add	sp, #28
20000952:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000954 <draw_polygon>:

void draw_polygon(PPOLYPOINT polygon)
{
20000954:	b5b0      	push	{r4, r5, r7, lr}
20000956:	b088      	sub	sp, #32
20000958:	af00      	add	r7, sp, #0
2000095a:	6078      	str	r0, [r7, #4]
	POLYPOINT p0;
	p0.x = polygon->x;
2000095c:	687b      	ldr	r3, [r7, #4]
2000095e:	781a      	ldrb	r2, [r3, #0]
20000960:	2114      	movs	r1, #20
20000962:	187b      	adds	r3, r7, r1
20000964:	701a      	strb	r2, [r3, #0]
	p0.y = polygon->y;
20000966:	687b      	ldr	r3, [r7, #4]
20000968:	785a      	ldrb	r2, [r3, #1]
2000096a:	187b      	adds	r3, r7, r1
2000096c:	705a      	strb	r2, [r3, #1]
	PPOLYPOINT ptr = polygon->next;
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	685b      	ldr	r3, [r3, #4]
20000972:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
20000974:	e02a      	b.n	200009cc <draw_polygon+0x78>
	{
		POLYPOINT p1;
		p1.x = ptr->x;
20000976:	69fb      	ldr	r3, [r7, #28]
20000978:	781a      	ldrb	r2, [r3, #0]
2000097a:	210c      	movs	r1, #12
2000097c:	187b      	adds	r3, r7, r1
2000097e:	701a      	strb	r2, [r3, #0]
		p1.y = ptr->y;
20000980:	69fb      	ldr	r3, [r7, #28]
20000982:	785a      	ldrb	r2, [r3, #1]
20000984:	187b      	adds	r3, r7, r1
20000986:	705a      	strb	r2, [r3, #1]
		LINE side = {{p0.x, p0.y}, {p1.x, p1.y}};
20000988:	2514      	movs	r5, #20
2000098a:	197b      	adds	r3, r7, r5
2000098c:	781a      	ldrb	r2, [r3, #0]
2000098e:	2008      	movs	r0, #8
20000990:	183b      	adds	r3, r7, r0
20000992:	701a      	strb	r2, [r3, #0]
20000994:	197b      	adds	r3, r7, r5
20000996:	785a      	ldrb	r2, [r3, #1]
20000998:	183b      	adds	r3, r7, r0
2000099a:	705a      	strb	r2, [r3, #1]
2000099c:	187b      	adds	r3, r7, r1
2000099e:	781a      	ldrb	r2, [r3, #0]
200009a0:	183b      	adds	r3, r7, r0
200009a2:	709a      	strb	r2, [r3, #2]
200009a4:	000c      	movs	r4, r1
200009a6:	187b      	adds	r3, r7, r1
200009a8:	785a      	ldrb	r2, [r3, #1]
200009aa:	183b      	adds	r3, r7, r0
200009ac:	70da      	strb	r2, [r3, #3]
		draw_line(&side);
200009ae:	183b      	adds	r3, r7, r0
200009b0:	0018      	movs	r0, r3
200009b2:	f7ff fe2f 	bl	20000614 <draw_line>
		p0.x = p1.x; p0.y = p1.y;
200009b6:	193b      	adds	r3, r7, r4
200009b8:	781a      	ldrb	r2, [r3, #0]
200009ba:	197b      	adds	r3, r7, r5
200009bc:	701a      	strb	r2, [r3, #0]
200009be:	193b      	adds	r3, r7, r4
200009c0:	785a      	ldrb	r2, [r3, #1]
200009c2:	197b      	adds	r3, r7, r5
200009c4:	705a      	strb	r2, [r3, #1]
		ptr = ptr->next;
200009c6:	69fb      	ldr	r3, [r7, #28]
200009c8:	685b      	ldr	r3, [r3, #4]
200009ca:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
200009cc:	69fb      	ldr	r3, [r7, #28]
200009ce:	2b00      	cmp	r3, #0
200009d0:	d1d1      	bne.n	20000976 <draw_polygon+0x22>
	}
}
200009d2:	46c0      	nop			; (mov r8, r8)
200009d4:	46c0      	nop			; (mov r8, r8)
200009d6:	46bd      	mov	sp, r7
200009d8:	b008      	add	sp, #32
200009da:	bdb0      	pop	{r4, r5, r7, pc}

200009dc <draw_ballobject>:

// ------------------------------------------------------- Objects ------------------------------------------------------------------------------- //
void draw_ballobject(POBJECT o)
{
200009dc:	b580      	push	{r7, lr}
200009de:	b086      	sub	sp, #24
200009e0:	af00      	add	r7, sp, #0
200009e2:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	681b      	ldr	r3, [r3, #0]
200009e8:	681b      	ldr	r3, [r3, #0]
200009ea:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < pixels; i++)
200009ec:	2300      	movs	r3, #0
200009ee:	617b      	str	r3, [r7, #20]
200009f0:	e033      	b.n	20000a5a <draw_ballobject+0x7e>
	{
		// (o->geo->px+i) gets the position of one of the pixels and then the period after gets x/y value of that point
		int testx = o->posx + (o->geo->px+i)->x;
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	68da      	ldr	r2, [r3, #12]
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	681b      	ldr	r3, [r3, #0]
200009fa:	330c      	adds	r3, #12
200009fc:	0019      	movs	r1, r3
200009fe:	697b      	ldr	r3, [r7, #20]
20000a00:	005b      	lsls	r3, r3, #1
20000a02:	18cb      	adds	r3, r1, r3
20000a04:	781b      	ldrb	r3, [r3, #0]
20000a06:	18d3      	adds	r3, r2, r3
20000a08:	60fb      	str	r3, [r7, #12]
		int testy = o->posy + (o->geo->px+i)->y;
20000a0a:	687b      	ldr	r3, [r7, #4]
20000a0c:	691a      	ldr	r2, [r3, #16]
20000a0e:	687b      	ldr	r3, [r7, #4]
20000a10:	681b      	ldr	r3, [r3, #0]
20000a12:	330c      	adds	r3, #12
20000a14:	0019      	movs	r1, r3
20000a16:	697b      	ldr	r3, [r7, #20]
20000a18:	005b      	lsls	r3, r3, #1
20000a1a:	18cb      	adds	r3, r1, r3
20000a1c:	785b      	ldrb	r3, [r3, #1]
20000a1e:	18d3      	adds	r3, r2, r3
20000a20:	60bb      	str	r3, [r7, #8]
		graphic_pixel_set(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000a22:	687b      	ldr	r3, [r7, #4]
20000a24:	68da      	ldr	r2, [r3, #12]
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	681b      	ldr	r3, [r3, #0]
20000a2a:	330c      	adds	r3, #12
20000a2c:	0019      	movs	r1, r3
20000a2e:	697b      	ldr	r3, [r7, #20]
20000a30:	005b      	lsls	r3, r3, #1
20000a32:	18cb      	adds	r3, r1, r3
20000a34:	781b      	ldrb	r3, [r3, #0]
20000a36:	18d0      	adds	r0, r2, r3
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	691a      	ldr	r2, [r3, #16]
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	681b      	ldr	r3, [r3, #0]
20000a40:	330c      	adds	r3, #12
20000a42:	0019      	movs	r1, r3
20000a44:	697b      	ldr	r3, [r7, #20]
20000a46:	005b      	lsls	r3, r3, #1
20000a48:	18cb      	adds	r3, r1, r3
20000a4a:	785b      	ldrb	r3, [r3, #1]
20000a4c:	18d3      	adds	r3, r2, r3
20000a4e:	0019      	movs	r1, r3
20000a50:	f000 f952 	bl	20000cf8 <graphic_pixel_set>
	for (int i = 0; i < pixels; i++)
20000a54:	697b      	ldr	r3, [r7, #20]
20000a56:	3301      	adds	r3, #1
20000a58:	617b      	str	r3, [r7, #20]
20000a5a:	697a      	ldr	r2, [r7, #20]
20000a5c:	693b      	ldr	r3, [r7, #16]
20000a5e:	429a      	cmp	r2, r3
20000a60:	dbc7      	blt.n	200009f2 <draw_ballobject+0x16>
	}

}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46c0      	nop			; (mov r8, r8)
20000a66:	46bd      	mov	sp, r7
20000a68:	b006      	add	sp, #24
20000a6a:	bd80      	pop	{r7, pc}

20000a6c <clear_ballobject>:

void clear_ballobject(POBJECT o)
{
20000a6c:	b580      	push	{r7, lr}
20000a6e:	b084      	sub	sp, #16
20000a70:	af00      	add	r7, sp, #0
20000a72:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	681b      	ldr	r3, [r3, #0]
20000a78:	681b      	ldr	r3, [r3, #0]
20000a7a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pixels; i++)
20000a7c:	2300      	movs	r3, #0
20000a7e:	60fb      	str	r3, [r7, #12]
20000a80:	e01b      	b.n	20000aba <clear_ballobject+0x4e>
	{
		graphic_pixel_clear(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000a82:	687b      	ldr	r3, [r7, #4]
20000a84:	68da      	ldr	r2, [r3, #12]
20000a86:	687b      	ldr	r3, [r7, #4]
20000a88:	681b      	ldr	r3, [r3, #0]
20000a8a:	330c      	adds	r3, #12
20000a8c:	0019      	movs	r1, r3
20000a8e:	68fb      	ldr	r3, [r7, #12]
20000a90:	005b      	lsls	r3, r3, #1
20000a92:	18cb      	adds	r3, r1, r3
20000a94:	781b      	ldrb	r3, [r3, #0]
20000a96:	18d0      	adds	r0, r2, r3
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	691a      	ldr	r2, [r3, #16]
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	330c      	adds	r3, #12
20000aa2:	0019      	movs	r1, r3
20000aa4:	68fb      	ldr	r3, [r7, #12]
20000aa6:	005b      	lsls	r3, r3, #1
20000aa8:	18cb      	adds	r3, r1, r3
20000aaa:	785b      	ldrb	r3, [r3, #1]
20000aac:	18d3      	adds	r3, r2, r3
20000aae:	0019      	movs	r1, r3
20000ab0:	f000 f925 	bl	20000cfe <graphic_pixel_clear>
	for (int i = 0; i < pixels; i++)
20000ab4:	68fb      	ldr	r3, [r7, #12]
20000ab6:	3301      	adds	r3, #1
20000ab8:	60fb      	str	r3, [r7, #12]
20000aba:	68fa      	ldr	r2, [r7, #12]
20000abc:	68bb      	ldr	r3, [r7, #8]
20000abe:	429a      	cmp	r2, r3
20000ac0:	dbdf      	blt.n	20000a82 <clear_ballobject+0x16>
	}

}
20000ac2:	46c0      	nop			; (mov r8, r8)
20000ac4:	46c0      	nop			; (mov r8, r8)
20000ac6:	46bd      	mov	sp, r7
20000ac8:	b004      	add	sp, #16
20000aca:	bd80      	pop	{r7, pc}

20000acc <move_ballobject>:

void move_ballobject(POBJECT o)
{
20000acc:	b580      	push	{r7, lr}
20000ace:	b084      	sub	sp, #16
20000ad0:	af00      	add	r7, sp, #0
20000ad2:	6078      	str	r0, [r7, #4]
	clear_ballobject(o);
20000ad4:	687b      	ldr	r3, [r7, #4]
20000ad6:	0018      	movs	r0, r3
20000ad8:	f7ff ffc8 	bl	20000a6c <clear_ballobject>
	int newx = o->dirx + o->posx;
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	685a      	ldr	r2, [r3, #4]
20000ae0:	687b      	ldr	r3, [r7, #4]
20000ae2:	68db      	ldr	r3, [r3, #12]
20000ae4:	18d3      	adds	r3, r2, r3
20000ae6:	60fb      	str	r3, [r7, #12]
	int newy = o->diry + o->posy;
20000ae8:	687b      	ldr	r3, [r7, #4]
20000aea:	689a      	ldr	r2, [r3, #8]
20000aec:	687b      	ldr	r3, [r7, #4]
20000aee:	691b      	ldr	r3, [r3, #16]
20000af0:	18d3      	adds	r3, r2, r3
20000af2:	60bb      	str	r3, [r7, #8]
	if (newx < 1) // touches left side
20000af4:	68fb      	ldr	r3, [r7, #12]
20000af6:	2b00      	cmp	r3, #0
20000af8:	dc0c      	bgt.n	20000b14 <move_ballobject+0x48>
	{
		// if its towards the left side x dir is negative which means we need to set it as positive 
		o->dirx = abs(o->dirx);
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	685b      	ldr	r3, [r3, #4]
20000afe:	17d9      	asrs	r1, r3, #31
20000b00:	185a      	adds	r2, r3, r1
20000b02:	404a      	eors	r2, r1
20000b04:	687b      	ldr	r3, [r7, #4]
20000b06:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	685a      	ldr	r2, [r3, #4]
20000b0c:	687b      	ldr	r3, [r7, #4]
20000b0e:	68db      	ldr	r3, [r3, #12]
20000b10:	18d3      	adds	r3, r2, r3
20000b12:	60fb      	str	r3, [r7, #12]
	}	
	if (newx > 128) // touches right side
20000b14:	68fb      	ldr	r3, [r7, #12]
20000b16:	2b80      	cmp	r3, #128	; 0x80
20000b18:	dd0a      	ble.n	20000b30 <move_ballobject+0x64>
	{
		// if it touches right side x dir is positive and we need to set it negative. 
		o->dirx = -(o->dirx);
20000b1a:	687b      	ldr	r3, [r7, #4]
20000b1c:	685b      	ldr	r3, [r3, #4]
20000b1e:	425a      	negs	r2, r3
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000b24:	687b      	ldr	r3, [r7, #4]
20000b26:	685a      	ldr	r2, [r3, #4]
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	68db      	ldr	r3, [r3, #12]
20000b2c:	18d3      	adds	r3, r2, r3
20000b2e:	60fb      	str	r3, [r7, #12]
	}
	if (newy < 1) // touches top side
20000b30:	68bb      	ldr	r3, [r7, #8]
20000b32:	2b00      	cmp	r3, #0
20000b34:	dc0c      	bgt.n	20000b50 <move_ballobject+0x84>
	{
		o->diry = abs(o->diry);
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	689b      	ldr	r3, [r3, #8]
20000b3a:	17d9      	asrs	r1, r3, #31
20000b3c:	185a      	adds	r2, r3, r1
20000b3e:	404a      	eors	r2, r1
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	689a      	ldr	r2, [r3, #8]
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	691b      	ldr	r3, [r3, #16]
20000b4c:	18d3      	adds	r3, r2, r3
20000b4e:	60bb      	str	r3, [r7, #8]
	}
	if (newy > 64) // touches bottom side
20000b50:	68bb      	ldr	r3, [r7, #8]
20000b52:	2b40      	cmp	r3, #64	; 0x40
20000b54:	dd0a      	ble.n	20000b6c <move_ballobject+0xa0>
	{
		o->diry = -(o->diry);
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	689b      	ldr	r3, [r3, #8]
20000b5a:	425a      	negs	r2, r3
20000b5c:	687b      	ldr	r3, [r7, #4]
20000b5e:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	689a      	ldr	r2, [r3, #8]
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	691b      	ldr	r3, [r3, #16]
20000b68:	18d3      	adds	r3, r2, r3
20000b6a:	60bb      	str	r3, [r7, #8]
	}
	o->posx = newx;
20000b6c:	687b      	ldr	r3, [r7, #4]
20000b6e:	68fa      	ldr	r2, [r7, #12]
20000b70:	60da      	str	r2, [r3, #12]
	o->posy = newy;
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	68ba      	ldr	r2, [r7, #8]
20000b76:	611a      	str	r2, [r3, #16]
	draw_ballobject(o);
20000b78:	687b      	ldr	r3, [r7, #4]
20000b7a:	0018      	movs	r0, r3
20000b7c:	f7ff ff2e 	bl	200009dc <draw_ballobject>
}
20000b80:	46c0      	nop			; (mov r8, r8)
20000b82:	46bd      	mov	sp, r7
20000b84:	b004      	add	sp, #16
20000b86:	bd80      	pop	{r7, pc}

20000b88 <set_ballobject_speed>:

void set_ballobject_speed(POBJECT o, int speedx, int speedy)
{
20000b88:	b580      	push	{r7, lr}
20000b8a:	b084      	sub	sp, #16
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	60f8      	str	r0, [r7, #12]
20000b90:	60b9      	str	r1, [r7, #8]
20000b92:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000b94:	68fb      	ldr	r3, [r7, #12]
20000b96:	68ba      	ldr	r2, [r7, #8]
20000b98:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000b9a:	68fb      	ldr	r3, [r7, #12]
20000b9c:	687a      	ldr	r2, [r7, #4]
20000b9e:	609a      	str	r2, [r3, #8]
}
20000ba0:	46c0      	nop			; (mov r8, r8)
20000ba2:	46bd      	mov	sp, r7
20000ba4:	b004      	add	sp, #16
20000ba6:	bd80      	pop	{r7, pc}

20000ba8 <move_paddle>:

void move_paddle(POBJECT p)
{
20000ba8:	b580      	push	{r7, lr}
20000baa:	b084      	sub	sp, #16
20000bac:	af00      	add	r7, sp, #0
20000bae:	6078      	str	r0, [r7, #4]
	clear_ballobject(p);
20000bb0:	687b      	ldr	r3, [r7, #4]
20000bb2:	0018      	movs	r0, r3
20000bb4:	f7ff ff5a 	bl	20000a6c <clear_ballobject>
	int newy = p->posy + p->diry;
20000bb8:	687b      	ldr	r3, [r7, #4]
20000bba:	691a      	ldr	r2, [r3, #16]
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	689b      	ldr	r3, [r3, #8]
20000bc0:	18d3      	adds	r3, r2, r3
20000bc2:	60fb      	str	r3, [r7, #12]
	if (newy > -1 && newy < 60)
20000bc4:	68fb      	ldr	r3, [r7, #12]
20000bc6:	2b00      	cmp	r3, #0
20000bc8:	db05      	blt.n	20000bd6 <move_paddle+0x2e>
20000bca:	68fb      	ldr	r3, [r7, #12]
20000bcc:	2b3b      	cmp	r3, #59	; 0x3b
20000bce:	dc02      	bgt.n	20000bd6 <move_paddle+0x2e>
		p->posy = newy;
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	68fa      	ldr	r2, [r7, #12]
20000bd4:	611a      	str	r2, [r3, #16]
	draw_ballobject(p);
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	0018      	movs	r0, r3
20000bda:	f7ff feff 	bl	200009dc <draw_ballobject>
}
20000bde:	46c0      	nop			; (mov r8, r8)
20000be0:	46bd      	mov	sp, r7
20000be2:	b004      	add	sp, #16
20000be4:	bd80      	pop	{r7, pc}

20000be6 <bounce>:

void bounce(POBJECT paddle, POBJECT ball)
{
20000be6:	b590      	push	{r4, r7, lr}
20000be8:	b089      	sub	sp, #36	; 0x24
20000bea:	af00      	add	r7, sp, #0
20000bec:	6078      	str	r0, [r7, #4]
20000bee:	6039      	str	r1, [r7, #0]
	int ballx = ball->posx + ball->dirx;
20000bf0:	683b      	ldr	r3, [r7, #0]
20000bf2:	68da      	ldr	r2, [r3, #12]
20000bf4:	683b      	ldr	r3, [r7, #0]
20000bf6:	685b      	ldr	r3, [r3, #4]
20000bf8:	18d3      	adds	r3, r2, r3
20000bfa:	61fb      	str	r3, [r7, #28]
	int bally = ball->posy;
20000bfc:	683b      	ldr	r3, [r7, #0]
20000bfe:	691b      	ldr	r3, [r3, #16]
20000c00:	61bb      	str	r3, [r7, #24]
	int paddlex = paddle->posx;
20000c02:	687b      	ldr	r3, [r7, #4]
20000c04:	68db      	ldr	r3, [r3, #12]
20000c06:	617b      	str	r3, [r7, #20]
	int paddley = paddle->posy;
20000c08:	687b      	ldr	r3, [r7, #4]
20000c0a:	691b      	ldr	r3, [r3, #16]
20000c0c:	613b      	str	r3, [r7, #16]
	int dir = -ball->dirx;
20000c0e:	683b      	ldr	r3, [r7, #0]
20000c10:	685b      	ldr	r3, [r3, #4]
20000c12:	425b      	negs	r3, r3
20000c14:	60fb      	str	r3, [r7, #12]
	if (ballx >= paddlex && bally >= paddley && bally <= (paddley + 8))
20000c16:	69fa      	ldr	r2, [r7, #28]
20000c18:	697b      	ldr	r3, [r7, #20]
20000c1a:	429a      	cmp	r2, r3
20000c1c:	db10      	blt.n	20000c40 <bounce+0x5a>
20000c1e:	69ba      	ldr	r2, [r7, #24]
20000c20:	693b      	ldr	r3, [r7, #16]
20000c22:	429a      	cmp	r2, r3
20000c24:	db0c      	blt.n	20000c40 <bounce+0x5a>
20000c26:	693b      	ldr	r3, [r7, #16]
20000c28:	3308      	adds	r3, #8
20000c2a:	69ba      	ldr	r2, [r7, #24]
20000c2c:	429a      	cmp	r2, r3
20000c2e:	dc07      	bgt.n	20000c40 <bounce+0x5a>
	{
		ball->set_speed(ball, dir, ball->diry);
20000c30:	683b      	ldr	r3, [r7, #0]
20000c32:	6a1c      	ldr	r4, [r3, #32]
20000c34:	683b      	ldr	r3, [r7, #0]
20000c36:	689a      	ldr	r2, [r3, #8]
20000c38:	68f9      	ldr	r1, [r7, #12]
20000c3a:	683b      	ldr	r3, [r7, #0]
20000c3c:	0018      	movs	r0, r3
20000c3e:	47a0      	blx	r4
	}
}
20000c40:	46c0      	nop			; (mov r8, r8)
20000c42:	46bd      	mov	sp, r7
20000c44:	b009      	add	sp, #36	; 0x24
20000c46:	bd90      	pop	{r4, r7, pc}

20000c48 <gameover>:

int gameover(POBJECT b)
{
20000c48:	b5b0      	push	{r4, r5, r7, lr}
20000c4a:	b086      	sub	sp, #24
20000c4c:	af00      	add	r7, sp, #0
20000c4e:	6078      	str	r0, [r7, #4]
	if (b->posx >= 127)
20000c50:	687b      	ldr	r3, [r7, #4]
20000c52:	68db      	ldr	r3, [r3, #12]
20000c54:	2b7e      	cmp	r3, #126	; 0x7e
20000c56:	dd1c      	ble.n	20000c92 <gameover+0x4a>
	{
		char *s;
		char test1[] = "Game Over! ";
20000c58:	2408      	movs	r4, #8
20000c5a:	193b      	adds	r3, r7, r4
20000c5c:	4a0f      	ldr	r2, [pc, #60]	; (20000c9c <gameover+0x54>)
20000c5e:	ca23      	ldmia	r2!, {r0, r1, r5}
20000c60:	c323      	stmia	r3!, {r0, r1, r5}

		init_app();
20000c62:	f7ff fa67 	bl	20000134 <init_app>
		ascii_init();
20000c66:	f7ff fc6f 	bl	20000548 <ascii_init>
		ascii_gotoxy(1, 1);
20000c6a:	2101      	movs	r1, #1
20000c6c:	2001      	movs	r0, #1
20000c6e:	f7ff fc9a 	bl	200005a6 <ascii_gotoxy>
		s = test1;
20000c72:	193b      	adds	r3, r7, r4
20000c74:	617b      	str	r3, [r7, #20]
		while (*s)
20000c76:	e006      	b.n	20000c86 <gameover+0x3e>
		{
			ascii_write_char(*s++);
20000c78:	697b      	ldr	r3, [r7, #20]
20000c7a:	1c5a      	adds	r2, r3, #1
20000c7c:	617a      	str	r2, [r7, #20]
20000c7e:	781b      	ldrb	r3, [r3, #0]
20000c80:	0018      	movs	r0, r3
20000c82:	f7ff fc72 	bl	2000056a <ascii_write_char>
		while (*s)
20000c86:	697b      	ldr	r3, [r7, #20]
20000c88:	781b      	ldrb	r3, [r3, #0]
20000c8a:	2b00      	cmp	r3, #0
20000c8c:	d1f4      	bne.n	20000c78 <gameover+0x30>
		}
		return 1;
20000c8e:	2301      	movs	r3, #1
20000c90:	e000      	b.n	20000c94 <gameover+0x4c>
	}
	return 0;
20000c92:	2300      	movs	r3, #0
}
20000c94:	0018      	movs	r0, r3
20000c96:	46bd      	mov	sp, r7
20000c98:	b006      	add	sp, #24
20000c9a:	bdb0      	pop	{r4, r5, r7, pc}
20000c9c:	20000e00 	andcs	r0, r0, r0, lsl #28

20000ca0 <resetgame>:

void resetgame(POBJECT paddle, POBJECT ball)
{
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b082      	sub	sp, #8
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	6078      	str	r0, [r7, #4]
20000ca8:	6039      	str	r1, [r7, #0]
	graphic_clear_screen();
20000caa:	f000 f822 	bl	20000cf2 <graphic_clear_screen>
	ball->posx = 1;
20000cae:	683b      	ldr	r3, [r7, #0]
20000cb0:	2201      	movs	r2, #1
20000cb2:	60da      	str	r2, [r3, #12]
	ball->posy = 1;
20000cb4:	683b      	ldr	r3, [r7, #0]
20000cb6:	2201      	movs	r2, #1
20000cb8:	611a      	str	r2, [r3, #16]
	paddle->posx = 115;
20000cba:	687b      	ldr	r3, [r7, #4]
20000cbc:	2273      	movs	r2, #115	; 0x73
20000cbe:	60da      	str	r2, [r3, #12]
	paddle->posy = 25;
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	2219      	movs	r2, #25
20000cc4:	611a      	str	r2, [r3, #16]
	paddle->draw(paddle);
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	695b      	ldr	r3, [r3, #20]
20000cca:	687a      	ldr	r2, [r7, #4]
20000ccc:	0010      	movs	r0, r2
20000cce:	4798      	blx	r3
	ball->draw(ball);
20000cd0:	683b      	ldr	r3, [r7, #0]
20000cd2:	695b      	ldr	r3, [r3, #20]
20000cd4:	683a      	ldr	r2, [r7, #0]
20000cd6:	0010      	movs	r0, r2
20000cd8:	4798      	blx	r3
}
20000cda:	46c0      	nop			; (mov r8, r8)
20000cdc:	46bd      	mov	sp, r7
20000cde:	b002      	add	sp, #8
20000ce0:	bd80      	pop	{r7, pc}

20000ce2 <my_irq_handler>:

// ------------------------------------------------------- Interrupt ------------------------------------------------------------------------------- //
void my_irq_handler(void)
{
20000ce2:	b580      	push	{r7, lr}
20000ce4:	af00      	add	r7, sp, #0
	// tänd diodramp på port D 
	//*GPIO_D_MODER = 0x00005555;
	//*GPIO_D_ODR_LOW = 0xFF;
}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	46bd      	mov	sp, r7
20000cea:	bd80      	pop	{r7, pc}

20000cec <graphic_initalize>:

// ------------------------------------------------------- MD407 BUILT IN FUNCTIONS ------------------------------------------------------------------------------- //
__attribute__((naked))
void graphic_initalize(void)
{
20000cec:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
20000cf0:	46c0      	nop			; (mov r8, r8)

20000cf2 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
20000cf2:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
20000cf6:	46c0      	nop			; (mov r8, r8)

20000cf8 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(void)
{
20000cf8:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
20000cfc:	46c0      	nop			; (mov r8, r8)

20000cfe <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(void)
{
20000cfe:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
20000d02:	46c0      	nop			; (mov r8, r8)

20000d04 <ball_geometry>:
20000d04:	0000000c 	andeq	r0, r0, ip
20000d08:	00000004 	andeq	r0, r0, r4
20000d0c:	00000004 	andeq	r0, r0, r4
20000d10:	02000100 	andeq	r0, r0, #0, 2
20000d14:	01010001 	tsteq	r1, r1
20000d18:	03010201 	movweq	r0, #4609	; 0x1201
20000d1c:	01020002 	tsteq	r2, r2
20000d20:	03020202 	movweq	r0, #8706	; 0x2202
20000d24:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000d4c <ballobject>:
20000d4c:	20000d04 	andcs	r0, r0, r4, lsl #26
20000d50:	00000007 	andeq	r0, r0, r7
20000d54:	00000001 	andeq	r0, r0, r1
20000d58:	00000001 	andeq	r0, r0, r1
20000d5c:	00000001 	andeq	r0, r0, r1
20000d60:	200009dd 	ldrdcs	r0, [r0], -sp
20000d64:	20000a6d 	andcs	r0, r0, sp, ror #20
20000d68:	20000acd 	andcs	r0, r0, sp, asr #21
20000d6c:	20000b89 	andcs	r0, r0, r9, lsl #23

20000d70 <paddle>:
20000d70:	0000001b 	andeq	r0, r0, fp, lsl r0
20000d74:	00000005 	andeq	r0, r0, r5
20000d78:	00000009 	andeq	r0, r0, r9
20000d7c:	00010000 	andeq	r0, r1, r0
20000d80:	00030002 	andeq	r0, r3, r2
20000d84:	01040004 	tsteq	r4, r4
20000d88:	03040204 	movweq	r0, #16900	; 0x4204
20000d8c:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
20000d90:	07040604 	streq	r0, [r4, -r4, lsl #12]
20000d94:	08030804 	stmdaeq	r3, {r2, fp}
20000d98:	08010802 	stmdaeq	r1, {r1, fp}
20000d9c:	07000800 	streq	r0, [r0, -r0, lsl #16]
20000da0:	05000600 	streq	r0, [r0, #-1536]	; 0xfffffa00
20000da4:	03000400 	movweq	r0, #1024	; 0x400
20000da8:	01000200 	mrseq	r0, R8_usr
20000dac:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
20000db0:	00000502 	andeq	r0, r0, r2, lsl #10
20000db4:	00000000 	andeq	r0, r0, r0

20000db8 <paddle_object>:
20000db8:	20000d70 	andcs	r0, r0, r0, ror sp
	...
20000dc4:	00000073 	andeq	r0, r0, r3, ror r0
20000dc8:	00000019 	andeq	r0, r0, r9, lsl r0
20000dcc:	200009dd 	ldrdcs	r0, [r0], -sp
20000dd0:	20000a6d 	andcs	r0, r0, sp, ror #20
20000dd4:	20000ba9 	andcs	r0, r0, r9, lsr #23
20000dd8:	20000b89 	andcs	r0, r0, r9, lsl #23
20000ddc:	20000278 	andcs	r0, r0, r8, ror r2
20000de0:	20000258 	andcs	r0, r0, r8, asr r2
20000de4:	20000260 	andcs	r0, r0, r0, ror #4
20000de8:	20000268 	andcs	r0, r0, r8, ror #4
20000dec:	20000270 	andcs	r0, r0, r0, ror r2
20000df0:	0a030201 	beq	200c15fc <paddle_object+0xc0844>
20000df4:	0b060504 	bleq	2018220c <paddle_object+0x181454>
20000df8:	0c090807 	stceq	8, cr0, [r9], {7}
20000dfc:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000dcc <paddle_object+0x14>
20000e00:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
20000e04:	65764f20 	ldrbvs	r4, [r6, #-3872]!	; 0xfffff0e0
20000e08:	00202172 	eoreq	r2, r0, r2, ror r1

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013c 	andeq	r0, r0, ip, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003e 	andeq	r0, r0, lr, lsr r0
  10:	0000360c 	andeq	r3, r0, ip, lsl #12
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00006a20 	andeq	r6, r0, r0, lsr #20
  20:	00000000 	andeq	r0, r0, r0
  24:	011a0200 	tsteq	sl, r0, lsl #4
  28:	00d60905 	sbcseq	r0, r6, r5, lsl #18
  2c:	73030000 	movwvc	r0, #12288	; 0x3000
  30:	06010072 			; <UNDEFINED> instruction: 0x06010072
  34:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  38:	2d040000 	stccs	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	00dd1a07 	sbcseq	r1, sp, r7, lsl #20
  44:	03020000 	movweq	r0, #8192	; 0x2000
  48:	01007264 	tsteq	r0, r4, ror #4
  4c:	00dd1a08 	sbcseq	r1, sp, r8, lsl #20
  50:	04040000 	streq	r0, [r4], #-0
  54:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	dd1a0901 	vldrle.16	s0, [sl, #-2]	; <UNPREDICTABLE>
  5c:	06000000 	streq	r0, [r0], -r0
  60:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
  64:	1a0a0100 	bne	28046c <startup-0x1fd7fb94>
  68:	000000dd 	ldrdeq	r0, [r0], -sp
  6c:	00b90408 	adcseq	r0, r9, r8, lsl #8
  70:	0b010000 	bleq	40078 <startup-0x1ffbff88>
  74:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  78:	63030a00 	movwvs	r0, #14848	; 0x3a00
  7c:	01003172 	tsteq	r0, r2, ror r1
  80:	00dd1a0c 	sbcseq	r1, sp, ip, lsl #20
  84:	040c0000 	streq	r0, [ip], #-0
  88:	000000c2 	andeq	r0, r0, r2, asr #1
  8c:	dd1a0d01 	ldcle	13, cr0, [sl, #-4]
  90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  94:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
  98:	1a0e0100 	bne	3804a0 <startup-0x1fc7fb60>
  9c:	000000dd 	ldrdeq	r0, [r0], -sp
  a0:	00cb0410 	sbceq	r0, fp, r0, lsl r4
  a4:	0f010000 	svceq	0x00010000
  a8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  ac:	63031200 	movwvs	r1, #12800	; 0x3200
  b0:	01003372 	tsteq	r0, r2, ror r3
  b4:	00dd1a10 	sbcseq	r1, sp, r0, lsl sl
  b8:	04140000 	ldreq	r0, [r4], #-0
  bc:	000000d4 	ldrdeq	r0, [r0], -r4
  c0:	dd1a1101 	ldfles	f1, [sl, #-4]
  c4:	16000000 	strne	r0, [r0], -r0
  c8:	0000f004 	andeq	pc, r0, r4
  cc:	1a120100 	bne	4804d4 <startup-0x1fb7fb2c>
  d0:	000000dd 	ldrdeq	r0, [r0], -sp
  d4:	02050018 	andeq	r0, r5, #24
  d8:	0000dd07 	andeq	sp, r0, r7, lsl #26
  dc:	00d60600 	sbcseq	r0, r6, r0, lsl #12
  e0:	fb070000 	blx	1c00ea <startup-0x1fe3ff16>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	00250313 	eoreq	r0, r5, r3, lsl r3
  ec:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	00500621 	subseq	r0, r0, r1, lsr #12
  f8:	002a2000 	eoreq	r2, sl, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	01007309 	tsteq	r0, r9, lsl #6
 108:	01121221 	tsteq	r2, r1, lsr #4
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	6c080105 	stfvss	f0, [r8], {5}
 11c:	0b000003 	bleq	130 <startup-0x1ffffed0>
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	100d1701 	andne	r1, sp, r1, lsl #14
 128:	40200000 	eormi	r0, r0, r0
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0063099c 	mlseq	r3, ip, r9, r0
 134:	181d1701 	ldmdane	sp, {r0, r8, r9, sl, ip}
 138:	02000001 	andeq	r0, r0, #1
 13c:	00007791 	muleq	r0, r1, r7
 140:	00000b5e 	andeq	r0, r0, lr, asr fp
 144:	00b40004 	adcseq	r0, r4, r4
 148:	01040000 	mrseq	r0, (UNDEF: 4)
 14c:	0000003e 	andeq	r0, r0, lr, lsr r0
 150:	0002940c 	andeq	r9, r2, ip, lsl #8
 154:	00000000 	andeq	r0, r0, r0
 158:	00007c00 	andeq	r7, r0, r0, lsl #24
 15c:	000c7020 	andeq	r7, ip, r0, lsr #32
 160:	00007600 	andeq	r7, r0, r0, lsl #12
 164:	07040200 	streq	r0, [r4, -r0, lsl #4]
 168:	0000012d 	andeq	r0, r0, sp, lsr #2
 16c:	69050403 	stmdbvs	r5, {r0, r1, sl}
 170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 174:	01700508 	cmneq	r0, r8, lsl #10
 178:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 17c:	0002c504 	andeq	ip, r2, r4, lsl #10
 180:	06010200 	streq	r0, [r1], -r0, lsl #4
 184:	00000365 	andeq	r0, r0, r5, ror #6
 188:	63080102 	movwvs	r0, #33026	; 0x8102
 18c:	02000003 	andeq	r0, r0, #3
 190:	03710502 	cmneq	r1, #8388608	; 0x800000
 194:	02020000 	andeq	r0, r2, #0
 198:	0000dd07 	andeq	sp, r0, r7, lsl #26
 19c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a0:	00000175 	andeq	r0, r0, r5, ror r1
 1a4:	28070402 	stmdacs	r7, {r1, sl}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	01230708 			; <UNDEFINED> instruction: 0x01230708
 1b0:	04040000 	streq	r0, [r4], #-0
 1b4:	00000048 	andeq	r0, r0, r8, asr #32
 1b8:	007e0404 	rsbseq	r0, lr, r4, lsl #8
 1bc:	01020000 	mrseq	r0, (UNDEF: 2)
 1c0:	00036c08 	andeq	r6, r3, r8, lsl #24
 1c4:	01020500 	tsteq	r2, r0, lsl #10
 1c8:	00a5093a 	adceq	r0, r5, sl, lsr r9
 1cc:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
 1d0:	103c0100 	eorsne	r0, ip, r0, lsl #2
 1d4:	00000048 	andeq	r0, r0, r8, asr #32
 1d8:	00790600 	rsbseq	r0, r9, r0, lsl #12
 1dc:	48123c01 	ldmdami	r2, {r0, sl, fp, ip, sp}
 1e0:	01000000 	mrseq	r0, (UNDEF: 0)
 1e4:	018f0700 	orreq	r0, pc, r0, lsl #14
 1e8:	3d010000 	stccc	0, cr0, [r1, #-0]
 1ec:	00008503 	andeq	r8, r0, r3, lsl #10
 1f0:	01040500 	tsteq	r4, r0, lsl #10
 1f4:	00d3093f 	sbcseq	r0, r3, pc, lsr r9
 1f8:	70060000 	andvc	r0, r6, r0
 1fc:	41010030 	tstmi	r1, r0, lsr r0
 200:	0000a508 	andeq	sl, r0, r8, lsl #10
 204:	70060000 	andvc	r0, r6, r0
 208:	41010031 	tstmi	r1, r1, lsr r0
 20c:	0000a50b 	andeq	sl, r0, fp, lsl #10
 210:	07000200 	streq	r0, [r0, -r0, lsl #4]
 214:	000002e5 	andeq	r0, r0, r5, ror #5
 218:	b1034201 	tstlt	r3, r1, lsl #4
 21c:	07000000 	streq	r0, [r0, -r0]
 220:	000002e4 	andeq	r0, r0, r4, ror #5
 224:	eb0a4201 	bl	290a30 <startup-0x1fd6f5d0>
 228:	04000000 	streq	r0, [r0], #-0
 22c:	0000b104 	andeq	fp, r0, r4, lsl #2
 230:	01040500 	tsteq	r4, r0, lsl #10
 234:	011c0944 	tsteq	ip, r4, asr #18
 238:	70060000 	andvc	r0, r6, r0
 23c:	08460100 	stmdaeq	r6, {r8}^
 240:	000000a5 	andeq	r0, r0, r5, lsr #1
 244:	00780600 	rsbseq	r0, r8, r0, lsl #12
 248:	48104701 	ldmdami	r0, {r0, r8, r9, sl, lr}
 24c:	02000000 	andeq	r0, r0, #0
 250:	01007906 	tsteq	r0, r6, lsl #18
 254:	00481247 	subeq	r1, r8, r7, asr #4
 258:	00030000 	andeq	r0, r3, r0
 25c:	00019507 	andeq	r9, r1, r7, lsl #10
 260:	0a480100 	beq	1200668 <startup-0x1edff998>
 264:	00000128 	andeq	r0, r0, r8, lsr #2
 268:	00f10404 	rscseq	r0, r1, r4, lsl #8
 26c:	01080000 	mrseq	r0, (UNDEF: 8)
 270:	08000002 	stmdaeq	r0, {r1}
 274:	5f104a01 	svcpl	0x00104a01
 278:	06000001 	streq	r0, [r0], -r1
 27c:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
 280:	00007e07 	andeq	r7, r0, r7, lsl #28
 284:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
 288:	094c0100 	stmdbeq	ip, {r8}^
 28c:	0000007e 	andeq	r0, r0, lr, ror r0
 290:	015b0901 	cmpeq	fp, r1, lsl #18
 294:	4d010000 	stcmi	0, cr0, [r1, #-0]
 298:	00015f17 	andeq	r5, r1, r7, lsl pc
 29c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
 2a0:	00012e04 	andeq	r2, r1, r4, lsl #28
 2a4:	018b0700 	orreq	r0, fp, r0, lsl #14
 2a8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 2ac:	00012e03 	andeq	r2, r1, r3, lsl #28
 2b0:	018a0700 	orreq	r0, sl, r0, lsl #14
 2b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 2b8:	00015f0f 	andeq	r5, r1, pc, lsl #30
 2bc:	01480500 	cmpeq	r8, r0, lsl #10
 2c0:	01ba0950 			; <UNDEFINED> instruction: 0x01ba0950
 2c4:	8a090000 	bhi	2402cc <startup-0x1fdbfd34>
 2c8:	01000002 	tsteq	r0, r2
 2cc:	002c0652 	eoreq	r0, ip, r2, asr r6
 2d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 2d4:	0000044a 	andeq	r0, r0, sl, asr #8
 2d8:	2c065301 	stccs	3, cr5, [r6], {1}
 2dc:	04000000 	streq	r0, [r0], #-0
 2e0:	00045009 	andeq	r5, r4, r9
 2e4:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
 2e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ec:	78700608 	ldmdavc	r0!, {r3, r9, sl}^
 2f0:	08550100 	ldmdaeq	r5, {r8}^
 2f4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 2f8:	a50a000c 	strge	r0, [sl, #-12]
 2fc:	ca000000 	bgt	304 <startup-0x1ffffcfc>
 300:	0b000001 	bleq	30c <startup-0x1ffffcf4>
 304:	00000025 	andeq	r0, r0, r5, lsr #32
 308:	eb07001d 	bl	1c0384 <startup-0x1fe3fc7c>
 30c:	01000002 	tsteq	r0, r2
 310:	017d0356 	cmneq	sp, r6, asr r3
 314:	ea070000 	b	1c031c <startup-0x1fe3fce4>
 318:	01000002 	tsteq	r0, r2
 31c:	01e20e56 	mvneq	r0, r6, asr lr
 320:	04040000 	streq	r0, [r4], #-0
 324:	0000017d 	andeq	r0, r0, sp, ror r1
 328:	0003f208 	andeq	pc, r3, r8, lsl #4
 32c:	58012400 	stmdapl	r1, {sl, sp}
 330:	00026b10 	andeq	r6, r2, r0, lsl fp
 334:	65670600 	strbvs	r0, [r7, #-1536]!	; 0xfffffa00
 338:	5a01006f 	bpl	404fc <startup-0x1ffbfb04>
 33c:	0001d60c 	andeq	sp, r1, ip, lsl #12
 340:	a1090000 	mrsge	r0, (UNDEF: 9)
 344:	01000003 	tsteq	r0, r3
 348:	002c065b 	eoreq	r0, ip, fp, asr r6
 34c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 350:	000003a6 	andeq	r0, r0, r6, lsr #7
 354:	2c0c5b01 			; <UNDEFINED> instruction: 0x2c0c5b01
 358:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 35c:	0002a909 	andeq	sl, r2, r9, lsl #18
 360:	065c0100 	ldrbeq	r0, [ip], -r0, lsl #2
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	02ae090c 	adceq	r0, lr, #12, 18	; 0x30000
 36c:	5c010000 	stcpl	0, cr0, [r1], {-0}
 370:	00002c0c 	andeq	r2, r0, ip, lsl #24
 374:	1a091000 	bne	24437c <startup-0x1fdbbc84>
 378:	01000004 	tsteq	r0, r4
 37c:	027c0a5d 	rsbseq	r0, ip, #380928	; 0x5d000
 380:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
 384:	00000258 	andeq	r0, r0, r8, asr r2
 388:	7c0a5e01 	stcvc	14, cr5, [sl], {1}
 38c:	18000002 	stmdane	r0, {r1}
 390:	00016b09 	andeq	r6, r1, r9, lsl #22
 394:	0a5f0100 	beq	17c079c <startup-0x1e83f864>
 398:	0000027c 	andeq	r0, r0, ip, ror r2
 39c:	013a091c 	teqeq	sl, ip, lsl r9
 3a0:	60010000 	andvs	r0, r1, r0
 3a4:	0002970a 	andeq	r9, r2, sl, lsl #14
 3a8:	0c002000 	stceq	0, cr2, [r0], {-0}
 3ac:	00000276 	andeq	r0, r0, r6, ror r2
 3b0:	0002760d 	andeq	r7, r2, sp, lsl #12
 3b4:	04040000 	streq	r0, [r4], #-0
 3b8:	000001e8 	andeq	r0, r0, r8, ror #3
 3bc:	026b0404 	rsbeq	r0, fp, #4, 8	; 0x4000000
 3c0:	970c0000 	strls	r0, [ip, -r0]
 3c4:	0d000002 	stceq	0, cr0, [r0, #-8]
 3c8:	00000276 	andeq	r0, r0, r6, ror r2
 3cc:	00002c0d 	andeq	r2, r0, sp, lsl #24
 3d0:	002c0d00 	eoreq	r0, ip, r0, lsl #26
 3d4:	04000000 	streq	r0, [r0], #-0
 3d8:	00028204 	andeq	r8, r2, r4, lsl #4
 3dc:	02d80700 	sbcseq	r0, r8, #0, 14
 3e0:	61010000 	mrsvs	r0, (UNDEF: 1)
 3e4:	0001e803 	andeq	lr, r1, r3, lsl #16
 3e8:	02d70700 	sbcseq	r0, r7, #0, 14
 3ec:	61010000 	mrsvs	r0, (UNDEF: 1)
 3f0:	0002760c 	andeq	r7, r2, ip, lsl #12
 3f4:	03810e00 	orreq	r0, r1, #0, 28
 3f8:	74010000 	strvc	r0, [r1], #-0
 3fc:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 400:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
 404:	0f20000d 	svceq	0x0020000d
 408:	00000150 	andeq	r0, r0, r0, asr r1
 40c:	9d0f7d01 	stcls	13, cr7, [pc, #-4]	; 410 <startup-0x1ffffbf0>
 410:	05000002 	streq	r0, [r0, #-2]
 414:	000d4c03 	andeq	r4, sp, r3, lsl #24
 418:	039a0e20 	orrseq	r0, sl, #32, 28	; 0x200
 41c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 420:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 424:	70030500 	andvc	r0, r3, r0, lsl #10
 428:	0f20000d 	svceq	0x0020000d
 42c:	00000429 	andeq	r0, r0, r9, lsr #8
 430:	9d0f9201 	sfmls	f1, 1, [pc, #-4]	; 434 <startup-0x1ffffbcc>
 434:	05000002 	streq	r0, [r0, #-2]
 438:	000db803 	andeq	fp, sp, r3, lsl #16
 43c:	01e61020 	mvneq	r1, r0, lsr #32
 440:	64010000 	strvs	r0, [r1], #-0
 444:	0ce20602 	stcleq	6, cr0, [r2], #8
 448:	000a2000 	andeq	r2, sl, r0
 44c:	9c010000 	stcls	0, cr0, [r1], {-0}
 450:	00041f11 	andeq	r1, r4, r1, lsl pc
 454:	02580100 	subseq	r0, r8, #0, 2
 458:	000ca006 	andeq	sl, ip, r6
 45c:	00004220 	andeq	r4, r0, r0, lsr #4
 460:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
 464:	12000003 	andne	r0, r0, #3
 468:	0000039a 	muleq	r0, sl, r3
 46c:	18025801 	stmdane	r2, {r0, fp, ip, lr}
 470:	000002a9 	andeq	r0, r0, r9, lsr #5
 474:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
 478:	00000305 	andeq	r0, r0, r5, lsl #6
 47c:	28025801 	stmdacs	r2, {r0, fp, ip, lr}
 480:	000002a9 	andeq	r0, r0, r9, lsr #5
 484:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 488:	00000456 	andeq	r0, r0, r6, asr r4
 48c:	2c02a401 	cfstrscs	mvf10, [r2], {1}
 490:	14000000 	strne	r0, [r0], #-0
 494:	0e150000 	cdpeq	0, 1, cr0, cr5, cr0, {0}
 498:	01000002 	tsteq	r0, r2
 49c:	2c050244 	sfmcs	f0, 4, [r5], {68}	; 0x44
 4a0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 4a4:	5820000c 	stmdapl	r0!, {r2, r3}
 4a8:	01000000 	mrseq	r0, (UNDEF: 0)
 4ac:	0003a89c 	muleq	r3, ip, r8
 4b0:	00621600 	rsbeq	r1, r2, r0, lsl #12
 4b4:	16024401 	strne	r4, [r2], -r1, lsl #8
 4b8:	000002a9 	andeq	r0, r0, r9, lsr #5
 4bc:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
 4c0:	20000c58 	andcs	r0, r0, r8, asr ip
 4c4:	0000003a 	andeq	r0, r0, sl, lsr r0
 4c8:	01007318 	tsteq	r0, r8, lsl r3
 4cc:	78090248 	stmdavc	r9, {r3, r6, r9}
 4d0:	02000000 	andeq	r0, r0, #0
 4d4:	08196c91 	ldmdaeq	r9, {r0, r4, r7, sl, fp, sp, lr}
 4d8:	01000004 	tsteq	r0, r4
 4dc:	a8080249 	stmdage	r8, {r0, r3, r6, r9}
 4e0:	02000003 	andeq	r0, r0, #3
 4e4:	00006091 	muleq	r0, r1, r0
 4e8:	00007e0a 	andeq	r7, r0, sl, lsl #28
 4ec:	0003b800 	andeq	fp, r3, r0, lsl #16
 4f0:	00250b00 	eoreq	r0, r5, r0, lsl #22
 4f4:	000b0000 	andeq	r0, fp, r0
 4f8:	00035c11 	andeq	r5, r3, r1, lsl ip
 4fc:	02370100 	eorseq	r0, r7, #0, 2
 500:	000be606 	andeq	lr, fp, r6, lsl #12
 504:	00006220 	andeq	r6, r0, r0, lsr #4
 508:	409c0100 	addsmi	r0, ip, r0, lsl #2
 50c:	12000004 	andne	r0, r0, #4
 510:	0000039a 	muleq	r0, sl, r3
 514:	15023701 	strne	r3, [r2, #-1793]	; 0xfffff8ff
 518:	000002a9 	andeq	r0, r0, r9, lsr #5
 51c:	12549102 	subsne	r9, r4, #-2147483648	; 0x80000000
 520:	00000305 	andeq	r0, r0, r5, lsl #6
 524:	25023701 	strcs	r3, [r2, #-1793]	; 0xfffff8ff
 528:	000002a9 	andeq	r0, r0, r9, lsr #5
 52c:	19509102 	ldmdbne	r0, {r1, r8, ip, pc}^
 530:	0000038f 	andeq	r0, r0, pc, lsl #7
 534:	06023901 	streq	r3, [r2], -r1, lsl #18
 538:	0000002c 	andeq	r0, r0, ip, lsr #32
 53c:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
 540:	00000217 	andeq	r0, r0, r7, lsl r2
 544:	06023a01 	streq	r3, [r2], -r1, lsl #20
 548:	0000002c 	andeq	r0, r0, ip, lsr #32
 54c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
 550:	00000229 	andeq	r0, r0, r9, lsr #4
 554:	06023b01 	streq	r3, [r2], -r1, lsl #22
 558:	0000002c 	andeq	r0, r0, ip, lsr #32
 55c:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
 560:	00000231 	andeq	r0, r0, r1, lsr r2
 564:	06023c01 	streq	r3, [r2], -r1, lsl #24
 568:	0000002c 	andeq	r0, r0, ip, lsr #32
 56c:	18609102 	stmdane	r0!, {r1, r8, ip, pc}^
 570:	00726964 	rsbseq	r6, r2, r4, ror #18
 574:	06023d01 	streq	r3, [r2], -r1, lsl #26
 578:	0000002c 	andeq	r0, r0, ip, lsr #32
 57c:	005c9102 	subseq	r9, ip, r2, lsl #2
 580:	00039511 	andeq	r9, r3, r1, lsl r5
 584:	022e0100 	eoreq	r0, lr, #0, 2
 588:	000ba806 	andeq	sl, fp, r6, lsl #16
 58c:	00003e20 	andeq	r3, r0, r0, lsr #28
 590:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
 594:	16000004 	strne	r0, [r0], -r4
 598:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
 59c:	02a91a02 	adceq	r1, r9, #8192	; 0x2000
 5a0:	91020000 	mrsls	r0, (UNDEF: 2)
 5a4:	0111196c 	tsteq	r1, ip, ror #18
 5a8:	31010000 	mrscc	r0, (UNDEF: 1)
 5ac:	002c0602 	eoreq	r0, ip, r2, lsl #12
 5b0:	91020000 	mrsls	r0, (UNDEF: 2)
 5b4:	0a1a0074 	beq	68078c <startup-0x1f97f874>
 5b8:	01000003 	tsteq	r0, r3
 5bc:	88060228 	stmdahi	r6, {r3, r5, r9}
 5c0:	2020000b 	eorcs	r0, r0, fp
 5c4:	01000000 	mrseq	r0, (UNDEF: 0)
 5c8:	0004bc9c 	muleq	r4, ip, ip
 5cc:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 5d0:	23022801 	movwcs	r2, #10241	; 0x2801
 5d4:	000002a9 	andeq	r0, r0, r9, lsr #5
 5d8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
 5dc:	0000025e 	andeq	r0, r0, lr, asr r2
 5e0:	2a022801 	bcs	8a5ec <startup-0x1ff75a14>
 5e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 5e8:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
 5ec:	00000265 	andeq	r0, r0, r5, ror #4
 5f0:	36022801 	strcc	r2, [r2], -r1, lsl #16
 5f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 5f8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 5fc:	00014b11 	andeq	r4, r1, r1, lsl fp
 600:	02080100 	andeq	r0, r8, #0, 2
 604:	000acc06 	andeq	ip, sl, r6, lsl #24
 608:	0000bc20 	andeq	fp, r0, r0, lsr #24
 60c:	029c0100 	addseq	r0, ip, #0, 2
 610:	16000005 	strne	r0, [r0], -r5
 614:	0801006f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6}
 618:	02a91e02 	adceq	r1, r9, #2, 28
 61c:	91020000 	mrsls	r0, (UNDEF: 2)
 620:	010c196c 	tsteq	ip, ip, ror #18
 624:	0b010000 	bleq	4062c <startup-0x1ffbf9d4>
 628:	002c0602 	eoreq	r0, ip, r2, lsl #12
 62c:	91020000 	mrsls	r0, (UNDEF: 2)
 630:	01111974 	tsteq	r1, r4, ror r9
 634:	0c010000 	stceq	0, cr0, [r1], {-0}
 638:	002c0602 	eoreq	r0, ip, r2, lsl #12
 63c:	91020000 	mrsls	r0, (UNDEF: 2)
 640:	f4110070 			; <UNDEFINED> instruction: 0xf4110070
 644:	01000002 	tsteq	r0, r2
 648:	6c0601fe 	stfvss	f0, [r6], {254}	; 0xfe
 64c:	6020000a 	eorvs	r0, r0, sl
 650:	01000000 	mrseq	r0, (UNDEF: 0)
 654:	0005699c 	muleq	r5, ip, r9
 658:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 65c:	1f01fe01 	svcne	0x0001fe01
 660:	000002a9 	andeq	r0, r0, r9, lsr #5
 664:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
 668:	0000021d 	andeq	r0, r0, sp, lsl r2
 66c:	06020001 	streq	r0, [r2], -r1
 670:	0000002c 	andeq	r0, r0, ip, lsr #32
 674:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
 678:	20000a7c 	andcs	r0, r0, ip, ror sl
 67c:	00000046 	andeq	r0, r0, r6, asr #32
 680:	01006918 	tsteq	r0, r8, lsl r9
 684:	2c0b0201 	sfmcs	f0, 4, [fp], {1}
 688:	02000000 	andeq	r0, r0, #0
 68c:	82177491 	andshi	r7, r7, #-1862270976	; 0x91000000
 690:	3220000a 	eorcc	r0, r0, #10
 694:	1b000000 	blne	69c <startup-0x1ffff964>
 698:	0000024a 	andeq	r0, r0, sl, asr #4
 69c:	03020301 	movweq	r0, #8961	; 0x2301
 6a0:	0000002c 	andeq	r0, r0, ip, lsr #32
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	03ab1100 			; <UNDEFINED> instruction: 0x03ab1100
 6ac:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
 6b0:	09dc0601 	ldmibeq	ip, {r0, r9, sl}^
 6b4:	00902000 	addseq	r2, r0, r0
 6b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6bc:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6c0:	01006f16 	tsteq	r0, r6, lsl pc
 6c4:	a91e01f0 	ldmdbge	lr, {r4, r5, r6, r7, r8}
 6c8:	02000002 	andeq	r0, r0, #2
 6cc:	1d196491 	cfldrsne	mvf6, [r9, #-580]	; 0xfffffdbc
 6d0:	01000002 	tsteq	r0, r2
 6d4:	2c0601f2 	stfcss	f0, [r6], {242}	; 0xf2
 6d8:	02000000 	andeq	r0, r0, #0
 6dc:	ec177091 	ldc	0, cr7, [r7], {145}	; 0x91
 6e0:	76200009 	strtvc	r0, [r0], -r9
 6e4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 6e8:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
 6ec:	002c0b01 	eoreq	r0, ip, r1, lsl #22
 6f0:	91020000 	mrsls	r0, (UNDEF: 2)
 6f4:	09f21774 	ldmibeq	r2!, {r2, r4, r5, r6, r8, r9, sl, ip}^
 6f8:	00622000 	rsbeq	r2, r2, r0
 6fc:	da190000 	ble	640704 <startup-0x1f9bf8fc>
 700:	01000001 	tsteq	r0, r1
 704:	2c0701f7 	stfcss	f0, [r7], {247}	; 0xf7
 708:	02000000 	andeq	r0, r0, #0
 70c:	e0196c91 	muls	r9, r1, ip
 710:	01000001 	tsteq	r0, r1
 714:	2c0701f8 	stfcss	f0, [r7], {248}	; 0xf8
 718:	02000000 	andeq	r0, r0, #0
 71c:	b31b6891 	tstlt	fp, #9502720	; 0x910000
 720:	01000002 	tsteq	r0, r2
 724:	2c0401c2 	stfcss	f0, [r4], {194}	; 0xc2
 728:	14000000 	strne	r0, [r0], #-0
 72c:	00000000 	andeq	r0, r0, r0
 730:	00011611 	andeq	r1, r1, r1, lsl r6
 734:	01dd0100 	bicseq	r0, sp, r0, lsl #2
 738:	00095406 	andeq	r5, r9, r6, lsl #8
 73c:	00008820 	andeq	r8, r0, r0, lsr #16
 740:	609c0100 	addsvs	r0, ip, r0, lsl #2
 744:	12000006 	andne	r0, r0, #6
 748:	0000011b 	andeq	r0, r0, fp, lsl r1
 74c:	1e01dd01 	cdpne	13, 0, cr13, cr1, cr1, {0}
 750:	00000171 	andeq	r0, r0, r1, ror r1
 754:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
 758:	01003070 	tsteq	r0, r0, ror r0
 75c:	650c01df 	strvs	r0, [ip, #-479]	; 0xfffffe21
 760:	02000001 	andeq	r0, r0, #1
 764:	70186491 	mulsvc	r8, r1, r4
 768:	01007274 	tsteq	r0, r4, ror r2
 76c:	710d01e2 	smlattvc	sp, r2, r1, r0
 770:	02000001 	andeq	r0, r0, #1
 774:	76176c91 			; <UNDEFINED> instruction: 0x76176c91
 778:	56200009 	strtpl	r0, [r0], -r9
 77c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 780:	01003170 	tsteq	r0, r0, ror r1
 784:	650d01e5 	strvs	r0, [sp, #-485]	; 0xfffffe1b
 788:	02000001 	andeq	r0, r0, #1
 78c:	39195c91 	ldmdbcc	r9, {r0, r4, r7, sl, fp, ip, lr}
 790:	01000002 	tsteq	r0, r2
 794:	d30801e8 	movwle	r0, #33256	; 0x81e8
 798:	02000000 	andeq	r0, r0, #0
 79c:	00005891 	muleq	r0, r1, r8
 7a0:	0003da11 	andeq	sp, r3, r1, lsl sl
 7a4:	01d10100 	bicseq	r0, r1, r0, lsl #2
 7a8:	00080a06 	andeq	r0, r8, r6, lsl #20
 7ac:	00014a20 	andeq	r4, r1, r0, lsr #20
 7b0:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
 7b4:	16000006 	strne	r0, [r0], -r6
 7b8:	d1010072 	tstle	r1, r2, ror r0
 7bc:	011c1b01 	tsteq	ip, r1, lsl #22
 7c0:	91020000 	mrsls	r0, (UNDEF: 2)
 7c4:	046b1954 	strbteq	r1, [fp], #-2388	; 0xfffff6ac
 7c8:	d3010000 	movwle	r0, #4096	; 0x1000
 7cc:	00a50801 	adceq	r0, r5, r1, lsl #16
 7d0:	91020000 	mrsls	r0, (UNDEF: 2)
 7d4:	6e651864 	cdpvs	8, 6, cr1, cr5, cr4, {3}
 7d8:	d4010064 	strle	r0, [r1], #-100	; 0xffffff9c
 7dc:	00a50801 	adceq	r0, r5, r1, lsl #16
 7e0:	91020000 	mrsls	r0, (UNDEF: 2)
 7e4:	02391960 	eorseq	r1, r9, #96, 18	; 0x180000
 7e8:	d5010000 	strle	r0, [r1, #-0]
 7ec:	00d30701 	sbcseq	r0, r3, r1, lsl #14
 7f0:	91020000 	mrsls	r0, (UNDEF: 2)
 7f4:	bb15005c 	bllt	54096c <startup-0x1fabf694>
 7f8:	01000003 	tsteq	r0, r3
 7fc:	2c0501a0 	stfcss	f0, [r5], {160}	; 0xa0
 800:	14000000 	strne	r0, [r0], #-0
 804:	f6200006 			; <UNDEFINED> instruction: 0xf6200006
 808:	01000001 	tsteq	r0, r1
 80c:	00078c9c 	muleq	r7, ip, ip
 810:	006c1600 	rsbeq	r1, ip, r0, lsl #12
 814:	1501a001 	strne	sl, [r1, #-1]
 818:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 81c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
 820:	000002d1 	ldrdeq	r0, [r0], -r1
 824:	0701a701 	streq	sl, [r1, -r1, lsl #14]
 828:	0000007e 	andeq	r0, r0, lr, ror r0
 82c:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 830:	0000048d 	andeq	r0, r0, sp, lsl #9
 834:	0701b601 	streq	fp, [r1, -r1, lsl #12]
 838:	0000007e 	andeq	r0, r0, lr, ror r0
 83c:	19679102 	stmdbne	r7!, {r1, r8, ip, pc}^
 840:	000001fa 	strdeq	r0, [r0], -sl
 844:	0701b701 	streq	fp, [r1, -r1, lsl #14]
 848:	0000007e 	andeq	r0, r0, lr, ror r0
 84c:	19669102 	stmdbne	r6!, {r1, r8, ip, pc}^
 850:	00000346 	andeq	r0, r0, r6, asr #6
 854:	0701b801 	streq	fp, [r1, -r1, lsl #16]
 858:	0000007e 	andeq	r0, r0, lr, ror r0
 85c:	186e9102 	stmdane	lr!, {r1, r8, ip, pc}^
 860:	b9010079 	stmdblt	r1, {r0, r3, r4, r5, r6}
 864:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 868:	91020000 	mrsls	r0, (UNDEF: 2)
 86c:	037b196d 	cmneq	fp, #1785856	; 0x1b4000
 870:	ba010000 	blt	40878 <startup-0x1ffbf788>
 874:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 878:	91020000 	mrsls	r0, (UNDEF: 2)
 87c:	0778176c 	ldrbeq	r1, [r8, -ip, ror #14]!
 880:	00882000 	addeq	r2, r8, r0
 884:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
 888:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
 88c:	00002c0b 	andeq	r2, r0, fp, lsl #24
 890:	68910200 	ldmvs	r1, {r9}
 894:	00078a1c 	andeq	r8, r7, ip, lsl sl
 898:	00001020 	andeq	r1, r0, r0, lsr #32
 89c:	00077100 	andeq	r7, r7, r0, lsl #2
 8a0:	02b31b00 	adcseq	r1, r3, #0, 22
 8a4:	c2010000 	andgt	r0, r1, #0
 8a8:	002c0401 	eoreq	r0, ip, r1, lsl #8
 8ac:	00140000 	andseq	r0, r4, r0
 8b0:	079c1700 	ldreq	r1, [ip, r0, lsl #14]
 8b4:	00102000 	andseq	r2, r0, r0
 8b8:	b31b0000 	tstlt	fp, #0
 8bc:	01000002 	tsteq	r0, r2
 8c0:	2c0401c2 	stfcss	f0, [r4], {194}	; 0xc2
 8c4:	14000000 	strne	r0, [r0], #-0
 8c8:	00000000 	andeq	r0, r0, r0
 8cc:	00032f1a 	andeq	r2, r3, sl, lsl pc
 8d0:	01990100 	orrseq	r0, r9, r0, lsl #2
 8d4:	0005e806 	andeq	lr, r5, r6, lsl #16
 8d8:	00002c20 	andeq	r2, r0, r0, lsr #24
 8dc:	d09c0100 	addsle	r0, ip, r0, lsl #2
 8e0:	16000007 	strne	r0, [r0], -r7
 8e4:	99010061 	stmdbls	r1, {r0, r5, r6}
 8e8:	00721a01 	rsbseq	r1, r2, r1, lsl #20
 8ec:	91020000 	mrsls	r0, (UNDEF: 2)
 8f0:	0062166c 	rsbeq	r1, r2, ip, ror #12
 8f4:	2c019901 			; <UNDEFINED> instruction: 0x2c019901
 8f8:	00000072 	andeq	r0, r0, r2, ror r0
 8fc:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
 900:	00000224 	andeq	r0, r0, r4, lsr #4
 904:	10019b01 	andne	r9, r1, r1, lsl #22
 908:	00000048 	andeq	r0, r0, r8, asr #32
 90c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 910:	0001cd11 	andeq	ip, r1, r1, lsl sp
 914:	018e0100 	orreq	r0, lr, r0, lsl #2
 918:	0005a606 	andeq	sl, r5, r6, lsl #12
 91c:	00004220 	andeq	r4, r0, r0, lsr #4
 920:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 924:	16000008 	strne	r0, [r0], -r8
 928:	8e010078 	mcrhi	0, 0, r0, cr1, cr8, {3}
 92c:	002c1701 	eoreq	r1, ip, r1, lsl #14
 930:	91020000 	mrsls	r0, (UNDEF: 2)
 934:	0079166c 	rsbseq	r1, r9, ip, ror #12
 938:	1e018e01 	cdpne	14, 0, cr8, cr1, cr1, {0}
 93c:	0000002c 	andeq	r0, r0, ip, lsr #32
 940:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
 944:	00000144 	andeq	r0, r0, r4, asr #2
 948:	10019001 	andne	r9, r1, r1
 94c:	00000048 	andeq	r0, r0, r8, asr #32
 950:	00779102 	rsbseq	r9, r7, r2, lsl #2
 954:	00019b11 	andeq	r9, r1, r1, lsl fp
 958:	01850100 	orreq	r0, r5, r0, lsl #2
 95c:	00056a06 	andeq	r6, r5, r6, lsl #20
 960:	00003c20 	andeq	r3, r0, r0, lsr #24
 964:	3a9c0100 	bcc	fe700d6c <paddle_object+0xde6fffb4>
 968:	16000008 	strne	r0, [r0], -r8
 96c:	85010063 	strhi	r0, [r1, #-99]	; 0xffffff9d
 970:	00482501 	subeq	r2, r8, r1, lsl #10
 974:	91020000 	mrsls	r0, (UNDEF: 2)
 978:	c21d0077 	andsgt	r0, sp, #119	; 0x77
 97c:	01000001 	tsteq	r0, r1
 980:	4806017d 	stmdami	r6, {r0, r2, r3, r4, r5, r6, r8}
 984:	22200005 	eorcs	r0, r0, #5
 988:	01000000 	mrseq	r0, (UNDEF: 0)
 98c:	029b119c 	addseq	r1, fp, #156, 2	; 0x27
 990:	74010000 	strvc	r0, [r1], #-0
 994:	050c0601 	streq	r0, [ip, #-1537]	; 0xfffff9ff
 998:	003c2000 	eorseq	r2, ip, r0
 99c:	9c010000 	stcls	0, cr0, [r1], {-0}
 9a0:	00000875 	andeq	r0, r0, r5, ror r8
 9a4:	0002a112 	andeq	sl, r2, r2, lsl r1
 9a8:	01740100 	cmneq	r4, r0, lsl #2
 9ac:	00004822 	andeq	r4, r0, r2, lsr #16
 9b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 9b4:	031f1500 	tsteq	pc, #0, 10
 9b8:	6a010000 	bvs	409c0 <startup-0x1ffbf640>
 9bc:	00480f01 	subeq	r0, r8, r1, lsl #30
 9c0:	04cc0000 	strbeq	r0, [ip], #0
 9c4:	00402000 	subeq	r2, r0, r0
 9c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9cc:	000008a0 	andeq	r0, r0, r0, lsr #17
 9d0:	00767218 	rsbseq	r7, r6, r8, lsl r2
 9d4:	10016f01 	andne	r6, r1, r1, lsl #30
 9d8:	00000048 	andeq	r0, r0, r8, asr #32
 9dc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 9e0:	00033415 	andeq	r3, r3, r5, lsl r4
 9e4:	01600100 	cmneq	r0, r0, lsl #2
 9e8:	0000480f 	andeq	r4, r0, pc, lsl #16
 9ec:	00048c00 	andeq	r8, r4, r0, lsl #24
 9f0:	00004020 	andeq	r4, r0, r0, lsr #32
 9f4:	cb9c0100 	blgt	fe700dfc <paddle_object+0xde700044>
 9f8:	18000008 	stmdane	r0, {r3}
 9fc:	01007672 	tsteq	r0, r2, ror r6
 a00:	48100165 	ldmdami	r0, {r0, r2, r5, r6, r8}
 a04:	02000000 	andeq	r0, r0, #0
 a08:	15006f91 	strne	r6, [r0, #-3985]	; 0xfffff06f
 a0c:	000001ac 	andeq	r0, r0, ip, lsr #3
 a10:	0f015601 	svceq	0x00015601
 a14:	00000048 	andeq	r0, r0, r8, asr #32
 a18:	20000458 	andcs	r0, r0, r8, asr r4
 a1c:	00000034 	andeq	r0, r0, r4, lsr r0
 a20:	08f69c01 	ldmeq	r6!, {r0, sl, fp, ip, pc}^
 a24:	72180000 	andsvc	r0, r8, #0
 a28:	5b010076 	blpl	40c08 <startup-0x1ffbf3f8>
 a2c:	00481001 	subeq	r1, r8, r1
 a30:	91020000 	mrsls	r0, (UNDEF: 2)
 a34:	f7110077 			; <UNDEFINED> instruction: 0xf7110077
 a38:	01000003 	tsteq	r0, r3
 a3c:	2e06014f 	adfcssm	f0, f6, #10.0
 a40:	2a200004 	bcs	800a58 <startup-0x1f7ff5a8>
 a44:	01000000 	mrseq	r0, (UNDEF: 0)
 a48:	00091e9c 	muleq	r9, ip, lr
 a4c:	032a1200 			; <UNDEFINED> instruction: 0x032a1200
 a50:	4f010000 	svcmi	0x00010000
 a54:	00482501 	subeq	r2, r8, r1, lsl #10
 a58:	91020000 	mrsls	r0, (UNDEF: 2)
 a5c:	4c110077 	ldcmi	0, cr0, [r1], {119}	; 0x77
 a60:	01000003 	tsteq	r0, r3
 a64:	04060148 	streq	r0, [r6], #-328	; 0xfffffeb8
 a68:	2a200004 	bcs	800a80 <startup-0x1f7ff580>
 a6c:	01000000 	mrseq	r0, (UNDEF: 0)
 a70:	0009469c 	muleq	r9, ip, r6
 a74:	02a11200 	adceq	r1, r1, #0, 4
 a78:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 a7c:	00482401 	subeq	r2, r8, r1, lsl #8
 a80:	91020000 	mrsls	r0, (UNDEF: 2)
 a84:	76110077 			; <UNDEFINED> instruction: 0x76110077
 a88:	01000004 	tsteq	r0, r4
 a8c:	cc06013d 	stfgts	f0, [r6], {61}	; 0x3d
 a90:	38200003 	stmdacc	r0!, {r0, r1}
 a94:	01000000 	mrseq	r0, (UNDEF: 0)
 a98:	00096e9c 	muleq	r9, ip, lr
 a9c:	01f51200 	mvnseq	r1, r0, lsl #4
 aa0:	3d010000 	stccc	0, cr0, [r1, #-0]
 aa4:	00482b01 	subeq	r2, r8, r1, lsl #22
 aa8:	91020000 	mrsls	r0, (UNDEF: 2)
 aac:	c51a0077 	ldrgt	r0, [sl, #-119]	; 0xffffff89
 ab0:	01000003 	tsteq	r0, r3
 ab4:	84060135 	strhi	r0, [r6], #-309	; 0xfffffecb
 ab8:	48200003 	stmdami	r0!, {r0, r1}
 abc:	01000000 	mrseq	r0, (UNDEF: 0)
 ac0:	0009a29c 	muleq	r9, ip, r2
 ac4:	00781600 	rsbseq	r1, r8, r0, lsl #12
 ac8:	20013501 	andcs	r3, r1, r1, lsl #10
 acc:	0000007e 	andeq	r0, r0, lr, ror r0
 ad0:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 ad4:	37010063 	strcc	r0, [r1, -r3, rrx]
 ad8:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 adc:	91020000 	mrsls	r0, (UNDEF: 2)
 ae0:	371a0077 			; <UNDEFINED> instruction: 0x371a0077
 ae4:	01000004 	tsteq	r0, r4
 ae8:	4c06012e 	stfmis	f0, [r6], {46}	; 0x2e
 aec:	38200003 	stmdacc	r0!, {r0, r1}
 af0:	01000000 	mrseq	r0, (UNDEF: 0)
 af4:	0009d69c 	muleq	r9, ip, r6
 af8:	00781600 	rsbseq	r1, r8, r0, lsl #12
 afc:	1e012e01 	cdpne	14, 0, cr2, cr1, cr1, {0}
 b00:	0000007e 	andeq	r0, r0, lr, ror r0
 b04:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 b08:	30010063 	andcc	r0, r1, r3, rrx
 b0c:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 b10:	91020000 	mrsls	r0, (UNDEF: 2)
 b14:	df150077 	svcle	0x00150077
 b18:	01000002 	tsteq	r0, r2
 b1c:	480f0119 	stmdami	pc, {r0, r3, r4, r8}	; <UNPREDICTABLE>
 b20:	e4000000 	str	r0, [r0], #-0
 b24:	68200002 	stmdavs	r0!, {r1}
 b28:	01000000 	mrseq	r0, (UNDEF: 0)
 b2c:	000a229c 	muleq	sl, ip, r2
 b30:	656b1800 	strbvs	r1, [fp, #-2048]!	; 0xfffff800
 b34:	1c010079 	stcne	0, cr0, [r1], {121}	; 0x79
 b38:	0a221301 	beq	885744 <startup-0x1f77a8bc>
 b3c:	91020000 	mrsls	r0, (UNDEF: 2)
 b40:	6f721858 	svcvs	0x00721858
 b44:	1e010077 	mcrne	0, 0, r0, cr1, cr7, {3}
 b48:	002c0901 	eoreq	r0, ip, r1, lsl #18
 b4c:	91020000 	mrsls	r0, (UNDEF: 2)
 b50:	6f63186c 	svcvs	0x0063186c
 b54:	1e01006c 	cdpne	0, 0, cr0, cr1, cr12, {3}
 b58:	002c0e01 	eoreq	r0, ip, r1, lsl #28
 b5c:	91020000 	mrsls	r0, (UNDEF: 2)
 b60:	480a0068 	stmdami	sl, {r3, r5, r6}
 b64:	32000000 	andcc	r0, r0, #0
 b68:	0b00000a 	bleq	b98 <startup-0x1ffff468>
 b6c:	00000025 	andeq	r0, r0, r5, lsr #32
 b70:	601e000f 	andsvs	r0, lr, pc
 b74:	01000001 	tsteq	r0, r1
 b78:	2c050103 	stfcss	f0, [r5], {3}
 b7c:	90000000 	andls	r0, r0, r0
 b80:	54200002 	strtpl	r0, [r0], #-2
 b84:	01000000 	mrseq	r0, (UNDEF: 0)
 b88:	000a5c9c 	muleq	sl, ip, ip
 b8c:	00631800 	rsbeq	r1, r3, r0, lsl #16
 b90:	13010b01 	movwne	r0, #6913	; 0x1b01
 b94:	00000048 	andeq	r0, r0, r8, asr #32
 b98:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b9c:	00023e1f 	andeq	r3, r2, pc, lsl lr
 ba0:	06f10100 	ldrbteq	r0, [r1], r0, lsl #2
 ba4:	2000023e 	andcs	r0, r0, lr, lsr r2
 ba8:	00000052 	andeq	r0, r0, r2, asr r0
 bac:	0a829c01 	beq	fe0a7bb8 <paddle_object+0xde0a6e00>
 bb0:	72200000 	eorvc	r0, r0, #0
 bb4:	0100776f 	tsteq	r0, pc, ror #14
 bb8:	002520f1 	strdeq	r2, [r5], -r1	; <UNPREDICTABLE>
 bbc:	91020000 	mrsls	r0, (UNDEF: 2)
 bc0:	7e210074 	mcrvc	0, 1, r0, cr1, cr4, {3}
 bc4:	01000002 	tsteq	r0, r2
 bc8:	021a06e4 	andseq	r0, sl, #228, 12	; 0xe400000
 bcc:	00242000 	eoreq	r2, r4, r0
 bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
 bd4:	00000aa7 	andeq	r0, r0, r7, lsr #21
 bd8:	00736d20 	rsbseq	r6, r3, r0, lsr #26
 bdc:	251fe401 	ldrcs	lr, [pc, #-1025]	; 7e3 <startup-0x1ffff81d>
 be0:	02000000 	andeq	r0, r0, #0
 be4:	21007491 			; <UNDEFINED> instruction: 0x21007491
 be8:	0000040e 	andeq	r0, r0, lr, lsl #8
 bec:	e406d201 	str	sp, [r6], #-513	; 0xfffffdff
 bf0:	36200001 	strtcc	r0, [r0], -r1
 bf4:	01000000 	mrseq	r0, (UNDEF: 0)
 bf8:	000ae39c 	muleq	sl, ip, r3
 bfc:	736d2000 	cmnvc	sp, #0
 c00:	1fd20100 	svcne	0x00d20100
 c04:	00000025 	andeq	r0, r0, r5, lsr #32
 c08:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
 c0c:	200001ec 	andcs	r0, r0, ip, ror #3
 c10:	00000024 	andeq	r0, r0, r4, lsr #32
 c14:	01006922 	tsteq	r0, r2, lsr #18
 c18:	002c0bda 	ldrdeq	r0, [ip], -sl	; <UNPREDICTABLE>
 c1c:	91020000 	mrsls	r0, (UNDEF: 2)
 c20:	23000074 	movwcs	r0, #116	; 0x74
 c24:	0000017e 	andeq	r0, r0, lr, ror r1
 c28:	a006c701 	andge	ip, r6, r1, lsl #14
 c2c:	44200001 	strtmi	r0, [r0], #-1
 c30:	01000000 	mrseq	r0, (UNDEF: 0)
 c34:	03e9239c 	mvneq	r2, #156, 6	; 0x70000002
 c38:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
 c3c:	00013406 	andeq	r3, r1, r6, lsl #8
 c40:	00006c20 	andeq	r6, r0, r0, lsr #24
 c44:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 c48:	00000471 	andeq	r0, r0, r1, ror r4
 c4c:	7c069d01 	stcvc	13, cr9, [r6], {1}
 c50:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
 c54:	01000000 	mrseq	r0, (UNDEF: 0)
 c58:	0063229c 	mlseq	r3, ip, r2, r2
 c5c:	7e079f01 	cdpvc	15, 0, cr9, cr7, cr1, {0}
 c60:	02000000 	andeq	r0, r0, #0
 c64:	70226791 	mlavc	r2, r1, r7, r6
 c68:	0aa00100 	beq	fe801070 <paddle_object+0xde8002b8>
 c6c:	000002a9 	andeq	r0, r0, r9, lsr #5
 c70:	226c9102 	rsbcs	r9, ip, #-2147483648	; 0x80000000
 c74:	a1010072 	tstge	r1, r2, ror r0
 c78:	0002a90a 	andeq	sl, r2, sl, lsl #18
 c7c:	68910200 	ldmvs	r1, {r9}
 c80:	00026c25 	andeq	r6, r2, r5, lsr #24
 c84:	02a30100 	adceq	r0, r3, #0, 2
 c88:	0000002c 	andeq	r0, r0, ip, lsr #32
 c8c:	00000b52 	andeq	r0, r0, r2, asr fp
 c90:	56130014 			; <UNDEFINED> instruction: 0x56130014
 c94:	01000004 	tsteq	r0, r4
 c98:	002c02a4 	eoreq	r0, ip, r4, lsr #5
 c9c:	00140000 	andseq	r0, r4, r0
 ca0:	007c0000 	rsbseq	r0, ip, r0
 ca4:	00040000 	andeq	r0, r4, r0
 ca8:	0000034c 	andeq	r0, r0, ip, asr #6
 cac:	003e0104 	eorseq	r0, lr, r4, lsl #2
 cb0:	940c0000 	strls	r0, [ip], #-0
 cb4:	00000004 	andeq	r0, r0, r4
	...
 cc0:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
 cc4:	02000007 	andeq	r0, r0, #7
 cc8:	0000024a 	andeq	r0, r0, sl, asr #4
 ccc:	fe062401 	cdp2	4, 0, cr2, cr6, cr1, {0}
 cd0:	0620000c 	strteq	r0, [r0], -ip
 cd4:	01000000 	mrseq	r0, (UNDEF: 0)
 cd8:	02b3029c 	adcseq	r0, r3, #156, 4	; 0xc0000009
 cdc:	1d010000 	stcne	0, cr0, [r1, #-0]
 ce0:	000cf806 	andeq	pc, ip, r6, lsl #16
 ce4:	00000620 	andeq	r0, r0, r0, lsr #12
 ce8:	029c0100 	addseq	r0, ip, #0, 2
 cec:	00000456 	andeq	r0, r0, r6, asr r4
 cf0:	f2061601 	vmax.s8	d1, d6, d1
 cf4:	0620000c 	strteq	r0, [r0], -ip
 cf8:	01000000 	mrseq	r0, (UNDEF: 0)
 cfc:	026c029c 	rsbeq	r0, ip, #156, 4	; 0xc0000009
 d00:	0f010000 	svceq	0x00010000
 d04:	000cec06 	andeq	lr, ip, r6, lsl #24
 d08:	00000620 	andeq	r0, r0, r0, lsr #12
 d0c:	029c0100 	addseq	r0, ip, #0, 2
 d10:	0000049e 	muleq	r0, lr, r4
 d14:	00010601 	andeq	r0, r1, r1, lsl #12
 d18:	0c200000 	stceq	0, cr0, [r0], #-0
 d1c:	01000000 	mrseq	r0, (UNDEF: 0)
 d20:	Address 0x0000000000000d20 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	13490b39 	movtne	r0, #39737	; 0x9b39
  40:	00000b38 	andeq	r0, r0, r8, lsr fp
  44:	0b002405 	bleq	9060 <startup-0x1fff6fa0>
  48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  4c:	0600000e 	streq	r0, [r0], -lr
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	0013490b 	andseq	r4, r3, fp, lsl #18
  64:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050900 	andeq	r0, r5, r0, lsl #18
  84:	0b3a0803 	bleq	e82098 <startup-0x1f17df68>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	0f0a0000 	svceq	0x000a0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0b000013 	bleq	ec <startup-0x1fffff14>
  9c:	0e03012e 	adfeqsp	f0, f3, #0.5
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	110e1b0e 	tstne	lr, lr, lsl #22
  c0:	10061201 	andne	r1, r6, r1, lsl #4
  c4:	02000017 	andeq	r0, r0, #23
  c8:	0b0b0024 	bleq	2c0160 <startup-0x1fd3fea0>
  cc:	0e030b3e 	vmoveq.16	d3[0], r0
  d0:	24030000 	strcs	r0, [r3], #-0
  d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d8:	0008030b 	andeq	r0, r8, fp, lsl #6
  dc:	000f0400 	andeq	r0, pc, r0, lsl #8
  e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  e4:	13050000 	movwne	r0, #20480	; 0x5000
  e8:	3a0b0b01 	bcc	2c2cf4 <startup-0x1fd3d30c>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0803 	bleq	e8210c <startup-0x1f17def4>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	16070000 	strne	r0, [r7], -r0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0013490b 	andseq	r4, r3, fp, lsl #18
 114:	01130800 	tsteq	r3, r0, lsl #16
 118:	0b0b0e03 	bleq	2c392c <startup-0x1fd3c6d4>
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	13010b39 	movwne	r0, #6969	; 0x1b39
 124:	0d090000 	stceq	0, cr0, [r9, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 134:	0a00000b 	beq	168 <startup-0x1ffffe98>
 138:	13490101 	movtne	r0, #37121	; 0x9101
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 144:	000b2f13 	andeq	r2, fp, r3, lsl pc
 148:	01150c00 	tsteq	r5, r0, lsl #24
 14c:	13011927 	movwne	r1, #6439	; 0x1927
 150:	050d0000 	streq	r0, [sp, #-0]
 154:	00134900 	andseq	r4, r3, r0, lsl #18
 158:	00340e00 	eorseq	r0, r4, r0, lsl #28
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	0b390b3b 	bleq	e42e54 <startup-0x1f1bd1ac>
 164:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 168:	00001802 	andeq	r1, r0, r2, lsl #16
 16c:	0300340f 	movweq	r3, #1039	; 0x40f
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	002e1000 	eoreq	r1, lr, r0
 180:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	11000019 	tstne	r0, r9, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	0b39053b 	bleq	e41694 <startup-0x1f1be96c>
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b0:	12000013 	andne	r0, r0, #19
 1b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1bc:	13490b39 	movtne	r0, #39737	; 0x9b39
 1c0:	00001802 	andeq	r1, r0, r2, lsl #16
 1c4:	3f012e13 	svccc	0x00012e13
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1d4:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	3f012e15 	svccc	0x00012e15
 1e0:	3a0e0319 	bcc	380e4c <startup-0x1fc7f1b4>
 1e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1f0:	96184006 	ldrls	r4, [r8], -r6
 1f4:	13011942 	movwne	r1, #6466	; 0x1942
 1f8:	05160000 	ldreq	r0, [r6, #-0]
 1fc:	3a080300 	bcc	200e04 <startup-0x1fdff1fc>
 200:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 204:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 208:	17000018 	smladne	r0, r8, r0, r0
 20c:	0111010b 	tsteq	r1, fp, lsl #2
 210:	00000612 	andeq	r0, r0, r2, lsl r6
 214:	03003418 	movweq	r3, #1048	; 0x418
 218:	3b0b3a08 	blcc	2cea40 <startup-0x1fd315c0>
 21c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 220:	00180213 	andseq	r0, r8, r3, lsl r2
 224:	00341900 	eorseq	r1, r4, r0, lsl #18
 228:	0b3a0e03 	bleq	e83a3c <startup-0x1f17c5c4>
 22c:	0b39053b 	bleq	e41720 <startup-0x1f1be8e0>
 230:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 234:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 238:	03193f01 	tsteq	r9, #1, 30
 23c:	3b0b3a0e 	blcc	2cea7c <startup-0x1fd31584>
 240:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 244:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 248:	97184006 	ldrls	r4, [r8, -r6]
 24c:	13011942 	movwne	r1, #6466	; 0x1942
 250:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 254:	03193f01 	tsteq	r9, #1, 30
 258:	3b0b3a0e 	blcc	2cea98 <startup-0x1fd31568>
 25c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 260:	00193c13 	andseq	r3, r9, r3, lsl ip
 264:	010b1c00 	tsteq	fp, r0, lsl #24
 268:	06120111 			; <UNDEFINED> instruction: 0x06120111
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	3f002e1d 	svccc	0x00002e1d
 274:	3a0e0319 	bcc	380ee0 <startup-0x1fc7f120>
 278:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 27c:	1119270b 	tstne	r9, fp, lsl #14
 280:	40061201 	andmi	r1, r6, r1, lsl #4
 284:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 288:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 28c:	03193f01 	tsteq	r9, #1, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 298:	11134919 	tstne	r3, r9, lsl r9
 29c:	40061201 	andmi	r1, r6, r1, lsl #4
 2a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a4:	00001301 	andeq	r1, r0, r1, lsl #6
 2a8:	3f012e1f 	svccc	0x00012e1f
 2ac:	3a0e0319 	bcc	380f18 <startup-0x1fc7f0e8>
 2b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b4:	1119270b 	tstne	r9, fp, lsl #14
 2b8:	40061201 	andmi	r1, r6, r1, lsl #4
 2bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2c0:	00001301 	andeq	r1, r0, r1, lsl #6
 2c4:	03000520 	movweq	r0, #1312	; 0x520
 2c8:	3b0b3a08 	blcc	2ceaf0 <startup-0x1fd31510>
 2cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2d0:	00180213 	andseq	r0, r8, r3, lsl r2
 2d4:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 2d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2dc:	0b3b0b3a 	bleq	ec2fcc <startup-0x1f13d034>
 2e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2ec:	00130119 	andseq	r0, r3, r9, lsl r1
 2f0:	00342200 	eorseq	r2, r4, r0, lsl #4
 2f4:	0b3a0803 	bleq	e82308 <startup-0x1f17dcf8>
 2f8:	0b390b3b 	bleq	e42fec <startup-0x1f1bd014>
 2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 300:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 304:	03193f00 	tsteq	r9, #0, 30
 308:	3b0b3a0e 	blcc	2ceb48 <startup-0x1fd314b8>
 30c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 310:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 314:	97184006 	ldrls	r4, [r8, -r6]
 318:	00001942 	andeq	r1, r0, r2, asr #18
 31c:	3f012e24 	svccc	0x00012e24
 320:	3a0e0319 	bcc	380f8c <startup-0x1fc7f074>
 324:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 328:	1119270b 	tstne	r9, fp, lsl #14
 32c:	40061201 	andmi	r1, r6, r1, lsl #4
 330:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 334:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 338:	03193f01 	tsteq	r9, #1, 30
 33c:	3b0b3a0e 	blcc	2ceb7c <startup-0x1fd31484>
 340:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 344:	01193c13 	tsteq	r9, r3, lsl ip
 348:	00000013 	andeq	r0, r0, r3, lsl r0
 34c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 350:	030b130e 	movweq	r1, #45838	; 0xb30e
 354:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 358:	10011117 	andne	r1, r1, r7, lsl r1
 35c:	02000017 	andeq	r0, r0, #23
 360:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	0b390b3b 	bleq	e4305c <startup-0x1f1bcfa4>
 36c:	01111927 	tsteq	r1, r7, lsr #18
 370:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 374:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000006a 	andeq	r0, r0, sl, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01400002 	cmpeq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000007c 	andcs	r0, r0, ip, ror r0
  34:	00000c70 	andeq	r0, r0, r0, ror ip
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0ca20002 	stceq	0, cr0, [r2], #8
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000cec 	andcs	r0, r0, ip, ror #25
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000072 	andeq	r0, r0, r2, ror r0
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
  20:	00632e67 	rsbeq	r2, r3, r7, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	01160320 	tsteq	r6, r0, lsr #6
  34:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
  38:	04020010 	streq	r0, [r2], #-16
  3c:	15052001 	strne	r2, [r5, #-1]
  40:	01040200 	mrseq	r0, R12_usr
  44:	0008053c 	andeq	r0, r8, ip, lsr r5
  48:	3c010402 	cfstrscc	mvf0, [r1], {2}
  4c:	200f0522 	andcs	r0, pc, r2, lsr #10
  50:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
  54:	03052105 	movweq	r2, #20741	; 0x5105
  58:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
  5c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
  60:	11054b08 	tstne	r5, r8, lsl #22
  64:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
  68:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
  6c:	01052e08 	tsteq	r5, r8, lsl #28
  70:	00050231 	andeq	r0, r5, r1, lsr r2
  74:	076f0101 	strbeq	r0, [pc, -r1, lsl #2]!
  78:	00030000 	andeq	r0, r3, r0
  7c:	0000001d 	andeq	r0, r0, sp, lsl r0
  80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  84:	0101000d 	tsteq	r1, sp
  88:	00000101 	andeq	r0, r0, r1, lsl #2
  8c:	00000100 	andeq	r0, r0, r0, lsl #2
  90:	616d0001 	cmnvs	sp, r1
  94:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
  98:	00000000 	andeq	r0, r0, r0
  9c:	00010500 	andeq	r0, r1, r0, lsl #10
  a0:	007c0205 	rsbseq	r0, ip, r5, lsl #4
  a4:	9d032000 	stcls	0, cr2, [r3, #-0]
  a8:	0a050101 	beq	1404b4 <startup-0x1febfb4c>
  ac:	02052f3e 	andeq	r2, r5, #62, 30	; 0xf8
  b0:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff189 <paddle_object+0xdfffe3d1>
  b4:	03053104 	movweq	r3, #20740	; 0x5104
  b8:	04053d2e 	streq	r3, [r5], #-3374	; 0xfffff2d2
  bc:	2e030567 	cfsh32cs	mvfx0, mvfx3, #55
  c0:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
  c4:	03055806 	movweq	r5, #22534	; 0x5806
  c8:	3d070522 	cfstr32cc	mvfx0, [r7, #-136]	; 0xffffff78
  cc:	05590305 	ldrbeq	r0, [r9, #-773]	; 0xfffffcfb
  d0:	0c05a00d 	stceq	0, cr10, [r5], {13}
  d4:	4a04052e 	bmi	101594 <startup-0x1fefea6c>
  d8:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
  dc:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
  e0:	210c0558 	tstcs	ip, r8, asr r5
  e4:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
  e8:	0d05210e 	stfeqs	f2, [r5, #-56]	; 0xffffffc8
  ec:	4a04052e 	bmi	1015ac <startup-0x1fefea54>
  f0:	74030305 	strvc	r0, [r3], #-773	; 0xfffffcfb
  f4:	24040520 	strcs	r0, [r4], #-1312	; 0xfffffae0
  f8:	0b030105 	bleq	c0514 <startup-0x1ff3faec>
  fc:	02058520 	andeq	r8, r5, #32, 10	; 0x8000000
 100:	20220530 	eorcs	r0, r2, r0, lsr r5
 104:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 108:	2f05202c 	svccs	0x0005202c
 10c:	3105592f 	tstcc	r5, pc, lsr #18
 110:	592f0567 	stmdbpl	pc!, {r0, r1, r2, r5, r6, r8, sl}	; <UNPREDICTABLE>
 114:	68010559 	stmdavs	r1, {r0, r3, r4, r6, r8, sl}
 118:	02053208 	andeq	r3, r5, #8, 4	; 0x80000000
 11c:	200c0530 	andcs	r0, ip, r0, lsr r5
 120:	052f0205 	streq	r0, [pc, #-517]!	; ffffff23 <paddle_object+0xdffff16b>
 124:	0205200c 	andeq	r2, r5, #12
 128:	200b052f 	andcs	r0, fp, pc, lsr #10
 12c:	052f0205 	streq	r0, [pc, #-517]!	; ffffff2f <paddle_object+0xdffff177>
 130:	0705200c 	streq	r2, [r5, -ip]
 134:	0008052f 	andeq	r0, r8, pc, lsr #10
 138:	20010402 	andcs	r0, r1, r2, lsl #8
 13c:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 140:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 144:	04020007 	streq	r0, [r2], #-7
 148:	02053c01 	andeq	r3, r5, #256	; 0x100
 14c:	200c0521 	andcs	r0, ip, r1, lsr #10
 150:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 154:	05510b05 	ldrbeq	r0, [r1, #-2821]	; 0xfffff4fb
 158:	03052e02 	movweq	r2, #24066	; 0x5e02
 15c:	03040200 	movweq	r0, #16896	; 0x4200
 160:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 164:	02002f03 	andeq	r2, r0, #3, 30
 168:	002f0304 	eoreq	r0, pc, r4, lsl #6
 16c:	2f030402 	svccs	0x00030402
 170:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 174:	05290304 	streq	r0, [r9, #-772]!	; 0xfffffcfc
 178:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 17c:	02053c01 	andeq	r3, r5, #256	; 0x100
 180:	01040200 	mrseq	r0, R12_usr
 184:	44010520 	strmi	r0, [r1], #-1312	; 0xfffffae0
 188:	5102055b 	tstpl	r2, fp, asr r5
 18c:	4f9f0105 	svcmi	0x009f0105
 190:	054f0505 	strbeq	r0, [pc, #-1285]	; fffffc93 <paddle_object+0xdfffeedb>
 194:	1c05920d 	sfmne	f1, 1, [r5], {13}
 198:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 19c:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 1a0:	0505201c 	streq	r2, [r5, #-28]	; 0xffffffe4
 1a4:	210d052e 	tstcs	sp, lr, lsr #10
 1a8:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 1ac:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 1b0:	201c0521 	andscs	r0, ip, r1, lsr #10
 1b4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1b8:	1c05210d 	stfnes	f2, [r5], {13}
 1bc:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 1c0:	85240105 	strhi	r0, [r4, #-261]!	; 0xfffffefb
 1c4:	05440905 	strbeq	r0, [r4, #-2309]	; 0xfffff6fb
 1c8:	0c052007 	stceq	0, cr2, [r5], {7}
 1cc:	4a08053d 	bmi	2016c8 <startup-0x1fdfe938>
 1d0:	05211005 	streq	r1, [r1, #-5]!
 1d4:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
 1d8:	2110054a 	tstcs	r0, sl, asr #10
 1dc:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff5df <paddle_object+0xdfffe827>
 1e0:	10054a08 	andne	r4, r5, r8, lsl #20
 1e4:	2f0c0521 	svccs	0x000c0521
 1e8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1ec:	0c052110 	stfeqs	f2, [r5], {16}
 1f0:	21010530 	tstcs	r1, r0, lsr r5
 1f4:	3e130569 	cfmsc32cc	mvfx0, mvfx3, mvfx9
 1f8:	05690c05 	strbeq	r0, [r9, #-3077]!	; 0xfffff3fb
 1fc:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 200:	4b140522 	blmi	501690 <startup-0x1fafe970>
 204:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
 208:	1f053e0d 	svcne	0x00053e0d
 20c:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 210:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
 214:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 218:	001d0520 	andseq	r0, sp, r0, lsr #10
 21c:	03020402 	movweq	r0, #9218	; 0x2402
 220:	05053c7a 	streq	r3, [r5, #-3194]	; 0xfffff386
 224:	01040200 	mrseq	r0, R12_usr
 228:	3c09033c 	stccc	3, cr0, [r9], {60}	; 0x3c
 22c:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 230:	04020001 	streq	r0, [r2], #-1
 234:	05792101 	ldrbeq	r2, [r9, #-257]!	; 0xfffffeff
 238:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 23c:	4b0e0520 	blmi	3816c4 <startup-0x1fc7e93c>
 240:	05660205 	strbeq	r0, [r6, #-517]!	; 0xfffffdfb
 244:	0105200e 	tsteq	r5, lr
 248:	0605694b 	streq	r6, [r5], -fp, asr #18
 24c:	20040568 	andcs	r0, r4, r8, ror #10
 250:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 254:	02059e04 	andeq	r9, r5, #4, 28	; 0x40
 258:	200e052f 	andcs	r0, lr, pc, lsr #10
 25c:	69670105 	stmdbvs	r7!, {r0, r2, r8}^
 260:	2f680205 	svccs	0x00680205
 264:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
 268:	2f3d0205 	svccs	0x003d0205
 26c:	2f01053d 	svccs	0x0001053d
 270:	67020569 	strvs	r0, [r2, -r9, ror #10]
 274:	01053d3d 	tsteq	r5, sp, lsr sp
 278:	02054d59 	andeq	r4, r5, #5696	; 0x1640
 27c:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 280:	054d5901 	strbeq	r5, [sp, #-2305]	; 0xfffff6ff
 284:	2f3d3d02 	svccs	0x003d3d02
 288:	052f1505 	streq	r1, [pc, #-1285]!	; fffffd8b <paddle_object+0xdfffefd3>
 28c:	02052010 	andeq	r2, r5, #16
 290:	3d09053d 	cfstr32cc	mvfx0, [r9, #-244]	; 0xffffff0c
 294:	772f0105 	strvc	r0, [pc, -r5, lsl #2]!
 298:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 29c:	0205200d 	andeq	r2, r5, #13
 2a0:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 2a4:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 2a8:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2ac:	01052f09 	tsteq	r5, r9, lsl #30
 2b0:	0205a12f 	andeq	sl, r5, #-1073741813	; 0xc000000b
 2b4:	200d053d 	andcs	r0, sp, sp, lsr r5
 2b8:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 2ac <startup-0x1ffffd54>
 2bc:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 2c0:	0d055902 	vstreq.16	s10, [r5, #-4]	; <UNPREDICTABLE>
 2c4:	2f090520 	svccs	0x00090520
 2c8:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 2cc:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 2d0:	0402000a 	streq	r0, [r2], #-10
 2d4:	1e052001 	cdpne	0, 0, cr2, cr5, cr1, {0}
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	0007053c 	andeq	r0, r7, ip, lsr r5
 2e0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2e4:	3d300205 	lfmcc	f0, 4, [r0, #-20]!	; 0xffffffec
 2e8:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 2ec:	2f02054d 	svccs	0x0002054d
 2f0:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 2f4:	053f3d01 	ldreq	r3, [pc, #-3329]!	; fffff5fb <paddle_object+0xdfffe843>
 2f8:	0a056707 	beq	159f1c <startup-0x1fea60e4>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	001e0520 	andseq	r0, lr, r0, lsr #10
 304:	3c010402 	cfstrscc	mvf0, [r1], {2}
 308:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 30c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 310:	593d3002 	ldmdbpl	sp!, {r1, ip, sp}
 314:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 318:	05591b05 	ldrbeq	r1, [r9, #-2821]	; 0xfffff4fb
 31c:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
 320:	3e0a054b 	cfsh32cc	mvfx0, mvfx10, #43
 324:	055a0205 	ldrbeq	r0, [sl, #-517]	; 0xfffffdfb
 328:	054e9f01 	strbeq	r9, [lr, #-3841]	; 0xfffff0ff
 32c:	07055910 	smladeq	r5, r0, r9, r5
 330:	2e050559 	cfrshl32cs	mvfx5, mvfx9, r0
 334:	4b01052f 	blmi	417f8 <startup-0x1ffbe808>
 338:	4c0c054d 	cfstr32mi	mvfx0, [ip], {77}	; 0x4d
 33c:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 340:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 344:	13052e01 	movwne	r2, #24065	; 0x5e01
 348:	01040200 	mrseq	r0, R12_usr
 34c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 350:	002e0603 	eoreq	r0, lr, r3, lsl #12
 354:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
 358:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 35c:	20060604 	andcs	r0, r6, r4, lsl #12
 360:	02002c05 	andeq	r2, r0, #1280	; 0x500
 364:	054a0604 	strbeq	r0, [sl, #-1540]	; 0xfffff9fc
 368:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 36c:	3b052e06 	blcc	14bb8c <startup-0x1feb4474>
 370:	07040200 	streq	r0, [r4, -r0, lsl #4]
 374:	0033052e 	eorseq	r0, r3, lr, lsr #10
 378:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
 37c:	09040200 	stmdbeq	r4, {r9}
 380:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 384:	052e0a04 	streq	r0, [lr, #-2564]!	; 0xfffff5fc
 388:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 38c:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
 390:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 394:	5305740c 	movwpl	r7, #21516	; 0x540c
 398:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 39c:	005b052e 	subseq	r0, fp, lr, lsr #10
 3a0:	2e0d0402 	cdpcs	4, 0, cr0, cr13, cr2, {0}
 3a4:	02005305 	andeq	r5, r0, #335544320	; 0x14000000
 3a8:	002e0d04 	eoreq	r0, lr, r4, lsl #26
 3ac:	060f0402 	streq	r0, [pc], -r2, lsl #8
 3b0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3b4:	44052e10 	strmi	r2, [r5], #-3600	; 0xfffff1f0
 3b8:	12040200 	andne	r0, r4, #0, 4
 3bc:	6d052006 	stcvs	0, cr2, [r5, #-24]	; 0xffffffe8
 3c0:	12040200 	andne	r0, r4, #0, 4
 3c4:	00740520 	rsbseq	r0, r4, r0, lsr #10
 3c8:	2e120402 	cfmulscs	mvf0, mvf2, mvf2
 3cc:	02007c05 	andeq	r7, r0, #1280	; 0x500
 3d0:	052e1304 	streq	r1, [lr, #-772]!	; 0xfffffcfc
 3d4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 3d8:	02002e13 	andeq	r2, r0, #304	; 0x130
 3dc:	2e061504 	cfsh32cs	mvfx1, mvfx6, #4
 3e0:	16040200 	strne	r0, [r4], -r0, lsl #4
 3e4:	0065052e 	rsbeq	r0, r5, lr, lsr #10
 3e8:	06180402 	ldreq	r0, [r8], -r2, lsl #8
 3ec:	00050520 	andeq	r0, r5, r0, lsr #10
 3f0:	20180402 	andscs	r0, r8, r2, lsl #8
 3f4:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
 3f8:	1905320f 	stmdbne	r5, {r0, r1, r2, r3, r9, ip, sp}
 3fc:	2e12053c 	mrccs	5, 0, r0, cr2, cr12, {1}
 400:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 404:	32053c28 	andcc	r3, r5, #40, 24	; 0x2800
 408:	2e2b053c 	mcrcs	5, 1, r0, cr11, cr12, {1}
 40c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
 410:	09053c05 	stmdbeq	r5, {r0, r2, sl, fp, ip, sp}
 414:	05055a2f 	streq	r5, [r5, #-2607]	; 0xfffff5d1
 418:	5a03054b 	bpl	c194c <startup-0x1ff3e6b4>
 41c:	840b0575 	strhi	r0, [fp], #-1397	; 0xfffffa8b
 420:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 424:	03052e05 	movweq	r2, #24069	; 0x5e05
 428:	15057530 	strne	r7, [r5, #-1328]	; 0xfffffad0
 42c:	2e1f0584 	cdpcs	5, 1, cr0, cr15, cr4, {4}
 430:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 434:	23054b19 	movwcs	r4, #23321	; 0x5b19
 438:	2e1c053c 	mrccs	5, 0, r0, cr12, cr12, {1}
 43c:	05201005 	streq	r1, [r0, #-5]!
 440:	4b3d3c07 	blmi	f4f464 <startup-0x1f0b0b9c>
 444:	055a0b05 	ldrbeq	r0, [sl, #-2821]	; 0xfffff4fb
 448:	05052e15 	streq	r2, [r5, #-3605]	; 0xfffff1eb
 44c:	2f09052e 	svccs	0x0009052e
 450:	4b14055a 	blmi	5019c0 <startup-0x1fafe640>
 454:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 458:	06052002 	streq	r2, [r5], -r2
 45c:	59040522 	stmdbpl	r4, {r1, r5, r8, sl}
 460:	83090592 	movwhi	r0, #38290	; 0x9592
 464:	3c110591 	cfldr32cc	mvfx0, [r1], {145}	; 0x91
 468:	303c0605 	eorscc	r0, ip, r5, lsl #12
 46c:	05910a05 	ldreq	r0, [r1, #2565]	; 0xa05
 470:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 474:	74760302 	ldrbtvc	r0, [r6], #-770	; 0xfffffcfe
 478:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 47c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 480:	04020002 	streq	r0, [r2], #-2
 484:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 488:	053c0f03 	ldreq	r0, [ip, #-3843]!	; 0xfffff0fd
 48c:	054d2101 	strbeq	r2, [sp, #-257]	; 0xfffffeff
 490:	0a054f10 	beq	1540d8 <startup-0x1feabf28>
 494:	3c22052e 	cfstr32cc	mvfx0, [r2], #-184	; 0xffffff48
 498:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 49c:	38052e32 	stmdacc	r5, {r1, r4, r5, r9, sl, fp, sp}
 4a0:	2e35052e 	cdpcs	5, 3, cr0, cr5, cr14, {1}
 4a4:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
 4a8:	43053c49 	movwmi	r3, #23625	; 0x5c49
 4ac:	2e55052e 	cdpcs	5, 5, cr0, cr5, cr14, {1}
 4b0:	05666605 	strbeq	r6, [r6, #-1541]!	; 0xfffff9fb
 4b4:	1005586d 	andne	r5, r5, sp, ror #16
 4b8:	2e16054b 	cfmac32cs	mvfx0, mvfx6, mvfx11
 4bc:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 4c0:	29052e0a 	stmdbcs	r5, {r1, r3, r9, sl, fp, sp}
 4c4:	2e23053c 	mcrcs	5, 1, r0, cr3, cr12, {1}
 4c8:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 4cc:	3c052e3f 	stccc	14, cr2, [r5], {63}	; 0x3f
 4d0:	2e33052e 	cdpcs	5, 3, cr0, cr3, cr14, {1}
 4d4:	052e5005 	streq	r5, [lr, #-5]!
 4d8:	53052e56 	movwpl	r2, #24150	; 0x5e56
 4dc:	2e4a052e 	cdpcs	5, 4, cr0, cr10, cr14, {1}
 4e0:	052e6305 	streq	r6, [lr, #-773]!	; 0xfffffcfb
 4e4:	7b055874 	blvc	1566bc <startup-0x1fea9944>
 4e8:	4b100558 	blmi	401a50 <startup-0x1fbfe5b0>
 4ec:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
 4f0:	0a052e13 	beq	14bd44 <startup-0x1feb42bc>
 4f4:	3c29052e 	cfstr32cc	mvfx0, [r9], #-184	; 0xffffff48
 4f8:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
 4fc:	23052e2c 	movwcs	r2, #24108	; 0x5e2c
 500:	2e40052e 	cdpcs	5, 4, cr0, cr0, cr14, {1}
 504:	052e3a05 	streq	r3, [lr, #-2565]!	; 0xfffff5fb
 508:	56052e50 			; <UNDEFINED> instruction: 0x56052e50
 50c:	2e53052e 	cdpcs	5, 5, cr0, cr3, cr14, {1}
 510:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
 514:	74052e63 	strvc	r2, [r5], #-3683	; 0xfffff19d
 518:	587b0558 	ldmdapl	fp!, {r3, r4, r6, r8, sl}^
 51c:	054b1005 	strbeq	r1, [fp, #-5]
 520:	22052e0a 	andcs	r2, r5, #10, 28	; 0xa0
 524:	2e28053c 	mcrcs	5, 1, r0, cr8, cr12, {1}
 528:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 52c:	39052e1c 	stmdbcc	r5, {r2, r3, r4, r9, sl, fp, sp}
 530:	2e33052e 	cdpcs	5, 3, cr0, cr3, cr14, {1}
 534:	052e4905 	streq	r4, [lr, #-2309]!	; 0xfffff6fb
 538:	55052e43 	strpl	r2, [r5, #-3651]	; 0xfffff1bd
 53c:	4a66052e 	bmi	19819fc <startup-0x1e67e604>
 540:	05586d05 	ldrbeq	r6, [r8, #-3333]	; 0xfffff2fb
 544:	054d4b01 	strbeq	r4, [sp, #-2817]	; 0xfffff4ff
 548:	07054c10 	smladeq	r5, r0, ip, r4
 54c:	3d10052e 	cfldr32cc	mvfx0, [r0, #-184]	; 0xffffff48
 550:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 554:	08052f0d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sl, fp, sp}
 558:	230d053d 	movwcs	r0, #54589	; 0xd53d
 55c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 560:	08053d0d 	stmdaeq	r5, {r0, r2, r3, r8, sl, fp, ip, sp}
 564:	2f13052e 	svccs	0x0013052e
 568:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 56c:	08053c19 	stmdaeq	r5, {r0, r3, r4, sl, fp, ip, sp}
 570:	2e21052e 	cfsh64cs	mvdx0, mvdx1, #30
 574:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 578:	08052e27 	stmdaeq	r5, {r0, r1, r2, r5, r9, sl, fp, sp}
 57c:	2f03053c 	svccs	0x0003053c
 580:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 584:	19052e08 	stmdbne	r5, {r3, r9, sl, fp, sp}
 588:	2e15052e 	cfmul64cs	mvdx0, mvdx5, mvdx14
 58c:	052f0705 	streq	r0, [pc, #-1797]!	; fffffe8f <paddle_object+0xdffff0d7>
 590:	3c780308 	ldclcc	3, cr0, [r8], #-32	; 0xffffffe0
 594:	0a030105 	beq	c09b0 <startup-0x1ff3f650>
 598:	10055c3c 	andne	r5, r5, ip, lsr ip
 59c:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
 5a0:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 5a4:	10052e02 	andne	r2, r5, r2, lsl #28
 5a8:	03040200 	movweq	r0, #16896	; 0x4200
 5ac:	001b0523 	andseq	r0, fp, r3, lsr #10
 5b0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5b4:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 5b8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 5bc:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 5c0:	27052e03 	strcs	r2, [r5, -r3, lsl #28]
 5c4:	03040200 	movweq	r0, #16896	; 0x4200
 5c8:	0007053c 	andeq	r0, r7, ip, lsr r5
 5cc:	20030402 	andcs	r0, r3, r2, lsl #8
 5d0:	02001005 	andeq	r1, r0, #5
 5d4:	052f0304 	streq	r0, [pc, #-772]!	; 2d8 <startup-0x1ffffd28>
 5d8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 5dc:	1a052e03 	bne	14bdf0 <startup-0x1feb4210>
 5e0:	03040200 	movweq	r0, #16896	; 0x4200
 5e4:	0024052e 	eoreq	r0, r4, lr, lsr #10
 5e8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5ec:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 5f0:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 5f4:	04020007 	streq	r0, [r2], #-7
 5f8:	16052003 	strne	r2, [r5], -r3
 5fc:	03040200 	movweq	r0, #16896	; 0x4200
 600:	0021052f 	eoreq	r0, r1, pc, lsr #10
 604:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 608:	02002005 	andeq	r2, r0, #5
 60c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 610:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 614:	2d052e03 	stccs	14, cr2, [r5, #-12]
 618:	03040200 	movweq	r0, #16896	; 0x4200
 61c:	0003053c 	andeq	r0, r3, ip, lsr r5
 620:	20030402 	andcs	r0, r3, r2, lsl #8
 624:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
 628:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 62c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 630:	3d052e03 	stccc	14, cr2, [r5, #-12]
 634:	03040200 	movweq	r0, #16896	; 0x4200
 638:	0047052e 	subeq	r0, r7, lr, lsr #10
 63c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 640:	02004a05 	andeq	r4, r0, #20480	; 0x5000
 644:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 648:	04020003 	streq	r0, [r2], #-3
 64c:	1f052003 	svcne	0x00052003
 650:	03040200 	movweq	r0, #16896	; 0x4200
 654:	00020545 	andeq	r0, r2, r5, asr #10
 658:	3c010402 	cfstrscc	mvf0, [r1], {2}
 65c:	5b520105 	blpl	1480a78 <startup-0x1eb7f588>
 660:	054b1005 	strbeq	r1, [fp, #-5]
 664:	0b052e06 	bleq	14be84 <startup-0x1feb417c>
 668:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 66c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 670:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
 674:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 678:	22052e03 	andcs	r2, r5, #3, 28	; 0x30
 67c:	03040200 	movweq	r0, #16896	; 0x4200
 680:	002c052e 	eoreq	r0, ip, lr, lsr #10
 684:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 688:	02002f05 	andeq	r2, r0, #5, 30
 68c:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 690:	04020003 	streq	r0, [r2], #-3
 694:	35052003 	strcc	r2, [r5, #-3]
 698:	03040200 	movweq	r0, #16896	; 0x4200
 69c:	00400520 	subeq	r0, r0, r0, lsr #10
 6a0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 6a4:	02003f05 	andeq	r3, r0, #5, 30
 6a8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6ac:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 6b0:	4c052e03 	stcmi	14, cr2, [r5], {3}
 6b4:	03040200 	movweq	r0, #16896	; 0x4200
 6b8:	0003053c 	andeq	r0, r3, ip, lsr r5
 6bc:	20030402 	andcs	r0, r3, r2, lsl #8
 6c0:	02001f05 	andeq	r1, r0, #5, 30
 6c4:	05480304 	strbeq	r0, [r8, #-772]	; 0xfffffcfc
 6c8:	04020002 	streq	r0, [r2], #-2
 6cc:	01053c01 	tsteq	r5, r1, lsl #24
 6d0:	02055b4f 	andeq	r5, r5, #80896	; 0x13c00
 6d4:	4b0e054b 	blmi	381c08 <startup-0x1fc7e3f8>
 6d8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 6dc:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 6e0:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 6e4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 6e8:	12052f05 	andne	r2, r5, #5, 30
 6ec:	2e0d053f 	mcrcs	5, 0, r0, cr13, cr15, {1}
 6f0:	2f3c0b05 	svccs	0x003c0b05
 6f4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 6f8:	05052e08 	streq	r2, [r5, #-3592]	; 0xfffff1f8
 6fc:	3f100530 	svccc	0x00100530
 700:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 704:	052f200b 	streq	r2, [pc, #-11]!	; 701 <startup-0x1ffff8ff>
 708:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
 70c:	3005052e 	andcc	r0, r5, lr, lsr #10
 710:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
 714:	0b052e0d 	bleq	14bf50 <startup-0x1feb40b0>
 718:	15052f3c 	strne	r2, [r5, #-3900]	; 0xfffff0c4
 71c:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
 720:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 724:	0d053e10 	stceq	14, cr3, [r5, #-64]	; 0xffffffc0
 728:	200b052e 	andcs	r0, fp, lr, lsr #10
 72c:	2e15052f 	cfmul64cs	mvdx0, mvdx5, mvdx15
 730:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 734:	053d300a 	ldreq	r3, [sp, #-10]!
 738:	01053d02 	tsteq	r5, r2, lsl #26
 73c:	0a054d4b 	beq	153c70 <startup-0x1feac390>
 740:	01053d67 	tsteq	r5, r7, ror #26
 744:	02054d3d 	andeq	r4, r5, #3904	; 0xf40
 748:	4b0e054b 	blmi	381c7c <startup-0x1fc7e384>
 74c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 750:	05052e06 	streq	r2, [r5, #-3590]	; 0xfffff1fa
 754:	0010052f 	andseq	r0, r0, pc, lsr #10
 758:	3c010402 	cfstrscc	mvf0, [r1], {2}
 75c:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 760:	01053d02 	tsteq	r5, r2, lsl #26
 764:	12054d4b 	andne	r4, r5, #4800	; 0x12c0
 768:	2e1f0559 	mrccs	5, 0, r0, cr15, cr9, {2}
 76c:	2f2e0605 	svccs	0x002e0605
 770:	11053d3d 	tstne	r5, sp, lsr sp
 774:	2e06053d 	mcrcs	5, 0, r0, cr6, cr13, {1}
 778:	052f0505 	streq	r0, [pc, #-1285]!	; 27b <startup-0x1ffffd85>
 77c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 780:	40054a01 	andmi	r4, r5, r1, lsl #20
 784:	02040200 	andeq	r0, r4, #0, 4
 788:	002b054a 	eoreq	r0, fp, sl, asr #10
 78c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 790:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 794:	01052e03 	tsteq	r5, r3, lsl #28
 798:	07054d68 	streq	r4, [r5, -r8, ror #26]
 79c:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 7a0:	05310805 	ldreq	r0, [r1, #-2053]!	; 0xfffff7fb
 7a4:	2f2f5a03 	svccs	0x002f5a03
 7a8:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 7ac:	17052f09 	strne	r2, [r5, -r9, lsl #30]
 7b0:	3c040522 	cfstr32cc	mvfx0, [r4], {34}	; 0x22
 7b4:	05480a05 	strbeq	r0, [r8, #-2565]	; 0xfffff5fb
 7b8:	0a052e09 	beq	14bfe4 <startup-0x1feb401c>
 7bc:	30090532 	andcc	r0, r9, r2, lsr r5
 7c0:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 7c4:	69210104 	stmdbvs	r1!, {r2, r8}
 7c8:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 7cc:	053d2f0d 	ldreq	r2, [sp, #-3853]!	; 0xfffff0f3
 7d0:	053d3d0f 	ldreq	r3, [sp, #-3343]!	; 0xfffff2f1
 7d4:	02053d08 	andeq	r3, r5, #8, 26	; 0x200
 7d8:	3d06052e 	cfstr32cc	mvfx0, [r6, #-184]	; 0xffffff48
 7dc:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 7e0:	324e3d01 	subcc	r3, lr, #1, 26	; 0x40
 7e4:	01000302 	tsteq	r0, r2, lsl #6
 7e8:	00006e01 	andeq	r6, r0, r1, lsl #28
 7ec:	20000300 	andcs	r0, r0, r0, lsl #6
 7f0:	02000000 	andeq	r0, r0, #0
 7f4:	0d0efb01 	vstreq	d15, [lr, #-4]
 7f8:	01010100 	mrseq	r0, (UNDEF: 17)
 7fc:	00000001 	andeq	r0, r0, r1
 800:	01000001 	tsteq	r0, r1
 804:	61747300 	cmnvs	r4, r0, lsl #6
 808:	70757472 	rsbsvc	r7, r5, r2, ror r4
 80c:	0000632e 	andeq	r6, r0, lr, lsr #6
 810:	05000000 	streq	r0, [r0, #-0]
 814:	0205000f 	andeq	r0, r5, #15
 818:	20000000 	andcs	r0, r0, r0
 81c:	13020517 	movwne	r0, #9495	; 0x2517
 820:	052f2121 	streq	r2, [pc, #-289]!	; 707 <startup-0x1ffff8f9>
 824:	03022101 	movweq	r2, #8449	; 0x2101
 828:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
 82c:	02050001 	andeq	r0, r5, #1
 830:	20000cec 	andcs	r0, r0, ip, ror #25
 834:	05010f03 	streq	r0, [r1, #-3843]	; 0xfffff0fd
 838:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 83c:	05242101 	streq	r2, [r4, #-257]!	; 0xfffffeff
 840:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 844:	05242101 	streq	r2, [r4, #-257]!	; 0xfffffeff
 848:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 84c:	05242101 	streq	r2, [r4, #-257]!	; 0xfffffeff
 850:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 854:	01022101 	tsteq	r2, r1, lsl #2
 858:	Address 0x0000000000000858 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
   4:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
   8:	72746568 	rsbsvc	r6, r4, #104, 10	; 0x1a000000
   c:	442f6e61 	strtmi	r6, [pc], #-3681	; 14 <startup-0x1fffffec>
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6f6b532f 	svcvs	0x006b532f
  1c:	4d2f616c 	stfmis	f6, [pc, #-432]!	; fffffe74 <paddle_object+0xdffff0bc>
  20:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffeec <paddle_object+0xdffff134>
  24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffef0 <paddle_object+0xdffff138>
  28:	37303444 	ldrcc	r3, [r0, -r4, asr #8]!
  2c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  30:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  34:	65640030 	strbvs	r0, [r4, #-48]!	; 0xffffffd0
  38:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
  3c:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
  40:	31432055 	qdaddcc	r2, r5, r3
  44:	30312037 	eorscc	r2, r1, r7, lsr r0
  48:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  4c:	32303220 	eorscc	r3, r0, #32, 4
  50:	32383031 	eorscc	r3, r8, #49	; 0x31
  54:	72282034 	eorvc	r2, r8, #52	; 0x34
  58:	61656c65 	cmnvs	r5, r5, ror #24
  5c:	20296573 	eorcs	r6, r9, r3, ror r5
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	6f6e6d2d 	svcvs	0x006e6d2d
  6c:	616e752d 	cmnvs	lr, sp, lsr #10
  70:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
  74:	612d6465 			; <UNDEFINED> instruction: 0x612d6465
  78:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
  7c:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  80:	616f6c66 	cmnvs	pc, r6, ror #24
  84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  88:	6f733d69 	svcvs	0x00733d69
  8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  90:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  94:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  98:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  9c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  a0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  a4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  a8:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  ac:	00373175 	eorseq	r3, r7, r5, ror r1
  b0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  b4:	31646573 	smccc	18003	; 0x4653
  b8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  bc:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  c0:	755f0032 	ldrbvc	r0, [pc, #-50]	; 96 <startup-0x1fffff6a>
  c4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
  c8:	5f003364 	svcpl	0x00003364
  cc:	73756e75 	cmnvc	r5, #1872	; 0x750
  d0:	00346465 	eorseq	r6, r4, r5, ror #8
  d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  d8:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
  dc:	6f687300 	svcvs	0x00687300
  e0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f0:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
  f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
  fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 100:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 104:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 110:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 114:	72640079 	rsbvc	r0, r4, #121	; 0x79
 118:	705f7761 	subsvc	r7, pc, r1, ror #14
 11c:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 120:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 13c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 140:	00646565 	rsbeq	r6, r4, r5, ror #10
 144:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 148:	6d007373 	stcvs	3, cr7, [r0, #-460]	; 0xfffffe34
 14c:	5f65766f 	svcpl	0x0065766f
 150:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 154:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 158:	6e007463 	cdpvs	4, 0, cr7, cr0, cr3, {3}
 15c:	00747865 	rsbseq	r7, r4, r5, ror #16
 160:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 164:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 168:	6d006e6d 	stcvs	14, cr6, [r0, #-436]	; 0xfffffe4c
 16c:	0065766f 	rsbeq	r7, r5, pc, ror #12
 170:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 174:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 178:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 17c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 180:	5f79616c 	svcpl	0x0079616c
 184:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 188:	50500073 	subspl	r0, r0, r3, ror r0
 18c:	50594c4f 	subspl	r4, r9, pc, asr #24
 190:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 194:	45525000 	ldrbmi	r5, [r2, #-0]
 198:	61005443 	tstvs	r0, r3, asr #8
 19c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1a4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1a8:	00726168 	rsbseq	r6, r2, r8, ror #2
 1ac:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1b0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 1b4:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 1b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1c0:	73610072 	cmnvc	r1, #114	; 0x72
 1c4:	5f696963 	svcpl	0x00696963
 1c8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1cc:	63736100 	cmnvs	r3, #0, 2
 1d0:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 1d4:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 1d8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 1dc:	00787473 	rsbseq	r7, r8, r3, ror r4
 1e0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 1e4:	796d0079 	stmdbvc	sp!, {r0, r3, r4, r5, r6}^
 1e8:	7172695f 	cmnvc	r2, pc, asr r9
 1ec:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 1f0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 1f4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1f8:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 1fc:	7961746c 	stmdbvc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 200:	6c6f7000 	stclvs	0, cr7, [pc], #-0	; 208 <startup-0x1ffffdf8>
 204:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 208:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 20c:	61670074 	smcvs	28676	; 0x7004
 210:	766f656d 	strbtvc	r6, [pc], -sp, ror #10
 214:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
 218:	796c6c61 	stmdbvc	ip!, {r0, r5, r6, sl, fp, sp, lr}^
 21c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 220:	00736c65 	rsbseq	r6, r3, r5, ror #24
 224:	706d6574 	rsbvc	r6, sp, r4, ror r5
 228:	64617000 	strbtvs	r7, [r1], #-0
 22c:	78656c64 	stmdavc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 230:	64617000 	strbtvs	r7, [r1], #-0
 234:	79656c64 	stmdbvc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 238:	64697300 	strbtvs	r7, [r9], #-768	; 0xfffffd00
 23c:	63410065 	movtvs	r0, #4197	; 0x1065
 240:	61766974 	cmnvs	r6, r4, ror r9
 244:	6f526574 	svcvs	0x00526574
 248:	72670077 	rsbvc	r0, r7, #119	; 0x77
 24c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 250:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 254:	5f6c6578 	svcpl	0x006c6578
 258:	61656c63 	cmnvs	r5, r3, ror #24
 25c:	70730072 	rsbsvc	r0, r3, r2, ror r0
 260:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 264:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 268:	00796465 	rsbseq	r6, r9, r5, ror #8
 26c:	70617267 	rsbvc	r7, r1, r7, ror #4
 270:	5f636968 	svcpl	0x00636968
 274:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 278:	7a696c61 	bvc	1a5b404 <startup-0x1e5a4bfc>
 27c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 280:	5f79616c 	svcpl	0x0079616c
 284:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 288:	756e0069 	strbvc	r0, [lr, #-105]!	; 0xffffff97
 28c:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 290:	0073746e 	rsbseq	r7, r3, lr, ror #8
 294:	6e69616d 	powvsez	f6, f1, #5.0
 298:	6100632e 	tstvs	r0, lr, lsr #6
 29c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2a0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 12c <startup-0x1ffffed4>
 2a4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 2a8:	736f7000 	cmnvc	pc, #0
 2ac:	6f700078 	svcvs	0x00700078
 2b0:	67007973 	smlsdxvs	r0, r3, r9, r7
 2b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b8:	705f6369 	subsvc	r6, pc, r9, ror #6
 2bc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 2c0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2c4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 2c8:	6f642067 	svcvs	0x00642067
 2cc:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
 2d0:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0xfffffd00
 2d4:	50007065 	andpl	r7, r0, r5, rrx
 2d8:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 2dc:	6b005443 	blvs	153f0 <startup-0x1ffeac10>
 2e0:	00627965 	rsbeq	r7, r2, r5, ror #18
 2e4:	4e494c50 	mcrmi	12, 2, r4, cr9, cr0, {2}
 2e8:	47500045 	ldrbmi	r0, [r0, -r5, asr #32]
 2ec:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 2f0:	00595254 	subseq	r5, r9, r4, asr r2
 2f4:	61656c63 	cmnvs	r5, r3, ror #24
 2f8:	61625f72 	smcvs	9714	; 0x25f2
 2fc:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 300:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 304:	6c616200 	sfmvs	f6, 2, [r1], #-0
 308:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0xffffff94
 30c:	61625f74 	smcvs	9716	; 0x25f4
 310:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 314:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 318:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 31c:	61006465 	tstvs	r0, r5, ror #8
 320:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 324:	6165725f 	cmnvs	r5, pc, asr r2
 328:	61645f64 	cmnvs	r4, r4, ror #30
 32c:	73006174 	movwvc	r6, #372	; 0x174
 330:	00706177 	rsbseq	r6, r0, r7, ror r1
 334:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 338:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 33c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 340:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 344:	72650073 	rsbvc	r0, r5, #115	; 0x73
 348:	00726f72 	rsbseq	r6, r2, r2, ror pc
 34c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 350:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 354:	5f657469 	svcpl	0x00657469
 358:	00646d63 	rsbeq	r6, r4, r3, ror #26
 35c:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 360:	75006563 	strvc	r6, [r0, #-1379]	; 0xfffffa9d
 364:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 368:	2064656e 	rsbcs	r6, r4, lr, ror #10
 36c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 370:	6f687300 	svcvs	0x00687300
 374:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 378:	7900746e 	stmdbvc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 37c:	70657473 	rsbvc	r7, r5, r3, ror r4
 380:	6c616200 	sfmvs	f6, 2, [r1], #-0
 384:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 388:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 38c:	62007972 	andvs	r7, r0, #1867776	; 0x1c8000
 390:	786c6c61 	stmdavc	ip!, {r0, r5, r6, sl, fp, sp, lr}^
 394:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 398:	61705f65 	cmnvs	r0, r5, ror #30
 39c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 3a0:	72696400 	rsbvc	r6, r9, #0, 8
 3a4:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 3a8:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 3ac:	5f776172 	svcpl	0x00776172
 3b0:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 3b4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3b8:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 3bc:	5f776172 	svcpl	0x00776172
 3c0:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
 3c4:	63736100 	cmnvs	r3, #0, 2
 3c8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 3cc:	5f6c7274 	svcpl	0x006c7274
 3d0:	5f746962 	svcpl	0x00746962
 3d4:	61656c63 	cmnvs	r5, r3, ror #24
 3d8:	72640072 	rsbvc	r0, r4, #114	; 0x72
 3dc:	725f7761 	subsvc	r7, pc, #25427968	; 0x1840000
 3e0:	61746365 	cmnvs	r4, r5, ror #6
 3e4:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 3e8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 3ec:	70615f74 	rsbvc	r5, r1, r4, ror pc
 3f0:	4f740070 	svcmi	0x00740070
 3f4:	61006a62 	tstvs	r0, r2, ror #20
 3f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3fc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 400:	645f6574 	ldrbvs	r6, [pc], #-1396	; 408 <startup-0x1ffffbf8>
 404:	00617461 	rsbeq	r7, r1, r1, ror #8
 408:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 40c:	65640031 	strbvs	r0, [r4, #-49]!	; 0xffffffcf
 410:	5f79616c 	svcpl	0x0079616c
 414:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 418:	7264006f 	rsbvc	r0, r4, #111	; 0x6f
 41c:	72007761 	andvc	r7, r0, #25427968	; 0x1840000
 420:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 424:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 428:	64617000 	strbtvs	r7, [r1], #-0
 42c:	5f656c64 	svcpl	0x00656c64
 430:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 434:	61007463 	tstvs	r0, r3, ror #8
 438:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 43c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 440:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 444:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 448:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 44c:	0078657a 	rsbseq	r6, r8, sl, ror r5
 450:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 454:	72670079 	rsbvc	r0, r7, #121	; 0x79
 458:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 45c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 460:	5f726165 	svcpl	0x00726165
 464:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 468:	73006e65 	movwvc	r6, #3685	; 0xe65
 46c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 470:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 474:	7361006e 	cmnvc	r1, #110	; 0x6e
 478:	5f696963 	svcpl	0x00696963
 47c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 480:	6f635f65 	svcvs	0x00635f65
 484:	6f72746e 	svcvs	0x0072746e
 488:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 48c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 490:	00786174 	rsbseq	r6, r8, r4, ror r1
 494:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 498:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 49c:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
 4a0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 4a4:	Address 0x00000000000004a4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000050 	andcs	r0, r0, r0, asr r0
  3c:	0000002a 	andeq	r0, r0, sl, lsr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	2000007c 	andcs	r0, r0, ip, ror r0
  6c:	000000b8 	strheq	r0, [r0], -r8
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	200e4101 	andcs	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	20000134 	andcs	r0, r0, r4, lsr r1
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	200001a0 	andcs	r0, r0, r0, lsr #3
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	200001e4 	andcs	r0, r0, r4, ror #3
  c4:	00000036 	andeq	r0, r0, r6, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	2000021a 	andcs	r0, r0, sl, lsl r2
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	2000023e 	andcs	r0, r0, lr, lsr r2
 104:	00000052 	andeq	r0, r0, r2, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	20000290 	mulcs	r0, r0, r2
 124:	00000054 	andeq	r0, r0, r4, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000050 	andeq	r0, r0, r0, asr r0
 140:	200002e4 	andcs	r0, r0, r4, ror #5
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 14c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 150:	280e4101 	stmdacs	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	2000034c 	andcs	r0, r0, ip, asr #6
 164:	00000038 	andeq	r0, r0, r8, lsr r0
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000050 	andeq	r0, r0, r0, asr r0
 180:	20000384 	andcs	r0, r0, r4, lsl #7
 184:	00000048 	andeq	r0, r0, r8, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	200003cc 	andcs	r0, r0, ip, asr #7
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
 1c0:	20000404 	andcs	r0, r0, r4, lsl #8
 1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	2000042e 	andcs	r0, r0, lr, lsr #8
 1e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000050 	andeq	r0, r0, r0, asr r0
 200:	20000458 	andcs	r0, r0, r8, asr r4
 204:	00000034 	andeq	r0, r0, r4, lsr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	2000048c 	andcs	r0, r0, ip, lsl #9
 224:	00000040 	andeq	r0, r0, r0, asr #32
 228:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 22c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 230:	180e4101 	stmdane	lr, {r0, r8, lr}
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000050 	andeq	r0, r0, r0, asr r0
 240:	200004cc 	andcs	r0, r0, ip, asr #9
 244:	00000040 	andeq	r0, r0, r0, asr #32
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000050 	andeq	r0, r0, r0, asr r0
 260:	2000050c 	andcs	r0, r0, ip, lsl #10
 264:	0000003c 	andeq	r0, r0, ip, lsr r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000050 	andeq	r0, r0, r0, asr r0
 280:	20000548 	andcs	r0, r0, r8, asr #10
 284:	00000022 	andeq	r0, r0, r2, lsr #32
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000050 	andeq	r0, r0, r0, asr r0
 29c:	2000056a 	andcs	r0, r0, sl, ror #10
 2a0:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a8:	41018e02 	tstmi	r1, r2, lsl #28
 2ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b0:	00000007 	andeq	r0, r0, r7
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000050 	andeq	r0, r0, r0, asr r0
 2bc:	200005a6 	andcs	r0, r0, r6, lsr #11
 2c0:	00000042 	andeq	r0, r0, r2, asr #32
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000050 	andeq	r0, r0, r0, asr r0
 2dc:	200005e8 	andcs	r0, r0, r8, ror #11
 2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e8:	41018e02 	tstmi	r1, r2, lsl #28
 2ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2f0:	00000007 	andeq	r0, r0, r7
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000050 	andeq	r0, r0, r0, asr r0
 2fc:	20000614 	andcs	r0, r0, r4, lsl r6
 300:	000001f6 	strdeq	r0, [r0], -r6
 304:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 308:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 30c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	00000020 	andeq	r0, r0, r0, lsr #32
 318:	00000050 	andeq	r0, r0, r0, asr r0
 31c:	2000080a 	andcs	r0, r0, sl, lsl #16
 320:	0000014a 	andeq	r0, r0, sl, asr #2
 324:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 328:	86048505 	strhi	r8, [r4], -r5, lsl #10
 32c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 330:	300e4101 	andcc	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	00000050 	andeq	r0, r0, r0, asr r0
 340:	20000954 	andcs	r0, r0, r4, asr r9
 344:	00000088 	andeq	r0, r0, r8, lsl #1
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 358:	00000007 	andeq	r0, r0, r7
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000050 	andeq	r0, r0, r0, asr r0
 364:	200009dc 	ldrdcs	r0, [r0], -ip
 368:	00000090 	muleq	r0, r0, r0
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000050 	andeq	r0, r0, r0, asr r0
 384:	20000a6c 	andcs	r0, r0, ip, ror #20
 388:	00000060 	andeq	r0, r0, r0, rrx
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000050 	andeq	r0, r0, r0, asr r0
 3a4:	20000acc 	andcs	r0, r0, ip, asr #21
 3a8:	000000bc 	strheq	r0, [r0], -ip
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b8:	00000007 	andeq	r0, r0, r7
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000050 	andeq	r0, r0, r0, asr r0
 3c4:	20000b88 	andcs	r0, r0, r8, lsl #23
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d8:	00000007 	andeq	r0, r0, r7
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000050 	andeq	r0, r0, r0, asr r0
 3e4:	20000ba8 	andcs	r0, r0, r8, lsr #23
 3e8:	0000003e 	andeq	r0, r0, lr, lsr r0
 3ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f0:	41018e02 	tstmi	r1, r2, lsl #28
 3f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f8:	00000007 	andeq	r0, r0, r7
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000050 	andeq	r0, r0, r0, asr r0
 404:	20000be6 	andcs	r0, r0, r6, ror #23
 408:	00000062 	andeq	r0, r0, r2, rrx
 40c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 410:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 414:	300e4101 	andcc	r4, lr, r1, lsl #2
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	00000020 	andeq	r0, r0, r0, lsr #32
 420:	00000050 	andeq	r0, r0, r0, asr r0
 424:	20000c48 	andcs	r0, r0, r8, asr #24
 428:	00000058 	andeq	r0, r0, r8, asr r0
 42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 430:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 43c:	00000007 	andeq	r0, r0, r7
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000050 	andeq	r0, r0, r0, asr r0
 448:	20000ca0 	andcs	r0, r0, r0, lsr #25
 44c:	00000042 	andeq	r0, r0, r2, asr #32
 450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 454:	41018e02 	tstmi	r1, r2, lsl #28
 458:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 45c:	00000007 	andeq	r0, r0, r7
 460:	00000018 	andeq	r0, r0, r8, lsl r0
 464:	00000050 	andeq	r0, r0, r0, asr r0
 468:	20000ce2 	andcs	r0, r0, r2, ror #25
 46c:	0000000a 	andeq	r0, r0, sl
 470:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 474:	41018e02 	tstmi	r1, r2, lsl #28
 478:	0000070d 	andeq	r0, r0, sp, lsl #14
 47c:	0000000c 	andeq	r0, r0, ip
 480:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 484:	7c020001 	stcvc	0, cr0, [r2], {1}
 488:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 48c:	0000000c 	andeq	r0, r0, ip
 490:	0000047c 	andeq	r0, r0, ip, ror r4
 494:	20000000 	andcs	r0, r0, r0
 498:	0000000c 	andeq	r0, r0, ip
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	0000047c 	andeq	r0, r0, ip, ror r4
 4a4:	20000cec 	andcs	r0, r0, ip, ror #25
 4a8:	00000006 	andeq	r0, r0, r6
 4ac:	0000000c 	andeq	r0, r0, ip
 4b0:	0000047c 	andeq	r0, r0, ip, ror r4
 4b4:	20000cf2 	strdcs	r0, [r0], -r2
 4b8:	00000006 	andeq	r0, r0, r6
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	0000047c 	andeq	r0, r0, ip, ror r4
 4c4:	20000cf8 	strdcs	r0, [r0], -r8
 4c8:	00000006 	andeq	r0, r0, r6
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	0000047c 	andeq	r0, r0, ip, ror r4
 4d4:	20000cfe 	strdcs	r0, [r0], -lr
 4d8:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000cec 	andcs	r0, r0, ip, ror #25
   4:	20000d04 	andcs	r0, r0, r4, lsl #26
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
