
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 f83a 	bl	2000007c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	4b0b      	ldr	r3, [pc, #44]	; (2000004c <print_char+0x3c>)
20000020:	881b      	ldrh	r3, [r3, #0]
20000022:	b29b      	uxth	r3, r3
20000024:	001a      	movs	r2, r3
20000026:	2380      	movs	r3, #128	; 0x80
20000028:	4013      	ands	r3, r2
2000002a:	d0f8      	beq.n	2000001e <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
2000002c:	4a07      	ldr	r2, [pc, #28]	; (2000004c <print_char+0x3c>)
2000002e:	1dfb      	adds	r3, r7, #7
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b29b      	uxth	r3, r3
20000034:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	2b0a      	cmp	r3, #10
2000003c:	d102      	bne.n	20000044 <print_char+0x34>
		print_char('\r');
2000003e:	200d      	movs	r0, #13
20000040:	f7ff ffe6 	bl	20000010 <print_char>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40011000 	andmi	r1, r1, r0

20000050 <print>:

void print(char *s) {
20000050:	b580      	push	{r7, lr}
20000052:	b082      	sub	sp, #8
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000058:	e006      	b.n	20000068 <print+0x18>
		print_char(*(s++));
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	1c5a      	adds	r2, r3, #1
2000005e:	607a      	str	r2, [r7, #4]
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	0018      	movs	r0, r3
20000064:	f7ff ffd4 	bl	20000010 <print_char>
	while (*s != '\0') {
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2b00      	cmp	r3, #0
2000006e:	d1f4      	bne.n	2000005a <print+0xa>
	}
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	46bd      	mov	sp, r7
20000076:	b002      	add	sp, #8
20000078:	bd80      	pop	{r7, pc}
2000007a:	46c0      	nop			; (mov r8, r8)

2000007c <main>:
	move_spider,
	set_ballobject_speed
};

int main(void)
{
2000007c:	b590      	push	{r4, r7, lr}
2000007e:	b085      	sub	sp, #20
20000080:	af00      	add	r7, sp, #0
	char c;
	POBJECT victim = &ballobject;
20000082:	4b33      	ldr	r3, [pc, #204]	; (20000150 <main+0xd4>)
20000084:	60fb      	str	r3, [r7, #12]
	POBJECT creature = &spider_obj;
20000086:	4b33      	ldr	r3, [pc, #204]	; (20000154 <main+0xd8>)
20000088:	60bb      	str	r3, [r7, #8]
	init_app();
2000008a:	f000 f867 	bl	2000015c <init_app>
	graphic_initalize();
2000008e:	f000 ff2d 	bl	20000eec <graphic_initalize>
	graphic_clear_screen();
20000092:	f000 ff2e 	bl	20000ef2 <graphic_clear_screen>
	victim->set_speed(victim, 4, 1);
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	6a1b      	ldr	r3, [r3, #32]
2000009a:	68f8      	ldr	r0, [r7, #12]
2000009c:	2201      	movs	r2, #1
2000009e:	2104      	movs	r1, #4
200000a0:	4798      	blx	r3

	while(1)
	{
		victim->move(victim);
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	69db      	ldr	r3, [r3, #28]
200000a6:	68fa      	ldr	r2, [r7, #12]
200000a8:	0010      	movs	r0, r2
200000aa:	4798      	blx	r3
		creature->move(creature);
200000ac:	68bb      	ldr	r3, [r7, #8]
200000ae:	69db      	ldr	r3, [r3, #28]
200000b0:	68ba      	ldr	r2, [r7, #8]
200000b2:	0010      	movs	r0, r2
200000b4:	4798      	blx	r3
		c = keyb();
200000b6:	1dfc      	adds	r4, r7, #7
200000b8:	f000 f928 	bl	2000030c <keyb>
200000bc:	0003      	movs	r3, r0
200000be:	7023      	strb	r3, [r4, #0]
		switch(c)
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	2b08      	cmp	r3, #8
200000c6:	d829      	bhi.n	2000011c <main+0xa0>
200000c8:	009a      	lsls	r2, r3, #2
200000ca:	4b23      	ldr	r3, [pc, #140]	; (20000158 <main+0xdc>)
200000cc:	18d3      	adds	r3, r2, r3
200000ce:	681b      	ldr	r3, [r3, #0]
200000d0:	469f      	mov	pc, r3
		{
			case 6: creature->set_speed(creature, 2, 0); break;
200000d2:	68bb      	ldr	r3, [r7, #8]
200000d4:	6a1b      	ldr	r3, [r3, #32]
200000d6:	68b8      	ldr	r0, [r7, #8]
200000d8:	2200      	movs	r2, #0
200000da:	2102      	movs	r1, #2
200000dc:	4798      	blx	r3
200000de:	e024      	b.n	2000012a <main+0xae>
			case 4: creature->set_speed(creature, -2, 0); break;
200000e0:	68bb      	ldr	r3, [r7, #8]
200000e2:	6a1b      	ldr	r3, [r3, #32]
200000e4:	2202      	movs	r2, #2
200000e6:	4251      	negs	r1, r2
200000e8:	68b8      	ldr	r0, [r7, #8]
200000ea:	2200      	movs	r2, #0
200000ec:	4798      	blx	r3
200000ee:	e01c      	b.n	2000012a <main+0xae>
			case 5: creature->set_speed(creature, 0, 0); break;
200000f0:	68bb      	ldr	r3, [r7, #8]
200000f2:	6a1b      	ldr	r3, [r3, #32]
200000f4:	68b8      	ldr	r0, [r7, #8]
200000f6:	2200      	movs	r2, #0
200000f8:	2100      	movs	r1, #0
200000fa:	4798      	blx	r3
200000fc:	e015      	b.n	2000012a <main+0xae>
			case 2: creature->set_speed(creature, 0, -2); break;
200000fe:	68bb      	ldr	r3, [r7, #8]
20000100:	6a1b      	ldr	r3, [r3, #32]
20000102:	2202      	movs	r2, #2
20000104:	4252      	negs	r2, r2
20000106:	68b8      	ldr	r0, [r7, #8]
20000108:	2100      	movs	r1, #0
2000010a:	4798      	blx	r3
2000010c:	e00d      	b.n	2000012a <main+0xae>
			case 8: creature->set_speed(creature, 0, 2); break;
2000010e:	68bb      	ldr	r3, [r7, #8]
20000110:	6a1b      	ldr	r3, [r3, #32]
20000112:	68b8      	ldr	r0, [r7, #8]
20000114:	2202      	movs	r2, #2
20000116:	2100      	movs	r1, #0
20000118:	4798      	blx	r3
2000011a:	e006      	b.n	2000012a <main+0xae>
			default: creature->set_speed(creature, 0, 0); break;
2000011c:	68bb      	ldr	r3, [r7, #8]
2000011e:	6a1b      	ldr	r3, [r3, #32]
20000120:	68b8      	ldr	r0, [r7, #8]
20000122:	2200      	movs	r2, #0
20000124:	2100      	movs	r1, #0
20000126:	4798      	blx	r3
20000128:	46c0      	nop			; (mov r8, r8)
		}
		if (objects_overlap(victim, creature))
2000012a:	68ba      	ldr	r2, [r7, #8]
2000012c:	68fb      	ldr	r3, [r7, #12]
2000012e:	0011      	movs	r1, r2
20000130:	0018      	movs	r0, r3
20000132:	f000 fe56 	bl	20000de2 <objects_overlap>
20000136:	1e03      	subs	r3, r0, #0
20000138:	d103      	bne.n	20000142 <main+0xc6>
		{
			break;
		}
		delay_micro(20);
2000013a:	2014      	movs	r0, #20
2000013c:	f000 f866 	bl	2000020c <delay_micro>
		victim->move(victim);
20000140:	e7af      	b.n	200000a2 <main+0x26>
			break;
20000142:	46c0      	nop			; (mov r8, r8)
	}
	return 0;
20000144:	2300      	movs	r3, #0
}
20000146:	0018      	movs	r0, r3
20000148:	46bd      	mov	sp, r7
2000014a:	b005      	add	sp, #20
2000014c:	bd90      	pop	{r4, r7, pc}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	20000f4c 	andcs	r0, r0, ip, asr #30
20000154:	20001024 	andcs	r1, r0, r4, lsr #32
20000158:	20001048 	andcs	r1, r0, r8, asr #32

2000015c <init_app>:

void init_app(void)
{
2000015c:	b580      	push	{r7, lr}
2000015e:	af00      	add	r7, sp, #0
	// Need to intials the outport 
	*((unsigned long *) 0x40023830) = 0x18;
20000160:	4b11      	ldr	r3, [pc, #68]	; (200001a8 <init_app+0x4c>)
20000162:	2218      	movs	r2, #24
20000164:	601a      	str	r2, [r3, #0]

    *((volatile unsigned int *)0x40020C08) = 0x55555555; // MEDIUM SPEED
20000166:	4b11      	ldr	r3, [pc, #68]	; (200001ac <init_app+0x50>)
20000168:	4a11      	ldr	r2, [pc, #68]	; (200001b0 <init_app+0x54>)
2000016a:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) &= 0x00000000; // MODER CONFIG
2000016c:	4b11      	ldr	r3, [pc, #68]	; (200001b4 <init_app+0x58>)
2000016e:	681b      	ldr	r3, [r3, #0]
20000170:	4b10      	ldr	r3, [pc, #64]	; (200001b4 <init_app+0x58>)
20000172:	2200      	movs	r2, #0
20000174:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C00) |= 0x55005555; // MODER CONFIG
20000176:	4b0f      	ldr	r3, [pc, #60]	; (200001b4 <init_app+0x58>)
20000178:	681a      	ldr	r2, [r3, #0]
2000017a:	4b0e      	ldr	r3, [pc, #56]	; (200001b4 <init_app+0x58>)
2000017c:	490e      	ldr	r1, [pc, #56]	; (200001b8 <init_app+0x5c>)
2000017e:	430a      	orrs	r2, r1
20000180:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned short *) 0x40020C04) &= 0x0000; // TYPER CONFIG
20000182:	4b0e      	ldr	r3, [pc, #56]	; (200001bc <init_app+0x60>)
20000184:	881b      	ldrh	r3, [r3, #0]
20000186:	4b0d      	ldr	r3, [pc, #52]	; (200001bc <init_app+0x60>)
20000188:	2200      	movs	r2, #0
2000018a:	801a      	strh	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) &= 0x00000000; // PUPDR CONFIG
2000018c:	4b0c      	ldr	r3, [pc, #48]	; (200001c0 <init_app+0x64>)
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <init_app+0x64>)
20000192:	2200      	movs	r2, #0
20000194:	601a      	str	r2, [r3, #0]
    * ( (volatile unsigned int *) 0x40020C0C) |= 0x0000AAAA; // PUPDR CONFIG
20000196:	4b0a      	ldr	r3, [pc, #40]	; (200001c0 <init_app+0x64>)
20000198:	681a      	ldr	r2, [r3, #0]
2000019a:	4b09      	ldr	r3, [pc, #36]	; (200001c0 <init_app+0x64>)
2000019c:	4909      	ldr	r1, [pc, #36]	; (200001c4 <init_app+0x68>)
2000019e:	430a      	orrs	r2, r1
200001a0:	601a      	str	r2, [r3, #0]

}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	46bd      	mov	sp, r7
200001a6:	bd80      	pop	{r7, pc}
200001a8:	40023830 	andmi	r3, r2, r0, lsr r8
200001ac:	40020c08 	andmi	r0, r2, r8, lsl #24
200001b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200001b4:	40020c00 	andmi	r0, r2, r0, lsl #24
200001b8:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
200001bc:	40020c04 	andmi	r0, r2, r4, lsl #24
200001c0:	40020c0c 	andmi	r0, r2, ip, lsl #24
200001c4:	0000aaaa 	andeq	sl, r0, sl, lsr #21

200001c8 <delay_250ns>:

// ------------------------------------------------------- DELAYS ------------------------------------------------------------------------------- //
void delay_250ns(void)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
	// page 98
	*STK_CTRL = 0; // Resets SysTick
200001cc:	4b0c      	ldr	r3, [pc, #48]	; (20000200 <delay_250ns+0x38>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 / 4) - 1; // Minus 1 comes from how to processor counts 
200001d2:	4b0c      	ldr	r3, [pc, #48]	; (20000204 <delay_250ns+0x3c>)
200001d4:	2229      	movs	r2, #41	; 0x29
200001d6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0; // Resets counter register 
200001d8:	4b0b      	ldr	r3, [pc, #44]	; (20000208 <delay_250ns+0x40>)
200001da:	2200      	movs	r2, #0
200001dc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5; // Starts the count down 
200001de:	4b08      	ldr	r3, [pc, #32]	; (20000200 <delay_250ns+0x38>)
200001e0:	2205      	movs	r2, #5
200001e2:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000){} // while the countflag is 1 
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	4b06      	ldr	r3, [pc, #24]	; (20000200 <delay_250ns+0x38>)
200001e8:	681a      	ldr	r2, [r3, #0]
200001ea:	2380      	movs	r3, #128	; 0x80
200001ec:	025b      	lsls	r3, r3, #9
200001ee:	4013      	ands	r3, r2
200001f0:	d1f9      	bne.n	200001e6 <delay_250ns+0x1e>
	*STK_CTRL = 0; // resets Systick 
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <delay_250ns+0x38>)
200001f4:	2200      	movs	r2, #0
200001f6:	601a      	str	r2, [r3, #0]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	bd80      	pop	{r7, pc}
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	e000e010 	and	lr, r0, r0, lsl r0
20000204:	e000e014 	and	lr, r0, r4, lsl r0
20000208:	e000e018 	and	lr, r0, r8, lsl r0

2000020c <delay_micro>:

void delay_micro(unsigned int ms)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b084      	sub	sp, #16
20000210:	af00      	add	r7, sp, #0
20000212:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	// 4 * 250 ns = 1 µs
	for (int i = 0; i < ms; i++)
20000214:	2300      	movs	r3, #0
20000216:	60fb      	str	r3, [r7, #12]
20000218:	e00a      	b.n	20000230 <delay_micro+0x24>
	{
		delay_250ns();
2000021a:	f7ff ffd5 	bl	200001c8 <delay_250ns>
		delay_250ns();
2000021e:	f7ff ffd3 	bl	200001c8 <delay_250ns>
		delay_250ns();
20000222:	f7ff ffd1 	bl	200001c8 <delay_250ns>
		delay_250ns();
20000226:	f7ff ffcf 	bl	200001c8 <delay_250ns>
	for (int i = 0; i < ms; i++)
2000022a:	68fb      	ldr	r3, [r7, #12]
2000022c:	3301      	adds	r3, #1
2000022e:	60fb      	str	r3, [r7, #12]
20000230:	68fb      	ldr	r3, [r7, #12]
20000232:	687a      	ldr	r2, [r7, #4]
20000234:	429a      	cmp	r2, r3
20000236:	d8f0      	bhi.n	2000021a <delay_micro+0xe>
	}

}
20000238:	46c0      	nop			; (mov r8, r8)
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	46bd      	mov	sp, r7
2000023e:	b004      	add	sp, #16
20000240:	bd80      	pop	{r7, pc}

20000242 <delay_milli>:

void delay_milli(unsigned int ms)
{
20000242:	b580      	push	{r7, lr}
20000244:	b082      	sub	sp, #8
20000246:	af00      	add	r7, sp, #0
20000248:	6078      	str	r0, [r7, #4]
		ms = ms / 1000;
		ms++;
	#endif
	// 1000 µs = 1 ms 
	
	delay_micro(ms * 1000);
2000024a:	687a      	ldr	r2, [r7, #4]
2000024c:	0013      	movs	r3, r2
2000024e:	015b      	lsls	r3, r3, #5
20000250:	1a9b      	subs	r3, r3, r2
20000252:	009b      	lsls	r3, r3, #2
20000254:	189b      	adds	r3, r3, r2
20000256:	00db      	lsls	r3, r3, #3
20000258:	0018      	movs	r0, r3
2000025a:	f7ff ffd7 	bl	2000020c <delay_micro>
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	46bd      	mov	sp, r7
20000262:	b002      	add	sp, #8
20000264:	bd80      	pop	{r7, pc}

20000266 <ActivateRow>:

// ------------------------------------------------------- keypad ------------------------------------------------------------------------------- //

void ActivateRow( unsigned int row )
{
20000266:	b580      	push	{r7, lr}
20000268:	b082      	sub	sp, #8
2000026a:	af00      	add	r7, sp, #0
2000026c:	6078      	str	r0, [r7, #4]

    /* Aktivera angiven rad hos tangentbordet, eller

    * deaktivera samtliga */
    switch( row )
2000026e:	687b      	ldr	r3, [r7, #4]
20000270:	2b04      	cmp	r3, #4
20000272:	d819      	bhi.n	200002a8 <ActivateRow+0x42>
20000274:	687b      	ldr	r3, [r7, #4]
20000276:	009a      	lsls	r2, r3, #2
20000278:	4b0d      	ldr	r3, [pc, #52]	; (200002b0 <ActivateRow+0x4a>)
2000027a:	18d3      	adds	r3, r2, r3
2000027c:	681b      	ldr	r3, [r3, #0]
2000027e:	469f      	mov	pc, r3
    {
    case 1: *GPIO_ODR_HIGH = 0x10; break;
20000280:	4b0c      	ldr	r3, [pc, #48]	; (200002b4 <ActivateRow+0x4e>)
20000282:	2210      	movs	r2, #16
20000284:	701a      	strb	r2, [r3, #0]
20000286:	e00f      	b.n	200002a8 <ActivateRow+0x42>
    case 2: *GPIO_ODR_HIGH = 0x20; break;
20000288:	4b0a      	ldr	r3, [pc, #40]	; (200002b4 <ActivateRow+0x4e>)
2000028a:	2220      	movs	r2, #32
2000028c:	701a      	strb	r2, [r3, #0]
2000028e:	e00b      	b.n	200002a8 <ActivateRow+0x42>
    case 3: *GPIO_ODR_HIGH = 0x40; break;
20000290:	4b08      	ldr	r3, [pc, #32]	; (200002b4 <ActivateRow+0x4e>)
20000292:	2240      	movs	r2, #64	; 0x40
20000294:	701a      	strb	r2, [r3, #0]
20000296:	e007      	b.n	200002a8 <ActivateRow+0x42>
    case 4: *GPIO_ODR_HIGH = 0x80; break;
20000298:	4b06      	ldr	r3, [pc, #24]	; (200002b4 <ActivateRow+0x4e>)
2000029a:	2280      	movs	r2, #128	; 0x80
2000029c:	701a      	strb	r2, [r3, #0]
2000029e:	e003      	b.n	200002a8 <ActivateRow+0x42>
    case 0: *GPIO_ODR_HIGH = 0x00; break;
200002a0:	4b04      	ldr	r3, [pc, #16]	; (200002b4 <ActivateRow+0x4e>)
200002a2:	2200      	movs	r2, #0
200002a4:	701a      	strb	r2, [r3, #0]
200002a6:	46c0      	nop			; (mov r8, r8)

    }

}
200002a8:	46c0      	nop			; (mov r8, r8)
200002aa:	46bd      	mov	sp, r7
200002ac:	b002      	add	sp, #8
200002ae:	bd80      	pop	{r7, pc}
200002b0:	2000106c 	andcs	r1, r0, ip, rrx
200002b4:	40020c15 	andmi	r0, r2, r5, lsl ip

200002b8 <ReadColumn>:

int ReadColumn( void )
{
200002b8:	b580      	push	{r7, lr}
200002ba:	b082      	sub	sp, #8
200002bc:	af00      	add	r7, sp, #0

    * är nedtryckt, returnera dess kolumnnummer,

    * annars, returnera 0 */
    unsigned char c;
    c = *GPIO_IDR_HIGH;
200002be:	4a12      	ldr	r2, [pc, #72]	; (20000308 <ReadColumn+0x50>)
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	7812      	ldrb	r2, [r2, #0]
200002c4:	701a      	strb	r2, [r3, #0]
    if ( c & 0x8 )
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	2208      	movs	r2, #8
200002cc:	4013      	ands	r3, r2
200002ce:	d001      	beq.n	200002d4 <ReadColumn+0x1c>
        return 4;
200002d0:	2304      	movs	r3, #4
200002d2:	e015      	b.n	20000300 <ReadColumn+0x48>
    if ( c & 0x4 )
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	2204      	movs	r2, #4
200002da:	4013      	ands	r3, r2
200002dc:	d001      	beq.n	200002e2 <ReadColumn+0x2a>
        return 3;
200002de:	2303      	movs	r3, #3
200002e0:	e00e      	b.n	20000300 <ReadColumn+0x48>
    if ( c & 0x2 )
200002e2:	1dfb      	adds	r3, r7, #7
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	2202      	movs	r2, #2
200002e8:	4013      	ands	r3, r2
200002ea:	d001      	beq.n	200002f0 <ReadColumn+0x38>
        return 2;
200002ec:	2302      	movs	r3, #2
200002ee:	e007      	b.n	20000300 <ReadColumn+0x48>
    if ( c & 0x1 )
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	2201      	movs	r2, #1
200002f6:	4013      	ands	r3, r2
200002f8:	d001      	beq.n	200002fe <ReadColumn+0x46>
        return 1;
200002fa:	2301      	movs	r3, #1
200002fc:	e000      	b.n	20000300 <ReadColumn+0x48>

    return 0;
200002fe:	2300      	movs	r3, #0
}
20000300:	0018      	movs	r0, r3
20000302:	46bd      	mov	sp, r7
20000304:	b002      	add	sp, #8
20000306:	bd80      	pop	{r7, pc}
20000308:	40020c11 	andmi	r0, r2, r1, lsl ip

2000030c <keyb>:

unsigned char keyb(void)
{
2000030c:	b590      	push	{r4, r7, lr}
2000030e:	b087      	sub	sp, #28
20000310:	af00      	add	r7, sp, #0

    unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000312:	003b      	movs	r3, r7
20000314:	4a16      	ldr	r2, [pc, #88]	; (20000370 <keyb+0x64>)
20000316:	ca13      	ldmia	r2!, {r0, r1, r4}
20000318:	c313      	stmia	r3!, {r0, r1, r4}
2000031a:	6812      	ldr	r2, [r2, #0]
2000031c:	601a      	str	r2, [r3, #0]

    int row, col;
    for(row=1; row <=4 ; row++ )
2000031e:	2301      	movs	r3, #1
20000320:	617b      	str	r3, [r7, #20]
20000322:	e019      	b.n	20000358 <keyb+0x4c>
    {
        ActivateRow( row );
20000324:	697b      	ldr	r3, [r7, #20]
20000326:	0018      	movs	r0, r3
20000328:	f7ff ff9d 	bl	20000266 <ActivateRow>
        if( (col = ReadColumn () ) )
2000032c:	f7ff ffc4 	bl	200002b8 <ReadColumn>
20000330:	0003      	movs	r3, r0
20000332:	613b      	str	r3, [r7, #16]
20000334:	693b      	ldr	r3, [r7, #16]
20000336:	2b00      	cmp	r3, #0
20000338:	d00b      	beq.n	20000352 <keyb+0x46>
        {
            ActivateRow( 0 );
2000033a:	2000      	movs	r0, #0
2000033c:	f7ff ff93 	bl	20000266 <ActivateRow>
            return key [4*(row-1)+(col-1) ];
20000340:	697b      	ldr	r3, [r7, #20]
20000342:	3b01      	subs	r3, #1
20000344:	009a      	lsls	r2, r3, #2
20000346:	693b      	ldr	r3, [r7, #16]
20000348:	3b01      	subs	r3, #1
2000034a:	18d3      	adds	r3, r2, r3
2000034c:	003a      	movs	r2, r7
2000034e:	5cd3      	ldrb	r3, [r2, r3]
20000350:	e009      	b.n	20000366 <keyb+0x5a>
    for(row=1; row <=4 ; row++ )
20000352:	697b      	ldr	r3, [r7, #20]
20000354:	3301      	adds	r3, #1
20000356:	617b      	str	r3, [r7, #20]
20000358:	697b      	ldr	r3, [r7, #20]
2000035a:	2b04      	cmp	r3, #4
2000035c:	dde2      	ble.n	20000324 <keyb+0x18>
        }
    }
    ActivateRow( 0 );
2000035e:	2000      	movs	r0, #0
20000360:	f7ff ff81 	bl	20000266 <ActivateRow>
    return  0xFF;
20000364:	23ff      	movs	r3, #255	; 0xff
}
20000366:	0018      	movs	r0, r3
20000368:	46bd      	mov	sp, r7
2000036a:	b007      	add	sp, #28
2000036c:	bd90      	pop	{r4, r7, pc}
2000036e:	46c0      	nop			; (mov r8, r8)
20000370:	20001080 	andcs	r1, r0, r0, lsl #1

20000374 <ascii_ctrl_bit_set>:

// ------------------------------------------------------- Ascii display ------------------------------------------------------------------------------- //
// B_SELECT is needed here to activate the ascii display
void ascii_ctrl_bit_set(char x)
{
20000374:	b580      	push	{r7, lr}
20000376:	b084      	sub	sp, #16
20000378:	af00      	add	r7, sp, #0
2000037a:	0002      	movs	r2, r0
2000037c:	1dfb      	adds	r3, r7, #7
2000037e:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000380:	4a09      	ldr	r2, [pc, #36]	; (200003a8 <ascii_ctrl_bit_set+0x34>)
20000382:	210f      	movs	r1, #15
20000384:	187b      	adds	r3, r7, r1
20000386:	7812      	ldrb	r2, [r2, #0]
20000388:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
2000038a:	1dfa      	adds	r2, r7, #7
2000038c:	187b      	adds	r3, r7, r1
2000038e:	7812      	ldrb	r2, [r2, #0]
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	4313      	orrs	r3, r2
20000394:	b2db      	uxtb	r3, r3
20000396:	4a04      	ldr	r2, [pc, #16]	; (200003a8 <ascii_ctrl_bit_set+0x34>)
20000398:	2104      	movs	r1, #4
2000039a:	430b      	orrs	r3, r1
2000039c:	b2db      	uxtb	r3, r3
2000039e:	7013      	strb	r3, [r2, #0]
}
200003a0:	46c0      	nop			; (mov r8, r8)
200003a2:	46bd      	mov	sp, r7
200003a4:	b004      	add	sp, #16
200003a6:	bd80      	pop	{r7, pc}
200003a8:	40021014 	andmi	r1, r2, r4, lsl r0

200003ac <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	b084      	sub	sp, #16
200003b0:	af00      	add	r7, sp, #0
200003b2:	0002      	movs	r2, r0
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
200003b8:	4a0d      	ldr	r2, [pc, #52]	; (200003f0 <ascii_ctrl_bit_clear+0x44>)
200003ba:	210f      	movs	r1, #15
200003bc:	187b      	adds	r3, r7, r1
200003be:	7812      	ldrb	r2, [r2, #0]
200003c0:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	b25b      	sxtb	r3, r3
200003c8:	43db      	mvns	r3, r3
200003ca:	b25b      	sxtb	r3, r3
200003cc:	187a      	adds	r2, r7, r1
200003ce:	7812      	ldrb	r2, [r2, #0]
200003d0:	b252      	sxtb	r2, r2
200003d2:	4013      	ands	r3, r2
200003d4:	b25a      	sxtb	r2, r3
200003d6:	187b      	adds	r3, r7, r1
200003d8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
200003da:	4a05      	ldr	r2, [pc, #20]	; (200003f0 <ascii_ctrl_bit_clear+0x44>)
200003dc:	187b      	adds	r3, r7, r1
200003de:	781b      	ldrb	r3, [r3, #0]
200003e0:	2104      	movs	r1, #4
200003e2:	430b      	orrs	r3, r1
200003e4:	b2db      	uxtb	r3, r3
200003e6:	7013      	strb	r3, [r2, #0]
}
200003e8:	46c0      	nop			; (mov r8, r8)
200003ea:	46bd      	mov	sp, r7
200003ec:	b004      	add	sp, #16
200003ee:	bd80      	pop	{r7, pc}
200003f0:	40021014 	andmi	r1, r2, r4, lsl r0

200003f4 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte)
{
200003f4:	b580      	push	{r7, lr}
200003f6:	b082      	sub	sp, #8
200003f8:	af00      	add	r7, sp, #0
200003fa:	0002      	movs	r2, r0
200003fc:	1dfb      	adds	r3, r7, #7
200003fe:	701a      	strb	r2, [r3, #0]
	// These delays are need for the processor to execute the respective functions.
	delay_250ns(); // 40ns
20000400:	f7ff fee2 	bl	200001c8 <delay_250ns>
	ascii_ctrl_bit_set(B_E);
20000404:	2040      	movs	r0, #64	; 0x40
20000406:	f7ff ffb5 	bl	20000374 <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
2000040a:	4a07      	ldr	r2, [pc, #28]	; (20000428 <ascii_write_controller+0x34>)
2000040c:	1dfb      	adds	r3, r7, #7
2000040e:	781b      	ldrb	r3, [r3, #0]
20000410:	7013      	strb	r3, [r2, #0]
	delay_250ns(); //230ns
20000412:	f7ff fed9 	bl	200001c8 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000416:	2040      	movs	r0, #64	; 0x40
20000418:	f7ff ffc8 	bl	200003ac <ascii_ctrl_bit_clear>
	delay_250ns(); // 10ns 
2000041c:	f7ff fed4 	bl	200001c8 <delay_250ns>
}
20000420:	46c0      	nop			; (mov r8, r8)
20000422:	46bd      	mov	sp, r7
20000424:	b002      	add	sp, #8
20000426:	bd80      	pop	{r7, pc}
20000428:	40021015 	andmi	r1, r2, r5, lsl r0

2000042c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
2000042c:	b580      	push	{r7, lr}
2000042e:	b082      	sub	sp, #8
20000430:	af00      	add	r7, sp, #0
20000432:	0002      	movs	r2, r0
20000434:	1dfb      	adds	r3, r7, #7
20000436:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000438:	2001      	movs	r0, #1
2000043a:	f7ff ffb7 	bl	200003ac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000043e:	2002      	movs	r0, #2
20000440:	f7ff ffb4 	bl	200003ac <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	0018      	movs	r0, r3
2000044a:	f7ff ffd3 	bl	200003f4 <ascii_write_controller>
}
2000044e:	46c0      	nop			; (mov r8, r8)
20000450:	46bd      	mov	sp, r7
20000452:	b002      	add	sp, #8
20000454:	bd80      	pop	{r7, pc}

20000456 <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
20000456:	b580      	push	{r7, lr}
20000458:	b082      	sub	sp, #8
2000045a:	af00      	add	r7, sp, #0
2000045c:	0002      	movs	r2, r0
2000045e:	1dfb      	adds	r3, r7, #7
20000460:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000462:	2001      	movs	r0, #1
20000464:	f7ff ff86 	bl	20000374 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000468:	2002      	movs	r0, #2
2000046a:	f7ff ff9f 	bl	200003ac <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	781b      	ldrb	r3, [r3, #0]
20000472:	0018      	movs	r0, r3
20000474:	f7ff ffbe 	bl	200003f4 <ascii_write_controller>
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b002      	add	sp, #8
2000047e:	bd80      	pop	{r7, pc}

20000480 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff74 	bl	20000374 <ascii_ctrl_bit_set>
	delay_250ns();
2000048c:	f7ff fe9c 	bl	200001c8 <delay_250ns>
	delay_250ns(); // 360ns
20000490:	f7ff fe9a 	bl	200001c8 <delay_250ns>
	unsigned char rv = *portIdrHigh;
20000494:	4a06      	ldr	r2, [pc, #24]	; (200004b0 <ascii_read_controller+0x30>)
20000496:	1dfb      	adds	r3, r7, #7
20000498:	7812      	ldrb	r2, [r2, #0]
2000049a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000049c:	2040      	movs	r0, #64	; 0x40
2000049e:	f7ff ff85 	bl	200003ac <ascii_ctrl_bit_clear>
	return rv;
200004a2:	1dfb      	adds	r3, r7, #7
200004a4:	781b      	ldrb	r3, [r3, #0]
}
200004a6:	0018      	movs	r0, r3
200004a8:	46bd      	mov	sp, r7
200004aa:	b002      	add	sp, #8
200004ac:	bd80      	pop	{r7, pc}
200004ae:	46c0      	nop			; (mov r8, r8)
200004b0:	40021011 	andmi	r1, r2, r1, lsl r0

200004b4 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
200004b4:	b590      	push	{r4, r7, lr}
200004b6:	b083      	sub	sp, #12
200004b8:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
200004ba:	4b0b      	ldr	r3, [pc, #44]	; (200004e8 <ascii_read_status+0x34>)
200004bc:	4a0b      	ldr	r2, [pc, #44]	; (200004ec <ascii_read_status+0x38>)
200004be:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200004c0:	2001      	movs	r0, #1
200004c2:	f7ff ff73 	bl	200003ac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200004c6:	2002      	movs	r0, #2
200004c8:	f7ff ff54 	bl	20000374 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200004cc:	1dfc      	adds	r4, r7, #7
200004ce:	f7ff ffd7 	bl	20000480 <ascii_read_controller>
200004d2:	0003      	movs	r3, r0
200004d4:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output
200004d6:	4b04      	ldr	r3, [pc, #16]	; (200004e8 <ascii_read_status+0x34>)
200004d8:	4a05      	ldr	r2, [pc, #20]	; (200004f0 <ascii_read_status+0x3c>)
200004da:	601a      	str	r2, [r3, #0]
	return rv;
200004dc:	1dfb      	adds	r3, r7, #7
200004de:	781b      	ldrb	r3, [r3, #0]
}
200004e0:	0018      	movs	r0, r3
200004e2:	46bd      	mov	sp, r7
200004e4:	b003      	add	sp, #12
200004e6:	bd90      	pop	{r4, r7, pc}
200004e8:	40021000 	andmi	r1, r2, r0
200004ec:	00005555 	andeq	r5, r0, r5, asr r5
200004f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004f4 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200004f4:	b590      	push	{r4, r7, lr}
200004f6:	b083      	sub	sp, #12
200004f8:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
200004fa:	4b0b      	ldr	r3, [pc, #44]	; (20000528 <ascii_read_data+0x34>)
200004fc:	4a0b      	ldr	r2, [pc, #44]	; (2000052c <ascii_read_data+0x38>)
200004fe:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000500:	2001      	movs	r0, #1
20000502:	f7ff ff37 	bl	20000374 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000506:	2002      	movs	r0, #2
20000508:	f7ff ff34 	bl	20000374 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000050c:	1dfc      	adds	r4, r7, #7
2000050e:	f7ff ffb7 	bl	20000480 <ascii_read_controller>
20000512:	0003      	movs	r3, r0
20000514:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output 
20000516:	4b04      	ldr	r3, [pc, #16]	; (20000528 <ascii_read_data+0x34>)
20000518:	4a05      	ldr	r2, [pc, #20]	; (20000530 <ascii_read_data+0x3c>)
2000051a:	601a      	str	r2, [r3, #0]
	return rv;
2000051c:	1dfb      	adds	r3, r7, #7
2000051e:	781b      	ldrb	r3, [r3, #0]
}
20000520:	0018      	movs	r0, r3
20000522:	46bd      	mov	sp, r7
20000524:	b003      	add	sp, #12
20000526:	bd90      	pop	{r4, r7, pc}
20000528:	40021000 	andmi	r1, r2, r0
2000052c:	00005555 	andeq	r5, r0, r5, asr r5
20000530:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000534 <ascii_command>:

void ascii_command(unsigned char command)
{
20000534:	b580      	push	{r7, lr}
20000536:	b082      	sub	sp, #8
20000538:	af00      	add	r7, sp, #0
2000053a:	0002      	movs	r2, r0
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000540:	46c0      	nop			; (mov r8, r8)
20000542:	f7ff ffb7 	bl	200004b4 <ascii_read_status>
20000546:	0003      	movs	r3, r0
20000548:	001a      	movs	r2, r3
2000054a:	2380      	movs	r3, #128	; 0x80
2000054c:	4013      	ands	r3, r2
2000054e:	2b80      	cmp	r3, #128	; 0x80
20000550:	d0f7      	beq.n	20000542 <ascii_command+0xe>
	{}
	delay_micro(8);
20000552:	2008      	movs	r0, #8
20000554:	f7ff fe5a 	bl	2000020c <delay_micro>
	ascii_write_cmd(command);
20000558:	1dfb      	adds	r3, r7, #7
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	0018      	movs	r0, r3
2000055e:	f7ff ff65 	bl	2000042c <ascii_write_cmd>
	delay_micro(45);
20000562:	202d      	movs	r0, #45	; 0x2d
20000564:	f7ff fe52 	bl	2000020c <delay_micro>
}
20000568:	46c0      	nop			; (mov r8, r8)
2000056a:	46bd      	mov	sp, r7
2000056c:	b002      	add	sp, #8
2000056e:	bd80      	pop	{r7, pc}

20000570 <ascii_init>:

void ascii_init(void)
{
20000570:	b580      	push	{r7, lr}
20000572:	af00      	add	r7, sp, #0
	ascii_command(0x38); // 2 rows, 5x8 
20000574:	2038      	movs	r0, #56	; 0x38
20000576:	f7ff ffdd 	bl	20000534 <ascii_command>
	ascii_command(0x0E); // Activate display, activate cursor and set it as constant 
2000057a:	200e      	movs	r0, #14
2000057c:	f7ff ffda 	bl	20000534 <ascii_command>
	ascii_command(0x01); // Clear Display
20000580:	2001      	movs	r0, #1
20000582:	f7ff ffd7 	bl	20000534 <ascii_command>
	ascii_command(0x06); // Increment, No shift
20000586:	2006      	movs	r0, #6
20000588:	f7ff ffd4 	bl	20000534 <ascii_command>
}
2000058c:	46c0      	nop			; (mov r8, r8)
2000058e:	46bd      	mov	sp, r7
20000590:	bd80      	pop	{r7, pc}

20000592 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000592:	b580      	push	{r7, lr}
20000594:	b082      	sub	sp, #8
20000596:	af00      	add	r7, sp, #0
20000598:	0002      	movs	r2, r0
2000059a:	1dfb      	adds	r3, r7, #7
2000059c:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	f7ff ff88 	bl	200004b4 <ascii_read_status>
200005a4:	0003      	movs	r3, r0
200005a6:	001a      	movs	r2, r3
200005a8:	2380      	movs	r3, #128	; 0x80
200005aa:	4013      	ands	r3, r2
200005ac:	2b80      	cmp	r3, #128	; 0x80
200005ae:	d0f7      	beq.n	200005a0 <ascii_write_char+0xe>
	{}
	delay_micro(8);
200005b0:	2008      	movs	r0, #8
200005b2:	f7ff fe2b 	bl	2000020c <delay_micro>
	ascii_write_data(c);
200005b6:	1dfb      	adds	r3, r7, #7
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0018      	movs	r0, r3
200005bc:	f7ff ff4b 	bl	20000456 <ascii_write_data>
	delay_micro(45);
200005c0:	202d      	movs	r0, #45	; 0x2d
200005c2:	f7ff fe23 	bl	2000020c <delay_micro>
}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	46bd      	mov	sp, r7
200005ca:	b002      	add	sp, #8
200005cc:	bd80      	pop	{r7, pc}

200005ce <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
200005ce:	b580      	push	{r7, lr}
200005d0:	b084      	sub	sp, #16
200005d2:	af00      	add	r7, sp, #0
200005d4:	6078      	str	r0, [r7, #4]
200005d6:	6039      	str	r1, [r7, #0]
	unsigned char adress = x - 1;
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	b2da      	uxtb	r2, r3
200005dc:	210f      	movs	r1, #15
200005de:	187b      	adds	r3, r7, r1
200005e0:	3a01      	subs	r2, #1
200005e2:	701a      	strb	r2, [r3, #0]
	if ( y == 2 )
200005e4:	683b      	ldr	r3, [r7, #0]
200005e6:	2b02      	cmp	r3, #2
200005e8:	d104      	bne.n	200005f4 <ascii_gotoxy+0x26>
	{
		adress = adress + 0x40;
200005ea:	187b      	adds	r3, r7, r1
200005ec:	187a      	adds	r2, r7, r1
200005ee:	7812      	ldrb	r2, [r2, #0]
200005f0:	3240      	adds	r2, #64	; 0x40
200005f2:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | adress);
200005f4:	230f      	movs	r3, #15
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2280      	movs	r2, #128	; 0x80
200005fc:	4252      	negs	r2, r2
200005fe:	4313      	orrs	r3, r2
20000600:	b2db      	uxtb	r3, r3
20000602:	0018      	movs	r0, r3
20000604:	f7ff ff12 	bl	2000042c <ascii_write_cmd>
}
20000608:	46c0      	nop			; (mov r8, r8)
2000060a:	46bd      	mov	sp, r7
2000060c:	b004      	add	sp, #16
2000060e:	bd80      	pop	{r7, pc}

20000610 <swap>:

// ------------------------------------------------------- LCD MODULE ------------------------------------------------------------------------------- //
void swap(unsigned char *a, unsigned char *b)
{
20000610:	b580      	push	{r7, lr}
20000612:	b084      	sub	sp, #16
20000614:	af00      	add	r7, sp, #0
20000616:	6078      	str	r0, [r7, #4]
20000618:	6039      	str	r1, [r7, #0]
	unsigned char temp = *a;
2000061a:	210f      	movs	r1, #15
2000061c:	187b      	adds	r3, r7, r1
2000061e:	687a      	ldr	r2, [r7, #4]
20000620:	7812      	ldrb	r2, [r2, #0]
20000622:	701a      	strb	r2, [r3, #0]
	*a = *b;
20000624:	683b      	ldr	r3, [r7, #0]
20000626:	781a      	ldrb	r2, [r3, #0]
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	701a      	strb	r2, [r3, #0]
	*b = temp;
2000062c:	683b      	ldr	r3, [r7, #0]
2000062e:	187a      	adds	r2, r7, r1
20000630:	7812      	ldrb	r2, [r2, #0]
20000632:	701a      	strb	r2, [r3, #0]
}
20000634:	46c0      	nop			; (mov r8, r8)
20000636:	46bd      	mov	sp, r7
20000638:	b004      	add	sp, #16
2000063a:	bd80      	pop	{r7, pc}

2000063c <draw_line>:

int draw_line(PLINE l)
{
2000063c:	b590      	push	{r4, r7, lr}
2000063e:	b087      	sub	sp, #28
20000640:	af00      	add	r7, sp, #0
20000642:	6078      	str	r0, [r7, #4]
	// This just checks so that there are no points outside of the display which is 128x64 
	if ((l->p0.x < 1 && l->p0.x > 64) | (l->p1.x < 1 && l->p1.x > 64) | (l->p0.y < 1 && l->p0.y > 128) | (l->p1.y < 1 && l->p1.y > 128))
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	781b      	ldrb	r3, [r3, #0]
20000648:	2b00      	cmp	r3, #0
2000064a:	d105      	bne.n	20000658 <draw_line+0x1c>
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	2b40      	cmp	r3, #64	; 0x40
20000652:	d901      	bls.n	20000658 <draw_line+0x1c>
20000654:	2301      	movs	r3, #1
20000656:	e000      	b.n	2000065a <draw_line+0x1e>
20000658:	2300      	movs	r3, #0
2000065a:	1c1a      	adds	r2, r3, #0
2000065c:	2301      	movs	r3, #1
2000065e:	4013      	ands	r3, r2
20000660:	b2da      	uxtb	r2, r3
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	789b      	ldrb	r3, [r3, #2]
20000666:	2b00      	cmp	r3, #0
20000668:	d105      	bne.n	20000676 <draw_line+0x3a>
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	789b      	ldrb	r3, [r3, #2]
2000066e:	2b40      	cmp	r3, #64	; 0x40
20000670:	d901      	bls.n	20000676 <draw_line+0x3a>
20000672:	2301      	movs	r3, #1
20000674:	e000      	b.n	20000678 <draw_line+0x3c>
20000676:	2300      	movs	r3, #0
20000678:	1c19      	adds	r1, r3, #0
2000067a:	2301      	movs	r3, #1
2000067c:	400b      	ands	r3, r1
2000067e:	b2db      	uxtb	r3, r3
20000680:	4313      	orrs	r3, r2
20000682:	b2db      	uxtb	r3, r3
20000684:	001a      	movs	r2, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	785b      	ldrb	r3, [r3, #1]
2000068a:	2b00      	cmp	r3, #0
2000068c:	d105      	bne.n	2000069a <draw_line+0x5e>
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	785b      	ldrb	r3, [r3, #1]
20000692:	2b80      	cmp	r3, #128	; 0x80
20000694:	d901      	bls.n	2000069a <draw_line+0x5e>
20000696:	2301      	movs	r3, #1
20000698:	e000      	b.n	2000069c <draw_line+0x60>
2000069a:	2300      	movs	r3, #0
2000069c:	431a      	orrs	r2, r3
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	78db      	ldrb	r3, [r3, #3]
200006a2:	2b00      	cmp	r3, #0
200006a4:	d105      	bne.n	200006b2 <draw_line+0x76>
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	78db      	ldrb	r3, [r3, #3]
200006aa:	2b80      	cmp	r3, #128	; 0x80
200006ac:	d901      	bls.n	200006b2 <draw_line+0x76>
200006ae:	2301      	movs	r3, #1
200006b0:	e000      	b.n	200006b4 <draw_line+0x78>
200006b2:	2300      	movs	r3, #0
200006b4:	4313      	orrs	r3, r2
200006b6:	d001      	beq.n	200006bc <draw_line+0x80>
		return 0;
200006b8:	2300      	movs	r3, #0
200006ba:	e0b6      	b.n	2000082a <draw_line+0x1ee>
	
	// Bresenhams Algorithm - honestly no idea how it works 
	char steep;
	if (abs(l->p0.y - l->p1.y) > abs(l->p0.x - l->p1.x))
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	785b      	ldrb	r3, [r3, #1]
200006c0:	001a      	movs	r2, r3
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	78db      	ldrb	r3, [r3, #3]
200006c6:	1ad3      	subs	r3, r2, r3
200006c8:	17d9      	asrs	r1, r3, #31
200006ca:	185a      	adds	r2, r3, r1
200006cc:	404a      	eors	r2, r1
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	781b      	ldrb	r3, [r3, #0]
200006d2:	0019      	movs	r1, r3
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	789b      	ldrb	r3, [r3, #2]
200006d8:	1acb      	subs	r3, r1, r3
200006da:	17d9      	asrs	r1, r3, #31
200006dc:	185b      	adds	r3, r3, r1
200006de:	404b      	eors	r3, r1
200006e0:	429a      	cmp	r2, r3
200006e2:	dd04      	ble.n	200006ee <draw_line+0xb2>
		steep = 1;
200006e4:	2317      	movs	r3, #23
200006e6:	18fb      	adds	r3, r7, r3
200006e8:	2201      	movs	r2, #1
200006ea:	701a      	strb	r2, [r3, #0]
200006ec:	e003      	b.n	200006f6 <draw_line+0xba>
	else
		steep = 0;
200006ee:	2317      	movs	r3, #23
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	2200      	movs	r2, #0
200006f4:	701a      	strb	r2, [r3, #0]
	if (steep)
200006f6:	2317      	movs	r3, #23
200006f8:	18fb      	adds	r3, r7, r3
200006fa:	781b      	ldrb	r3, [r3, #0]
200006fc:	2b00      	cmp	r3, #0
200006fe:	d00e      	beq.n	2000071e <draw_line+0xe2>
	{
		swap(&l->p0.x, &l->p0.y);
20000700:	687a      	ldr	r2, [r7, #4]
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	3301      	adds	r3, #1
20000706:	0019      	movs	r1, r3
20000708:	0010      	movs	r0, r2
2000070a:	f7ff ff81 	bl	20000610 <swap>
		swap(&l->p1.x, &l->p1.y);
2000070e:	687b      	ldr	r3, [r7, #4]
20000710:	1c9a      	adds	r2, r3, #2
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	3303      	adds	r3, #3
20000716:	0019      	movs	r1, r3
20000718:	0010      	movs	r0, r2
2000071a:	f7ff ff79 	bl	20000610 <swap>
	}
	if (l->p0.x > l->p1.x)
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	781a      	ldrb	r2, [r3, #0]
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	789b      	ldrb	r3, [r3, #2]
20000726:	429a      	cmp	r2, r3
20000728:	d90e      	bls.n	20000748 <draw_line+0x10c>
	{
		swap(&l->p0.x, &l->p1.x);
2000072a:	687a      	ldr	r2, [r7, #4]
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	3302      	adds	r3, #2
20000730:	0019      	movs	r1, r3
20000732:	0010      	movs	r0, r2
20000734:	f7ff ff6c 	bl	20000610 <swap>
		swap(&l->p0.y, &l->p1.y);
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	1c5a      	adds	r2, r3, #1
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	3303      	adds	r3, #3
20000740:	0019      	movs	r1, r3
20000742:	0010      	movs	r0, r2
20000744:	f7ff ff64 	bl	20000610 <swap>
	}
	char deltax = l->p1.x - l->p0.x;
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	7899      	ldrb	r1, [r3, #2]
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	781a      	ldrb	r2, [r3, #0]
20000750:	230f      	movs	r3, #15
20000752:	18fb      	adds	r3, r7, r3
20000754:	1a8a      	subs	r2, r1, r2
20000756:	701a      	strb	r2, [r3, #0]
	char deltay = abs(l->p1.y - l->p0.y);
20000758:	687b      	ldr	r3, [r7, #4]
2000075a:	78db      	ldrb	r3, [r3, #3]
2000075c:	001a      	movs	r2, r3
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	785b      	ldrb	r3, [r3, #1]
20000762:	1ad3      	subs	r3, r2, r3
20000764:	17d9      	asrs	r1, r3, #31
20000766:	185a      	adds	r2, r3, r1
20000768:	404a      	eors	r2, r1
2000076a:	230e      	movs	r3, #14
2000076c:	18fb      	adds	r3, r7, r3
2000076e:	701a      	strb	r2, [r3, #0]
	char error = 0;
20000770:	2316      	movs	r3, #22
20000772:	18fb      	adds	r3, r7, r3
20000774:	2200      	movs	r2, #0
20000776:	701a      	strb	r2, [r3, #0]
	char y = l->p0.y;
20000778:	2315      	movs	r3, #21
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	687a      	ldr	r2, [r7, #4]
2000077e:	7852      	ldrb	r2, [r2, #1]
20000780:	701a      	strb	r2, [r3, #0]
	char ystep;
	if (l->p0.y < l->p1.y)
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	785a      	ldrb	r2, [r3, #1]
20000786:	687b      	ldr	r3, [r7, #4]
20000788:	78db      	ldrb	r3, [r3, #3]
2000078a:	429a      	cmp	r2, r3
2000078c:	d204      	bcs.n	20000798 <draw_line+0x15c>
		ystep = 1;
2000078e:	2314      	movs	r3, #20
20000790:	18fb      	adds	r3, r7, r3
20000792:	2201      	movs	r2, #1
20000794:	701a      	strb	r2, [r3, #0]
20000796:	e003      	b.n	200007a0 <draw_line+0x164>
	else
		ystep = -1;
20000798:	2314      	movs	r3, #20
2000079a:	18fb      	adds	r3, r7, r3
2000079c:	22ff      	movs	r2, #255	; 0xff
2000079e:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	781b      	ldrb	r3, [r3, #0]
200007a4:	613b      	str	r3, [r7, #16]
200007a6:	e039      	b.n	2000081c <draw_line+0x1e0>
	{
		if (steep)
200007a8:	2317      	movs	r3, #23
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	2b00      	cmp	r3, #0
200007b0:	d008      	beq.n	200007c4 <draw_line+0x188>
			graphic_pixel_set(y, x);
200007b2:	2315      	movs	r3, #21
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	693a      	ldr	r2, [r7, #16]
200007ba:	0011      	movs	r1, r2
200007bc:	0018      	movs	r0, r3
200007be:	f000 fb9b 	bl	20000ef8 <graphic_pixel_set>
200007c2:	e007      	b.n	200007d4 <draw_line+0x198>
		else
			graphic_pixel_set(x, y);
200007c4:	2315      	movs	r3, #21
200007c6:	18fb      	adds	r3, r7, r3
200007c8:	781a      	ldrb	r2, [r3, #0]
200007ca:	693b      	ldr	r3, [r7, #16]
200007cc:	0011      	movs	r1, r2
200007ce:	0018      	movs	r0, r3
200007d0:	f000 fb92 	bl	20000ef8 <graphic_pixel_set>
		error = error + deltay;
200007d4:	2016      	movs	r0, #22
200007d6:	183b      	adds	r3, r7, r0
200007d8:	1839      	adds	r1, r7, r0
200007da:	220e      	movs	r2, #14
200007dc:	18ba      	adds	r2, r7, r2
200007de:	7809      	ldrb	r1, [r1, #0]
200007e0:	7812      	ldrb	r2, [r2, #0]
200007e2:	188a      	adds	r2, r1, r2
200007e4:	701a      	strb	r2, [r3, #0]
		if (2 * error >= deltax)
200007e6:	183b      	adds	r3, r7, r0
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	005a      	lsls	r2, r3, #1
200007ec:	240f      	movs	r4, #15
200007ee:	193b      	adds	r3, r7, r4
200007f0:	781b      	ldrb	r3, [r3, #0]
200007f2:	429a      	cmp	r2, r3
200007f4:	db0f      	blt.n	20000816 <draw_line+0x1da>
		{
			y = y +ystep;
200007f6:	2215      	movs	r2, #21
200007f8:	18bb      	adds	r3, r7, r2
200007fa:	18b9      	adds	r1, r7, r2
200007fc:	2214      	movs	r2, #20
200007fe:	18ba      	adds	r2, r7, r2
20000800:	7809      	ldrb	r1, [r1, #0]
20000802:	7812      	ldrb	r2, [r2, #0]
20000804:	188a      	adds	r2, r1, r2
20000806:	701a      	strb	r2, [r3, #0]
			error = error - deltax;
20000808:	183b      	adds	r3, r7, r0
2000080a:	1839      	adds	r1, r7, r0
2000080c:	193a      	adds	r2, r7, r4
2000080e:	7809      	ldrb	r1, [r1, #0]
20000810:	7812      	ldrb	r2, [r2, #0]
20000812:	1a8a      	subs	r2, r1, r2
20000814:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
20000816:	693b      	ldr	r3, [r7, #16]
20000818:	3301      	adds	r3, #1
2000081a:	613b      	str	r3, [r7, #16]
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	789b      	ldrb	r3, [r3, #2]
20000820:	001a      	movs	r2, r3
20000822:	693b      	ldr	r3, [r7, #16]
20000824:	4293      	cmp	r3, r2
20000826:	ddbf      	ble.n	200007a8 <draw_line+0x16c>
		}
	}

	// Returns 1 if it succeded
	return 1;
20000828:	2301      	movs	r3, #1
}
2000082a:	0018      	movs	r0, r3
2000082c:	46bd      	mov	sp, r7
2000082e:	b007      	add	sp, #28
20000830:	bd90      	pop	{r4, r7, pc}

20000832 <draw_rectangle>:

void draw_rectangle(PRECT r)
{
20000832:	b5f0      	push	{r4, r5, r6, r7, lr}
20000834:	b087      	sub	sp, #28
20000836:	af00      	add	r7, sp, #0
20000838:	6078      	str	r0, [r7, #4]
	POINT start;
	POINT end;
	LINE side;
	// Honestly would never write code like this but in the book it looked like this. 
	start.x = r->p.x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
2000083a:	687b      	ldr	r3, [r7, #4]
2000083c:	781a      	ldrb	r2, [r3, #0]
2000083e:	2114      	movs	r1, #20
20000840:	187b      	adds	r3, r7, r1
20000842:	701a      	strb	r2, [r3, #0]
20000844:	687b      	ldr	r3, [r7, #4]
20000846:	785a      	ldrb	r2, [r3, #1]
20000848:	187b      	adds	r3, r7, r1
2000084a:	705a      	strb	r2, [r3, #1]
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	781a      	ldrb	r2, [r3, #0]
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	789b      	ldrb	r3, [r3, #2]
20000854:	18d3      	adds	r3, r2, r3
20000856:	b2da      	uxtb	r2, r3
20000858:	2510      	movs	r5, #16
2000085a:	197b      	adds	r3, r7, r5
2000085c:	701a      	strb	r2, [r3, #0]
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	785a      	ldrb	r2, [r3, #1]
20000862:	197b      	adds	r3, r7, r5
20000864:	705a      	strb	r2, [r3, #1]
20000866:	260c      	movs	r6, #12
20000868:	19bb      	adds	r3, r7, r6
2000086a:	000c      	movs	r4, r1
2000086c:	187a      	adds	r2, r7, r1
2000086e:	8812      	ldrh	r2, [r2, #0]
20000870:	801a      	strh	r2, [r3, #0]
20000872:	19bb      	adds	r3, r7, r6
20000874:	2102      	movs	r1, #2
20000876:	197a      	adds	r2, r7, r5
20000878:	8812      	ldrh	r2, [r2, #0]
2000087a:	525a      	strh	r2, [r3, r1]
2000087c:	19bb      	adds	r3, r7, r6
2000087e:	0018      	movs	r0, r3
20000880:	f7ff fedc 	bl	2000063c <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	781a      	ldrb	r2, [r3, #0]
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	789b      	ldrb	r3, [r3, #2]
2000088c:	18d3      	adds	r3, r2, r3
2000088e:	b2da      	uxtb	r2, r3
20000890:	0021      	movs	r1, r4
20000892:	187b      	adds	r3, r7, r1
20000894:	701a      	strb	r2, [r3, #0]
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	785a      	ldrb	r2, [r3, #1]
2000089a:	187b      	adds	r3, r7, r1
2000089c:	705a      	strb	r2, [r3, #1]
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	781a      	ldrb	r2, [r3, #0]
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	789b      	ldrb	r3, [r3, #2]
200008a6:	18d3      	adds	r3, r2, r3
200008a8:	b2da      	uxtb	r2, r3
200008aa:	197b      	adds	r3, r7, r5
200008ac:	701a      	strb	r2, [r3, #0]
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	785a      	ldrb	r2, [r3, #1]
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	78db      	ldrb	r3, [r3, #3]
200008b6:	18d3      	adds	r3, r2, r3
200008b8:	b2da      	uxtb	r2, r3
200008ba:	197b      	adds	r3, r7, r5
200008bc:	705a      	strb	r2, [r3, #1]
200008be:	19bb      	adds	r3, r7, r6
200008c0:	000c      	movs	r4, r1
200008c2:	187a      	adds	r2, r7, r1
200008c4:	8812      	ldrh	r2, [r2, #0]
200008c6:	801a      	strh	r2, [r3, #0]
200008c8:	19bb      	adds	r3, r7, r6
200008ca:	2102      	movs	r1, #2
200008cc:	197a      	adds	r2, r7, r5
200008ce:	8812      	ldrh	r2, [r2, #0]
200008d0:	525a      	strh	r2, [r3, r1]
200008d2:	19bb      	adds	r3, r7, r6
200008d4:	0018      	movs	r0, r3
200008d6:	f7ff feb1 	bl	2000063c <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
200008da:	687b      	ldr	r3, [r7, #4]
200008dc:	781a      	ldrb	r2, [r3, #0]
200008de:	687b      	ldr	r3, [r7, #4]
200008e0:	789b      	ldrb	r3, [r3, #2]
200008e2:	18d3      	adds	r3, r2, r3
200008e4:	b2da      	uxtb	r2, r3
200008e6:	0021      	movs	r1, r4
200008e8:	187b      	adds	r3, r7, r1
200008ea:	701a      	strb	r2, [r3, #0]
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	785a      	ldrb	r2, [r3, #1]
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	78db      	ldrb	r3, [r3, #3]
200008f4:	18d3      	adds	r3, r2, r3
200008f6:	b2da      	uxtb	r2, r3
200008f8:	187b      	adds	r3, r7, r1
200008fa:	705a      	strb	r2, [r3, #1]
200008fc:	687b      	ldr	r3, [r7, #4]
200008fe:	781a      	ldrb	r2, [r3, #0]
20000900:	197b      	adds	r3, r7, r5
20000902:	701a      	strb	r2, [r3, #0]
20000904:	687b      	ldr	r3, [r7, #4]
20000906:	785a      	ldrb	r2, [r3, #1]
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	78db      	ldrb	r3, [r3, #3]
2000090c:	18d3      	adds	r3, r2, r3
2000090e:	b2da      	uxtb	r2, r3
20000910:	197b      	adds	r3, r7, r5
20000912:	705a      	strb	r2, [r3, #1]
20000914:	19bb      	adds	r3, r7, r6
20000916:	000c      	movs	r4, r1
20000918:	187a      	adds	r2, r7, r1
2000091a:	8812      	ldrh	r2, [r2, #0]
2000091c:	801a      	strh	r2, [r3, #0]
2000091e:	19bb      	adds	r3, r7, r6
20000920:	2102      	movs	r1, #2
20000922:	197a      	adds	r2, r7, r5
20000924:	8812      	ldrh	r2, [r2, #0]
20000926:	525a      	strh	r2, [r3, r1]
20000928:	19bb      	adds	r3, r7, r6
2000092a:	0018      	movs	r0, r3
2000092c:	f7ff fe86 	bl	2000063c <draw_line>
	start.x = r->p.x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	781a      	ldrb	r2, [r3, #0]
20000934:	0021      	movs	r1, r4
20000936:	187b      	adds	r3, r7, r1
20000938:	701a      	strb	r2, [r3, #0]
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	785a      	ldrb	r2, [r3, #1]
2000093e:	687b      	ldr	r3, [r7, #4]
20000940:	78db      	ldrb	r3, [r3, #3]
20000942:	18d3      	adds	r3, r2, r3
20000944:	b2da      	uxtb	r2, r3
20000946:	187b      	adds	r3, r7, r1
20000948:	705a      	strb	r2, [r3, #1]
2000094a:	687b      	ldr	r3, [r7, #4]
2000094c:	781a      	ldrb	r2, [r3, #0]
2000094e:	197b      	adds	r3, r7, r5
20000950:	701a      	strb	r2, [r3, #0]
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	785a      	ldrb	r2, [r3, #1]
20000956:	197b      	adds	r3, r7, r5
20000958:	705a      	strb	r2, [r3, #1]
2000095a:	19bb      	adds	r3, r7, r6
2000095c:	187a      	adds	r2, r7, r1
2000095e:	8812      	ldrh	r2, [r2, #0]
20000960:	801a      	strh	r2, [r3, #0]
20000962:	19bb      	adds	r3, r7, r6
20000964:	2102      	movs	r1, #2
20000966:	197a      	adds	r2, r7, r5
20000968:	8812      	ldrh	r2, [r2, #0]
2000096a:	525a      	strh	r2, [r3, r1]
2000096c:	19bb      	adds	r3, r7, r6
2000096e:	0018      	movs	r0, r3
20000970:	f7ff fe64 	bl	2000063c <draw_line>
}
20000974:	46c0      	nop			; (mov r8, r8)
20000976:	46bd      	mov	sp, r7
20000978:	b007      	add	sp, #28
2000097a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000097c <draw_polygon>:

void draw_polygon(PPOLYPOINT polygon)
{
2000097c:	b5b0      	push	{r4, r5, r7, lr}
2000097e:	b088      	sub	sp, #32
20000980:	af00      	add	r7, sp, #0
20000982:	6078      	str	r0, [r7, #4]
	POLYPOINT p0;
	p0.x = polygon->x;
20000984:	687b      	ldr	r3, [r7, #4]
20000986:	781a      	ldrb	r2, [r3, #0]
20000988:	2114      	movs	r1, #20
2000098a:	187b      	adds	r3, r7, r1
2000098c:	701a      	strb	r2, [r3, #0]
	p0.y = polygon->y;
2000098e:	687b      	ldr	r3, [r7, #4]
20000990:	785a      	ldrb	r2, [r3, #1]
20000992:	187b      	adds	r3, r7, r1
20000994:	705a      	strb	r2, [r3, #1]
	PPOLYPOINT ptr = polygon->next;
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	685b      	ldr	r3, [r3, #4]
2000099a:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
2000099c:	e02a      	b.n	200009f4 <draw_polygon+0x78>
	{
		POLYPOINT p1;
		p1.x = ptr->x;
2000099e:	69fb      	ldr	r3, [r7, #28]
200009a0:	781a      	ldrb	r2, [r3, #0]
200009a2:	210c      	movs	r1, #12
200009a4:	187b      	adds	r3, r7, r1
200009a6:	701a      	strb	r2, [r3, #0]
		p1.y = ptr->y;
200009a8:	69fb      	ldr	r3, [r7, #28]
200009aa:	785a      	ldrb	r2, [r3, #1]
200009ac:	187b      	adds	r3, r7, r1
200009ae:	705a      	strb	r2, [r3, #1]
		LINE side = {{p0.x, p0.y}, {p1.x, p1.y}};
200009b0:	2514      	movs	r5, #20
200009b2:	197b      	adds	r3, r7, r5
200009b4:	781a      	ldrb	r2, [r3, #0]
200009b6:	2008      	movs	r0, #8
200009b8:	183b      	adds	r3, r7, r0
200009ba:	701a      	strb	r2, [r3, #0]
200009bc:	197b      	adds	r3, r7, r5
200009be:	785a      	ldrb	r2, [r3, #1]
200009c0:	183b      	adds	r3, r7, r0
200009c2:	705a      	strb	r2, [r3, #1]
200009c4:	187b      	adds	r3, r7, r1
200009c6:	781a      	ldrb	r2, [r3, #0]
200009c8:	183b      	adds	r3, r7, r0
200009ca:	709a      	strb	r2, [r3, #2]
200009cc:	000c      	movs	r4, r1
200009ce:	187b      	adds	r3, r7, r1
200009d0:	785a      	ldrb	r2, [r3, #1]
200009d2:	183b      	adds	r3, r7, r0
200009d4:	70da      	strb	r2, [r3, #3]
		draw_line(&side);
200009d6:	183b      	adds	r3, r7, r0
200009d8:	0018      	movs	r0, r3
200009da:	f7ff fe2f 	bl	2000063c <draw_line>
		p0.x = p1.x; p0.y = p1.y;
200009de:	193b      	adds	r3, r7, r4
200009e0:	781a      	ldrb	r2, [r3, #0]
200009e2:	197b      	adds	r3, r7, r5
200009e4:	701a      	strb	r2, [r3, #0]
200009e6:	193b      	adds	r3, r7, r4
200009e8:	785a      	ldrb	r2, [r3, #1]
200009ea:	197b      	adds	r3, r7, r5
200009ec:	705a      	strb	r2, [r3, #1]
		ptr = ptr->next;
200009ee:	69fb      	ldr	r3, [r7, #28]
200009f0:	685b      	ldr	r3, [r3, #4]
200009f2:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
200009f4:	69fb      	ldr	r3, [r7, #28]
200009f6:	2b00      	cmp	r3, #0
200009f8:	d1d1      	bne.n	2000099e <draw_polygon+0x22>
	}
}
200009fa:	46c0      	nop			; (mov r8, r8)
200009fc:	46c0      	nop			; (mov r8, r8)
200009fe:	46bd      	mov	sp, r7
20000a00:	b008      	add	sp, #32
20000a02:	bdb0      	pop	{r4, r5, r7, pc}

20000a04 <draw_ballobject>:

// ------------------------------------------------------- Objects ------------------------------------------------------------------------------- //
void draw_ballobject(POBJECT o)
{
20000a04:	b580      	push	{r7, lr}
20000a06:	b086      	sub	sp, #24
20000a08:	af00      	add	r7, sp, #0
20000a0a:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	681b      	ldr	r3, [r3, #0]
20000a12:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < pixels; i++)
20000a14:	2300      	movs	r3, #0
20000a16:	617b      	str	r3, [r7, #20]
20000a18:	e033      	b.n	20000a82 <draw_ballobject+0x7e>
	{
		// (o->geo->px+i) gets the position of one of the pixels and then the period after gets x/y value of that point
		int testx = o->posx + (o->geo->px+i)->x;
20000a1a:	687b      	ldr	r3, [r7, #4]
20000a1c:	68da      	ldr	r2, [r3, #12]
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	681b      	ldr	r3, [r3, #0]
20000a22:	330c      	adds	r3, #12
20000a24:	0019      	movs	r1, r3
20000a26:	697b      	ldr	r3, [r7, #20]
20000a28:	005b      	lsls	r3, r3, #1
20000a2a:	18cb      	adds	r3, r1, r3
20000a2c:	781b      	ldrb	r3, [r3, #0]
20000a2e:	18d3      	adds	r3, r2, r3
20000a30:	60fb      	str	r3, [r7, #12]
		int testy = o->posy + (o->geo->px+i)->y;
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	691a      	ldr	r2, [r3, #16]
20000a36:	687b      	ldr	r3, [r7, #4]
20000a38:	681b      	ldr	r3, [r3, #0]
20000a3a:	330c      	adds	r3, #12
20000a3c:	0019      	movs	r1, r3
20000a3e:	697b      	ldr	r3, [r7, #20]
20000a40:	005b      	lsls	r3, r3, #1
20000a42:	18cb      	adds	r3, r1, r3
20000a44:	785b      	ldrb	r3, [r3, #1]
20000a46:	18d3      	adds	r3, r2, r3
20000a48:	60bb      	str	r3, [r7, #8]
		graphic_pixel_set(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	68da      	ldr	r2, [r3, #12]
20000a4e:	687b      	ldr	r3, [r7, #4]
20000a50:	681b      	ldr	r3, [r3, #0]
20000a52:	330c      	adds	r3, #12
20000a54:	0019      	movs	r1, r3
20000a56:	697b      	ldr	r3, [r7, #20]
20000a58:	005b      	lsls	r3, r3, #1
20000a5a:	18cb      	adds	r3, r1, r3
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	18d0      	adds	r0, r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	691a      	ldr	r2, [r3, #16]
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	681b      	ldr	r3, [r3, #0]
20000a68:	330c      	adds	r3, #12
20000a6a:	0019      	movs	r1, r3
20000a6c:	697b      	ldr	r3, [r7, #20]
20000a6e:	005b      	lsls	r3, r3, #1
20000a70:	18cb      	adds	r3, r1, r3
20000a72:	785b      	ldrb	r3, [r3, #1]
20000a74:	18d3      	adds	r3, r2, r3
20000a76:	0019      	movs	r1, r3
20000a78:	f000 fa3e 	bl	20000ef8 <graphic_pixel_set>
	for (int i = 0; i < pixels; i++)
20000a7c:	697b      	ldr	r3, [r7, #20]
20000a7e:	3301      	adds	r3, #1
20000a80:	617b      	str	r3, [r7, #20]
20000a82:	697a      	ldr	r2, [r7, #20]
20000a84:	693b      	ldr	r3, [r7, #16]
20000a86:	429a      	cmp	r2, r3
20000a88:	dbc7      	blt.n	20000a1a <draw_ballobject+0x16>
	}

}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	46c0      	nop			; (mov r8, r8)
20000a8e:	46bd      	mov	sp, r7
20000a90:	b006      	add	sp, #24
20000a92:	bd80      	pop	{r7, pc}

20000a94 <clear_ballobject>:

void clear_ballobject(POBJECT o)
{
20000a94:	b580      	push	{r7, lr}
20000a96:	b084      	sub	sp, #16
20000a98:	af00      	add	r7, sp, #0
20000a9a:	6078      	str	r0, [r7, #4]
	int pixels = o->geo->numpoints;
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	681b      	ldr	r3, [r3, #0]
20000aa2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pixels; i++)
20000aa4:	2300      	movs	r3, #0
20000aa6:	60fb      	str	r3, [r7, #12]
20000aa8:	e01b      	b.n	20000ae2 <clear_ballobject+0x4e>
	{
		graphic_pixel_clear(o->posx + (o->geo->px+i)->x, o->posy + (o->geo->px+i)->y);
20000aaa:	687b      	ldr	r3, [r7, #4]
20000aac:	68da      	ldr	r2, [r3, #12]
20000aae:	687b      	ldr	r3, [r7, #4]
20000ab0:	681b      	ldr	r3, [r3, #0]
20000ab2:	330c      	adds	r3, #12
20000ab4:	0019      	movs	r1, r3
20000ab6:	68fb      	ldr	r3, [r7, #12]
20000ab8:	005b      	lsls	r3, r3, #1
20000aba:	18cb      	adds	r3, r1, r3
20000abc:	781b      	ldrb	r3, [r3, #0]
20000abe:	18d0      	adds	r0, r2, r3
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	691a      	ldr	r2, [r3, #16]
20000ac4:	687b      	ldr	r3, [r7, #4]
20000ac6:	681b      	ldr	r3, [r3, #0]
20000ac8:	330c      	adds	r3, #12
20000aca:	0019      	movs	r1, r3
20000acc:	68fb      	ldr	r3, [r7, #12]
20000ace:	005b      	lsls	r3, r3, #1
20000ad0:	18cb      	adds	r3, r1, r3
20000ad2:	785b      	ldrb	r3, [r3, #1]
20000ad4:	18d3      	adds	r3, r2, r3
20000ad6:	0019      	movs	r1, r3
20000ad8:	f000 fa11 	bl	20000efe <graphic_pixel_clear>
	for (int i = 0; i < pixels; i++)
20000adc:	68fb      	ldr	r3, [r7, #12]
20000ade:	3301      	adds	r3, #1
20000ae0:	60fb      	str	r3, [r7, #12]
20000ae2:	68fa      	ldr	r2, [r7, #12]
20000ae4:	68bb      	ldr	r3, [r7, #8]
20000ae6:	429a      	cmp	r2, r3
20000ae8:	dbdf      	blt.n	20000aaa <clear_ballobject+0x16>
	}

}
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	46c0      	nop			; (mov r8, r8)
20000aee:	46bd      	mov	sp, r7
20000af0:	b004      	add	sp, #16
20000af2:	bd80      	pop	{r7, pc}

20000af4 <move_ballobject>:

void move_ballobject(POBJECT o)
{
20000af4:	b580      	push	{r7, lr}
20000af6:	b084      	sub	sp, #16
20000af8:	af00      	add	r7, sp, #0
20000afa:	6078      	str	r0, [r7, #4]
	clear_ballobject(o);
20000afc:	687b      	ldr	r3, [r7, #4]
20000afe:	0018      	movs	r0, r3
20000b00:	f7ff ffc8 	bl	20000a94 <clear_ballobject>
	int newx = o->dirx + o->posx;
20000b04:	687b      	ldr	r3, [r7, #4]
20000b06:	685a      	ldr	r2, [r3, #4]
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	68db      	ldr	r3, [r3, #12]
20000b0c:	18d3      	adds	r3, r2, r3
20000b0e:	60fb      	str	r3, [r7, #12]
	int newy = o->diry + o->posy;
20000b10:	687b      	ldr	r3, [r7, #4]
20000b12:	689a      	ldr	r2, [r3, #8]
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	691b      	ldr	r3, [r3, #16]
20000b18:	18d3      	adds	r3, r2, r3
20000b1a:	60bb      	str	r3, [r7, #8]
	if (newx < 1) // touches left side
20000b1c:	68fb      	ldr	r3, [r7, #12]
20000b1e:	2b00      	cmp	r3, #0
20000b20:	dc0c      	bgt.n	20000b3c <move_ballobject+0x48>
	{
		// if its towards the left side x dir is negative which means we need to set it as positive 
		o->dirx = abs(o->dirx);
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	685b      	ldr	r3, [r3, #4]
20000b26:	17d9      	asrs	r1, r3, #31
20000b28:	185a      	adds	r2, r3, r1
20000b2a:	404a      	eors	r2, r1
20000b2c:	687b      	ldr	r3, [r7, #4]
20000b2e:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	685a      	ldr	r2, [r3, #4]
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	68db      	ldr	r3, [r3, #12]
20000b38:	18d3      	adds	r3, r2, r3
20000b3a:	60fb      	str	r3, [r7, #12]
	}	
	if (newx > 128) // touches right side
20000b3c:	68fb      	ldr	r3, [r7, #12]
20000b3e:	2b80      	cmp	r3, #128	; 0x80
20000b40:	dd0a      	ble.n	20000b58 <move_ballobject+0x64>
	{
		// if it touches right side x dir is positive and we need to set it negative. 
		o->dirx = -(o->dirx);
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	685b      	ldr	r3, [r3, #4]
20000b46:	425a      	negs	r2, r3
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	605a      	str	r2, [r3, #4]
		newx = o->dirx + o->posx;
20000b4c:	687b      	ldr	r3, [r7, #4]
20000b4e:	685a      	ldr	r2, [r3, #4]
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	68db      	ldr	r3, [r3, #12]
20000b54:	18d3      	adds	r3, r2, r3
20000b56:	60fb      	str	r3, [r7, #12]
	}
	if (newy < 1) // touches top side
20000b58:	68bb      	ldr	r3, [r7, #8]
20000b5a:	2b00      	cmp	r3, #0
20000b5c:	dc0c      	bgt.n	20000b78 <move_ballobject+0x84>
	{
		o->diry = abs(o->diry);
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	689b      	ldr	r3, [r3, #8]
20000b62:	17d9      	asrs	r1, r3, #31
20000b64:	185a      	adds	r2, r3, r1
20000b66:	404a      	eors	r2, r1
20000b68:	687b      	ldr	r3, [r7, #4]
20000b6a:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b6c:	687b      	ldr	r3, [r7, #4]
20000b6e:	689a      	ldr	r2, [r3, #8]
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	691b      	ldr	r3, [r3, #16]
20000b74:	18d3      	adds	r3, r2, r3
20000b76:	60bb      	str	r3, [r7, #8]
	}
	if (newy > 64) // touches bottom side
20000b78:	68bb      	ldr	r3, [r7, #8]
20000b7a:	2b40      	cmp	r3, #64	; 0x40
20000b7c:	dd0a      	ble.n	20000b94 <move_ballobject+0xa0>
	{
		o->diry = -(o->diry);
20000b7e:	687b      	ldr	r3, [r7, #4]
20000b80:	689b      	ldr	r3, [r3, #8]
20000b82:	425a      	negs	r2, r3
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	609a      	str	r2, [r3, #8]
		newy = o->diry + o->posy;
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	689a      	ldr	r2, [r3, #8]
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	691b      	ldr	r3, [r3, #16]
20000b90:	18d3      	adds	r3, r2, r3
20000b92:	60bb      	str	r3, [r7, #8]
	}
	o->posx = newx;
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	68fa      	ldr	r2, [r7, #12]
20000b98:	60da      	str	r2, [r3, #12]
	o->posy = newy;
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	68ba      	ldr	r2, [r7, #8]
20000b9e:	611a      	str	r2, [r3, #16]
	draw_ballobject(o);
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	0018      	movs	r0, r3
20000ba4:	f7ff ff2e 	bl	20000a04 <draw_ballobject>
}
20000ba8:	46c0      	nop			; (mov r8, r8)
20000baa:	46bd      	mov	sp, r7
20000bac:	b004      	add	sp, #16
20000bae:	bd80      	pop	{r7, pc}

20000bb0 <set_ballobject_speed>:

void set_ballobject_speed(POBJECT o, int speedx, int speedy)
{
20000bb0:	b580      	push	{r7, lr}
20000bb2:	b084      	sub	sp, #16
20000bb4:	af00      	add	r7, sp, #0
20000bb6:	60f8      	str	r0, [r7, #12]
20000bb8:	60b9      	str	r1, [r7, #8]
20000bba:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000bbc:	68fb      	ldr	r3, [r7, #12]
20000bbe:	68ba      	ldr	r2, [r7, #8]
20000bc0:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000bc2:	68fb      	ldr	r3, [r7, #12]
20000bc4:	687a      	ldr	r2, [r7, #4]
20000bc6:	609a      	str	r2, [r3, #8]
}
20000bc8:	46c0      	nop			; (mov r8, r8)
20000bca:	46bd      	mov	sp, r7
20000bcc:	b004      	add	sp, #16
20000bce:	bd80      	pop	{r7, pc}

20000bd0 <move_paddle>:

void move_paddle(POBJECT p)
{
20000bd0:	b580      	push	{r7, lr}
20000bd2:	b084      	sub	sp, #16
20000bd4:	af00      	add	r7, sp, #0
20000bd6:	6078      	str	r0, [r7, #4]
	clear_ballobject(p);
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	0018      	movs	r0, r3
20000bdc:	f7ff ff5a 	bl	20000a94 <clear_ballobject>
	int newy = p->posy + p->diry;
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	691a      	ldr	r2, [r3, #16]
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	689b      	ldr	r3, [r3, #8]
20000be8:	18d3      	adds	r3, r2, r3
20000bea:	60fb      	str	r3, [r7, #12]
	if (newy > -1 && newy < 60)
20000bec:	68fb      	ldr	r3, [r7, #12]
20000bee:	2b00      	cmp	r3, #0
20000bf0:	db05      	blt.n	20000bfe <move_paddle+0x2e>
20000bf2:	68fb      	ldr	r3, [r7, #12]
20000bf4:	2b3b      	cmp	r3, #59	; 0x3b
20000bf6:	dc02      	bgt.n	20000bfe <move_paddle+0x2e>
		p->posy = newy;
20000bf8:	687b      	ldr	r3, [r7, #4]
20000bfa:	68fa      	ldr	r2, [r7, #12]
20000bfc:	611a      	str	r2, [r3, #16]
	draw_ballobject(p);
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	0018      	movs	r0, r3
20000c02:	f7ff feff 	bl	20000a04 <draw_ballobject>
}
20000c06:	46c0      	nop			; (mov r8, r8)
20000c08:	46bd      	mov	sp, r7
20000c0a:	b004      	add	sp, #16
20000c0c:	bd80      	pop	{r7, pc}

20000c0e <bounce>:

void bounce(POBJECT paddle, POBJECT ball)
{
20000c0e:	b590      	push	{r4, r7, lr}
20000c10:	b089      	sub	sp, #36	; 0x24
20000c12:	af00      	add	r7, sp, #0
20000c14:	6078      	str	r0, [r7, #4]
20000c16:	6039      	str	r1, [r7, #0]
	int ballx = ball->posx + ball->dirx;
20000c18:	683b      	ldr	r3, [r7, #0]
20000c1a:	68da      	ldr	r2, [r3, #12]
20000c1c:	683b      	ldr	r3, [r7, #0]
20000c1e:	685b      	ldr	r3, [r3, #4]
20000c20:	18d3      	adds	r3, r2, r3
20000c22:	61fb      	str	r3, [r7, #28]
	int bally = ball->posy;
20000c24:	683b      	ldr	r3, [r7, #0]
20000c26:	691b      	ldr	r3, [r3, #16]
20000c28:	61bb      	str	r3, [r7, #24]
	int paddlex = paddle->posx;
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	68db      	ldr	r3, [r3, #12]
20000c2e:	617b      	str	r3, [r7, #20]
	int paddley = paddle->posy;
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	691b      	ldr	r3, [r3, #16]
20000c34:	613b      	str	r3, [r7, #16]
	int dir = -ball->dirx;
20000c36:	683b      	ldr	r3, [r7, #0]
20000c38:	685b      	ldr	r3, [r3, #4]
20000c3a:	425b      	negs	r3, r3
20000c3c:	60fb      	str	r3, [r7, #12]
	if (ballx >= paddlex && bally >= paddley && bally <= (paddley + 8))
20000c3e:	69fa      	ldr	r2, [r7, #28]
20000c40:	697b      	ldr	r3, [r7, #20]
20000c42:	429a      	cmp	r2, r3
20000c44:	db10      	blt.n	20000c68 <bounce+0x5a>
20000c46:	69ba      	ldr	r2, [r7, #24]
20000c48:	693b      	ldr	r3, [r7, #16]
20000c4a:	429a      	cmp	r2, r3
20000c4c:	db0c      	blt.n	20000c68 <bounce+0x5a>
20000c4e:	693b      	ldr	r3, [r7, #16]
20000c50:	3308      	adds	r3, #8
20000c52:	69ba      	ldr	r2, [r7, #24]
20000c54:	429a      	cmp	r2, r3
20000c56:	dc07      	bgt.n	20000c68 <bounce+0x5a>
	{
		ball->set_speed(ball, dir, ball->diry);
20000c58:	683b      	ldr	r3, [r7, #0]
20000c5a:	6a1c      	ldr	r4, [r3, #32]
20000c5c:	683b      	ldr	r3, [r7, #0]
20000c5e:	689a      	ldr	r2, [r3, #8]
20000c60:	68f9      	ldr	r1, [r7, #12]
20000c62:	683b      	ldr	r3, [r7, #0]
20000c64:	0018      	movs	r0, r3
20000c66:	47a0      	blx	r4
	}
}
20000c68:	46c0      	nop			; (mov r8, r8)
20000c6a:	46bd      	mov	sp, r7
20000c6c:	b009      	add	sp, #36	; 0x24
20000c6e:	bd90      	pop	{r4, r7, pc}

20000c70 <printGameOver>:

void printGameOver(int result)
{
20000c70:	b5b0      	push	{r4, r5, r7, lr}
20000c72:	b08a      	sub	sp, #40	; 0x28
20000c74:	af00      	add	r7, sp, #0
20000c76:	6078      	str	r0, [r7, #4]
	char *s;
	char test1[] = "Game Over! ";
20000c78:	2418      	movs	r4, #24
20000c7a:	193b      	adds	r3, r7, r4
20000c7c:	4a14      	ldr	r2, [pc, #80]	; (20000cd0 <printGameOver+0x60>)
20000c7e:	ca23      	ldmia	r2!, {r0, r1, r5}
20000c80:	c323      	stmia	r3!, {r0, r1, r5}
	char test2[] = "You Won!";
20000c82:	250c      	movs	r5, #12
20000c84:	197b      	adds	r3, r7, r5
20000c86:	4a13      	ldr	r2, [pc, #76]	; (20000cd4 <printGameOver+0x64>)
20000c88:	ca03      	ldmia	r2!, {r0, r1}
20000c8a:	c303      	stmia	r3!, {r0, r1}
20000c8c:	7812      	ldrb	r2, [r2, #0]
20000c8e:	701a      	strb	r2, [r3, #0]

	init_app();
20000c90:	f7ff fa64 	bl	2000015c <init_app>
	ascii_init();
20000c94:	f7ff fc6c 	bl	20000570 <ascii_init>
	ascii_gotoxy(1, 1);
20000c98:	2101      	movs	r1, #1
20000c9a:	2001      	movs	r0, #1
20000c9c:	f7ff fc97 	bl	200005ce <ascii_gotoxy>
	s = test1;
20000ca0:	193b      	adds	r3, r7, r4
20000ca2:	627b      	str	r3, [r7, #36]	; 0x24
	if (result)
20000ca4:	687b      	ldr	r3, [r7, #4]
20000ca6:	2b00      	cmp	r3, #0
20000ca8:	d009      	beq.n	20000cbe <printGameOver+0x4e>
		s = test2;
20000caa:	197b      	adds	r3, r7, r5
20000cac:	627b      	str	r3, [r7, #36]	; 0x24
	while (*s)
20000cae:	e006      	b.n	20000cbe <printGameOver+0x4e>
	{
		ascii_write_char(*s++);
20000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000cb2:	1c5a      	adds	r2, r3, #1
20000cb4:	627a      	str	r2, [r7, #36]	; 0x24
20000cb6:	781b      	ldrb	r3, [r3, #0]
20000cb8:	0018      	movs	r0, r3
20000cba:	f7ff fc6a 	bl	20000592 <ascii_write_char>
	while (*s)
20000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000cc0:	781b      	ldrb	r3, [r3, #0]
20000cc2:	2b00      	cmp	r3, #0
20000cc4:	d1f4      	bne.n	20000cb0 <printGameOver+0x40>
	}
}
20000cc6:	46c0      	nop			; (mov r8, r8)
20000cc8:	46c0      	nop			; (mov r8, r8)
20000cca:	46bd      	mov	sp, r7
20000ccc:	b00a      	add	sp, #40	; 0x28
20000cce:	bdb0      	pop	{r4, r5, r7, pc}
20000cd0:	20001090 	mulcs	r0, r0, r0
20000cd4:	2000109c 	mulcs	r0, ip, r0

20000cd8 <gameover>:

int gameover(POBJECT b)
{
20000cd8:	b580      	push	{r7, lr}
20000cda:	b082      	sub	sp, #8
20000cdc:	af00      	add	r7, sp, #0
20000cde:	6078      	str	r0, [r7, #4]
	if (b->posx >= 127)
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	68db      	ldr	r3, [r3, #12]
20000ce4:	2b7e      	cmp	r3, #126	; 0x7e
20000ce6:	dd01      	ble.n	20000cec <gameover+0x14>
	{
		return 1;
20000ce8:	2301      	movs	r3, #1
20000cea:	e000      	b.n	20000cee <gameover+0x16>
	}
	return 0;
20000cec:	2300      	movs	r3, #0
}
20000cee:	0018      	movs	r0, r3
20000cf0:	46bd      	mov	sp, r7
20000cf2:	b002      	add	sp, #8
20000cf4:	bd80      	pop	{r7, pc}

20000cf6 <move_spider>:

void move_spider(POBJECT s)
{
20000cf6:	b580      	push	{r7, lr}
20000cf8:	b084      	sub	sp, #16
20000cfa:	af00      	add	r7, sp, #0
20000cfc:	6078      	str	r0, [r7, #4]
	clear_ballobject(s);
20000cfe:	687b      	ldr	r3, [r7, #4]
20000d00:	0018      	movs	r0, r3
20000d02:	f7ff fec7 	bl	20000a94 <clear_ballobject>
	int newx = s->dirx + s->posx;
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	685a      	ldr	r2, [r3, #4]
20000d0a:	687b      	ldr	r3, [r7, #4]
20000d0c:	68db      	ldr	r3, [r3, #12]
20000d0e:	18d3      	adds	r3, r2, r3
20000d10:	60fb      	str	r3, [r7, #12]
	int newy = s->diry + s->posy;
20000d12:	687b      	ldr	r3, [r7, #4]
20000d14:	689a      	ldr	r2, [r3, #8]
20000d16:	687b      	ldr	r3, [r7, #4]
20000d18:	691b      	ldr	r3, [r3, #16]
20000d1a:	18d3      	adds	r3, r2, r3
20000d1c:	60bb      	str	r3, [r7, #8]
	//if (newx < 1 || newx > 128 || newy < 1 || newy > 64)
		//exit(1);
	s->posx = newx;
20000d1e:	687b      	ldr	r3, [r7, #4]
20000d20:	68fa      	ldr	r2, [r7, #12]
20000d22:	60da      	str	r2, [r3, #12]
	s->posy = newy;
20000d24:	687b      	ldr	r3, [r7, #4]
20000d26:	68ba      	ldr	r2, [r7, #8]
20000d28:	611a      	str	r2, [r3, #16]
	draw_ballobject(s);	
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	0018      	movs	r0, r3
20000d2e:	f7ff fe69 	bl	20000a04 <draw_ballobject>
}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	46bd      	mov	sp, r7
20000d36:	b004      	add	sp, #16
20000d38:	bd80      	pop	{r7, pc}

20000d3a <pixel_overlap>:

 int pixel_overlap(POBJECT o1, POBJECT o2)
 {
20000d3a:	b580      	push	{r7, lr}
20000d3c:	b086      	sub	sp, #24
20000d3e:	af00      	add	r7, sp, #0
20000d40:	6078      	str	r0, [r7, #4]
20000d42:	6039      	str	r1, [r7, #0]
	int x1 = o1->posx + o1->geo->sizex;
20000d44:	687b      	ldr	r3, [r7, #4]
20000d46:	68da      	ldr	r2, [r3, #12]
20000d48:	687b      	ldr	r3, [r7, #4]
20000d4a:	681b      	ldr	r3, [r3, #0]
20000d4c:	685b      	ldr	r3, [r3, #4]
20000d4e:	18d3      	adds	r3, r2, r3
20000d50:	617b      	str	r3, [r7, #20]
	int y1 = o1->posy + o1->geo->sizey;
20000d52:	687b      	ldr	r3, [r7, #4]
20000d54:	691a      	ldr	r2, [r3, #16]
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	681b      	ldr	r3, [r3, #0]
20000d5a:	689b      	ldr	r3, [r3, #8]
20000d5c:	18d3      	adds	r3, r2, r3
20000d5e:	613b      	str	r3, [r7, #16]
	int x2 = o2->posx + o2->geo->sizex;
20000d60:	683b      	ldr	r3, [r7, #0]
20000d62:	68da      	ldr	r2, [r3, #12]
20000d64:	683b      	ldr	r3, [r7, #0]
20000d66:	681b      	ldr	r3, [r3, #0]
20000d68:	685b      	ldr	r3, [r3, #4]
20000d6a:	18d3      	adds	r3, r2, r3
20000d6c:	60fb      	str	r3, [r7, #12]
	int y2 = o2->posy + o2->geo->sizey;
20000d6e:	683b      	ldr	r3, [r7, #0]
20000d70:	691a      	ldr	r2, [r3, #16]
20000d72:	683b      	ldr	r3, [r7, #0]
20000d74:	681b      	ldr	r3, [r3, #0]
20000d76:	689b      	ldr	r3, [r3, #8]
20000d78:	18d3      	adds	r3, r2, r3
20000d7a:	60bb      	str	r3, [r7, #8]
	if (((o1->posx >= o2->posx && o1->posx <= x2) && (o1->posy >= o2->posy && o1->posy <= y2)) || ((o2->posx >= o1->posx && o2->posx <= x1) && (o2->posy >= o1->posy && o2->posy <= y1)))
20000d7c:	687b      	ldr	r3, [r7, #4]
20000d7e:	68da      	ldr	r2, [r3, #12]
20000d80:	683b      	ldr	r3, [r7, #0]
20000d82:	68db      	ldr	r3, [r3, #12]
20000d84:	429a      	cmp	r2, r3
20000d86:	db0f      	blt.n	20000da8 <pixel_overlap+0x6e>
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	68db      	ldr	r3, [r3, #12]
20000d8c:	68fa      	ldr	r2, [r7, #12]
20000d8e:	429a      	cmp	r2, r3
20000d90:	db0a      	blt.n	20000da8 <pixel_overlap+0x6e>
20000d92:	687b      	ldr	r3, [r7, #4]
20000d94:	691a      	ldr	r2, [r3, #16]
20000d96:	683b      	ldr	r3, [r7, #0]
20000d98:	691b      	ldr	r3, [r3, #16]
20000d9a:	429a      	cmp	r2, r3
20000d9c:	db04      	blt.n	20000da8 <pixel_overlap+0x6e>
20000d9e:	687b      	ldr	r3, [r7, #4]
20000da0:	691b      	ldr	r3, [r3, #16]
20000da2:	68ba      	ldr	r2, [r7, #8]
20000da4:	429a      	cmp	r2, r3
20000da6:	da15      	bge.n	20000dd4 <pixel_overlap+0x9a>
20000da8:	683b      	ldr	r3, [r7, #0]
20000daa:	68da      	ldr	r2, [r3, #12]
20000dac:	687b      	ldr	r3, [r7, #4]
20000dae:	68db      	ldr	r3, [r3, #12]
20000db0:	429a      	cmp	r2, r3
20000db2:	db11      	blt.n	20000dd8 <pixel_overlap+0x9e>
20000db4:	683b      	ldr	r3, [r7, #0]
20000db6:	68db      	ldr	r3, [r3, #12]
20000db8:	697a      	ldr	r2, [r7, #20]
20000dba:	429a      	cmp	r2, r3
20000dbc:	db0c      	blt.n	20000dd8 <pixel_overlap+0x9e>
20000dbe:	683b      	ldr	r3, [r7, #0]
20000dc0:	691a      	ldr	r2, [r3, #16]
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	691b      	ldr	r3, [r3, #16]
20000dc6:	429a      	cmp	r2, r3
20000dc8:	db06      	blt.n	20000dd8 <pixel_overlap+0x9e>
20000dca:	683b      	ldr	r3, [r7, #0]
20000dcc:	691b      	ldr	r3, [r3, #16]
20000dce:	693a      	ldr	r2, [r7, #16]
20000dd0:	429a      	cmp	r2, r3
20000dd2:	db01      	blt.n	20000dd8 <pixel_overlap+0x9e>
		return 1;
20000dd4:	2301      	movs	r3, #1
20000dd6:	e000      	b.n	20000dda <pixel_overlap+0xa0>
	return 0;
20000dd8:	2300      	movs	r3, #0

 }
20000dda:	0018      	movs	r0, r3
20000ddc:	46bd      	mov	sp, r7
20000dde:	b006      	add	sp, #24
20000de0:	bd80      	pop	{r7, pc}

20000de2 <objects_overlap>:

int objects_overlap(POBJECT o1, POBJECT o2)
{
20000de2:	b580      	push	{r7, lr}
20000de4:	b088      	sub	sp, #32
20000de6:	af00      	add	r7, sp, #0
20000de8:	6078      	str	r0, [r7, #4]
20000dea:	6039      	str	r1, [r7, #0]
	if (o2->posx < 1 || o2->posx > 128 || o2->posy < 1 || o2->posy > 64)
20000dec:	683b      	ldr	r3, [r7, #0]
20000dee:	68db      	ldr	r3, [r3, #12]
20000df0:	2b00      	cmp	r3, #0
20000df2:	dd0b      	ble.n	20000e0c <objects_overlap+0x2a>
20000df4:	683b      	ldr	r3, [r7, #0]
20000df6:	68db      	ldr	r3, [r3, #12]
20000df8:	2b80      	cmp	r3, #128	; 0x80
20000dfa:	dc07      	bgt.n	20000e0c <objects_overlap+0x2a>
20000dfc:	683b      	ldr	r3, [r7, #0]
20000dfe:	691b      	ldr	r3, [r3, #16]
20000e00:	2b00      	cmp	r3, #0
20000e02:	dd03      	ble.n	20000e0c <objects_overlap+0x2a>
20000e04:	683b      	ldr	r3, [r7, #0]
20000e06:	691b      	ldr	r3, [r3, #16]
20000e08:	2b40      	cmp	r3, #64	; 0x40
20000e0a:	dd04      	ble.n	20000e16 <objects_overlap+0x34>
		{
			printGameOver(0);
20000e0c:	2000      	movs	r0, #0
20000e0e:	f7ff ff2f 	bl	20000c70 <printGameOver>
			return 1;
20000e12:	2301      	movs	r3, #1
20000e14:	e061      	b.n	20000eda <objects_overlap+0xf8>
		}
	int offset1x = o1->posx;
20000e16:	687b      	ldr	r3, [r7, #4]
20000e18:	68db      	ldr	r3, [r3, #12]
20000e1a:	617b      	str	r3, [r7, #20]
	int offset1y = o1->posy;
20000e1c:	687b      	ldr	r3, [r7, #4]
20000e1e:	691b      	ldr	r3, [r3, #16]
20000e20:	613b      	str	r3, [r7, #16]
	int offset2x = o2->posx;
20000e22:	683b      	ldr	r3, [r7, #0]
20000e24:	68db      	ldr	r3, [r3, #12]
20000e26:	60fb      	str	r3, [r7, #12]
	int offset2y = o2->posy;
20000e28:	683b      	ldr	r3, [r7, #0]
20000e2a:	691b      	ldr	r3, [r3, #16]
20000e2c:	60bb      	str	r3, [r7, #8]
	if (pixel_overlap(o1, o2))
20000e2e:	683a      	ldr	r2, [r7, #0]
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	0011      	movs	r1, r2
20000e34:	0018      	movs	r0, r3
20000e36:	f7ff ff80 	bl	20000d3a <pixel_overlap>
20000e3a:	1e03      	subs	r3, r0, #0
20000e3c:	d04c      	beq.n	20000ed8 <objects_overlap+0xf6>
	for (int i = 0; i < o1->geo->numpoints; i++) {
20000e3e:	2300      	movs	r3, #0
20000e40:	61fb      	str	r3, [r7, #28]
20000e42:	e043      	b.n	20000ecc <objects_overlap+0xea>
		for (int j = 0; j < o2-> geo->numpoints; j++)
20000e44:	2300      	movs	r3, #0
20000e46:	61bb      	str	r3, [r7, #24]
20000e48:	e037      	b.n	20000eba <objects_overlap+0xd8>
		if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
20000e4a:	687b      	ldr	r3, [r7, #4]
20000e4c:	681a      	ldr	r2, [r3, #0]
20000e4e:	69fb      	ldr	r3, [r7, #28]
20000e50:	3304      	adds	r3, #4
20000e52:	005b      	lsls	r3, r3, #1
20000e54:	18d3      	adds	r3, r2, r3
20000e56:	3304      	adds	r3, #4
20000e58:	781b      	ldrb	r3, [r3, #0]
20000e5a:	001a      	movs	r2, r3
20000e5c:	697b      	ldr	r3, [r7, #20]
20000e5e:	18d2      	adds	r2, r2, r3
20000e60:	683b      	ldr	r3, [r7, #0]
20000e62:	6819      	ldr	r1, [r3, #0]
20000e64:	69bb      	ldr	r3, [r7, #24]
20000e66:	3304      	adds	r3, #4
20000e68:	005b      	lsls	r3, r3, #1
20000e6a:	18cb      	adds	r3, r1, r3
20000e6c:	3304      	adds	r3, #4
20000e6e:	781b      	ldrb	r3, [r3, #0]
20000e70:	0019      	movs	r1, r3
20000e72:	68fb      	ldr	r3, [r7, #12]
20000e74:	18cb      	adds	r3, r1, r3
20000e76:	429a      	cmp	r2, r3
20000e78:	d11c      	bne.n	20000eb4 <objects_overlap+0xd2>
			(offset1y + o1->geo->px[i].y == offset2y + o2->geo->px[j].y)) 
20000e7a:	687b      	ldr	r3, [r7, #4]
20000e7c:	681a      	ldr	r2, [r3, #0]
20000e7e:	69fb      	ldr	r3, [r7, #28]
20000e80:	3304      	adds	r3, #4
20000e82:	005b      	lsls	r3, r3, #1
20000e84:	18d3      	adds	r3, r2, r3
20000e86:	3305      	adds	r3, #5
20000e88:	781b      	ldrb	r3, [r3, #0]
20000e8a:	001a      	movs	r2, r3
20000e8c:	693b      	ldr	r3, [r7, #16]
20000e8e:	18d2      	adds	r2, r2, r3
20000e90:	683b      	ldr	r3, [r7, #0]
20000e92:	6819      	ldr	r1, [r3, #0]
20000e94:	69bb      	ldr	r3, [r7, #24]
20000e96:	3304      	adds	r3, #4
20000e98:	005b      	lsls	r3, r3, #1
20000e9a:	18cb      	adds	r3, r1, r3
20000e9c:	3305      	adds	r3, #5
20000e9e:	781b      	ldrb	r3, [r3, #0]
20000ea0:	0019      	movs	r1, r3
20000ea2:	68bb      	ldr	r3, [r7, #8]
20000ea4:	18cb      	adds	r3, r1, r3
		if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
20000ea6:	429a      	cmp	r2, r3
20000ea8:	d104      	bne.n	20000eb4 <objects_overlap+0xd2>
		{
			printGameOver(1);
20000eaa:	2001      	movs	r0, #1
20000eac:	f7ff fee0 	bl	20000c70 <printGameOver>
			return 1;
20000eb0:	2301      	movs	r3, #1
20000eb2:	e012      	b.n	20000eda <objects_overlap+0xf8>
		for (int j = 0; j < o2-> geo->numpoints; j++)
20000eb4:	69bb      	ldr	r3, [r7, #24]
20000eb6:	3301      	adds	r3, #1
20000eb8:	61bb      	str	r3, [r7, #24]
20000eba:	683b      	ldr	r3, [r7, #0]
20000ebc:	681b      	ldr	r3, [r3, #0]
20000ebe:	681b      	ldr	r3, [r3, #0]
20000ec0:	69ba      	ldr	r2, [r7, #24]
20000ec2:	429a      	cmp	r2, r3
20000ec4:	dbc1      	blt.n	20000e4a <objects_overlap+0x68>
	for (int i = 0; i < o1->geo->numpoints; i++) {
20000ec6:	69fb      	ldr	r3, [r7, #28]
20000ec8:	3301      	adds	r3, #1
20000eca:	61fb      	str	r3, [r7, #28]
20000ecc:	687b      	ldr	r3, [r7, #4]
20000ece:	681b      	ldr	r3, [r3, #0]
20000ed0:	681b      	ldr	r3, [r3, #0]
20000ed2:	69fa      	ldr	r2, [r7, #28]
20000ed4:	429a      	cmp	r2, r3
20000ed6:	dbb5      	blt.n	20000e44 <objects_overlap+0x62>
		}
	}
	return 0;
20000ed8:	2300      	movs	r3, #0
}
20000eda:	0018      	movs	r0, r3
20000edc:	46bd      	mov	sp, r7
20000ede:	b008      	add	sp, #32
20000ee0:	bd80      	pop	{r7, pc}

20000ee2 <my_irq_handler>:

// ------------------------------------------------------- Interrupt ------------------------------------------------------------------------------- //
void my_irq_handler(void)
{
20000ee2:	b580      	push	{r7, lr}
20000ee4:	af00      	add	r7, sp, #0
	// tänd diodramp på port D 
	//*GPIO_D_MODER = 0x00005555;
	//*GPIO_D_ODR_LOW = 0xFF;
}
20000ee6:	46c0      	nop			; (mov r8, r8)
20000ee8:	46bd      	mov	sp, r7
20000eea:	bd80      	pop	{r7, pc}

20000eec <graphic_initalize>:

// ------------------------------------------------------- MD407 BUILT IN FUNCTIONS ------------------------------------------------------------------------------- //
__attribute__((naked))
void graphic_initalize(void)
{
20000eec:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
20000ef0:	46c0      	nop			; (mov r8, r8)

20000ef2 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
20000ef2:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
20000ef6:	46c0      	nop			; (mov r8, r8)

20000ef8 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(void)
{
20000ef8:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
20000efc:	46c0      	nop			; (mov r8, r8)

20000efe <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(void)
{
20000efe:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
20000f02:	46c0      	nop			; (mov r8, r8)

20000f04 <ball_geometry>:
20000f04:	0000000c 	andeq	r0, r0, ip
20000f08:	00000004 	andeq	r0, r0, r4
20000f0c:	00000004 	andeq	r0, r0, r4
20000f10:	02000100 	andeq	r0, r0, #0, 2
20000f14:	01010001 	tsteq	r1, r1
20000f18:	03010201 	movweq	r0, #4609	; 0x1201
20000f1c:	01020002 	tsteq	r2, r2
20000f20:	03020202 	movweq	r0, #8706	; 0x2202
20000f24:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000f4c <ballobject>:
20000f4c:	20000f04 	andcs	r0, r0, r4, lsl #30
	...
20000f58:	00000001 	andeq	r0, r0, r1
20000f5c:	00000001 	andeq	r0, r0, r1
20000f60:	20000a05 	andcs	r0, r0, r5, lsl #20
20000f64:	20000a95 	mulcs	r0, r5, sl
20000f68:	20000af5 	strdcs	r0, [r0], -r5
20000f6c:	20000bb1 			; <UNDEFINED> instruction: 0x20000bb1

20000f70 <paddle>:
20000f70:	0000001b 	andeq	r0, r0, fp, lsl r0
20000f74:	00000005 	andeq	r0, r0, r5
20000f78:	00000009 	andeq	r0, r0, r9
20000f7c:	00010000 	andeq	r0, r1, r0
20000f80:	00030002 	andeq	r0, r3, r2
20000f84:	01040004 	tsteq	r4, r4
20000f88:	03040204 	movweq	r0, #16900	; 0x4204
20000f8c:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
20000f90:	07040604 	streq	r0, [r4, -r4, lsl #12]
20000f94:	08030804 	stmdaeq	r3, {r2, fp}
20000f98:	08010802 	stmdaeq	r1, {r1, fp}
20000f9c:	07000800 	streq	r0, [r0, -r0, lsl #16]
20000fa0:	05000600 	streq	r0, [r0, #-1536]	; 0xfffffa00
20000fa4:	03000400 	movweq	r0, #1024	; 0x400
20000fa8:	01000200 	mrseq	r0, R8_usr
20000fac:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
20000fb0:	00000502 	andeq	r0, r0, r2, lsl #10
20000fb4:	00000000 	andeq	r0, r0, r0

20000fb8 <paddle_object>:
20000fb8:	20000f70 	andcs	r0, r0, r0, ror pc
	...
20000fc4:	00000073 	andeq	r0, r0, r3, ror r0
20000fc8:	00000019 	andeq	r0, r0, r9, lsl r0
20000fcc:	20000a05 	andcs	r0, r0, r5, lsl #20
20000fd0:	20000a95 	mulcs	r0, r5, sl
20000fd4:	20000bd1 	ldrdcs	r0, [r0], -r1
20000fd8:	20000bb1 			; <UNDEFINED> instruction: 0x20000bb1

20000fdc <spider_geo>:
20000fdc:	00000016 	andeq	r0, r0, r6, lsl r0
20000fe0:	00000008 	andeq	r0, r0, r8
20000fe4:	00000006 	andeq	r0, r0, r6
20000fe8:	00030002 	andeq	r0, r3, r2
20000fec:	01040101 	tsteq	r4, r1, lsl #2
20000ff0:	02010200 	andeq	r0, r1, #0, 4
20000ff4:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000ff8:	02050204 	andeq	r0, r5, #4, 4	; 0x40000000
20000ffc:	03020300 	movweq	r0, #8960	; 0x2300
20001000:	03050303 	movweq	r0, #21251	; 0x5303
20001004:	04040401 	streq	r0, [r4], #-1025	; 0xfffffbff
20001008:	05030502 	streq	r0, [r3, #-1282]	; 0xfffffafe
2000100c:	06040601 	streq	r0, [r4], -r1, lsl #12
20001010:	07050700 	streq	r0, [r5, -r0, lsl #14]
	...

20001024 <spider_obj>:
20001024:	20000fdc 	ldrdcs	r0, [r0], -ip
	...
20001030:	00000046 	andeq	r0, r0, r6, asr #32
20001034:	00000019 	andeq	r0, r0, r9, lsl r0
20001038:	20000a05 	andcs	r0, r0, r5, lsl #20
2000103c:	20000a95 	mulcs	r0, r5, sl
20001040:	20000cf7 	strdcs	r0, [r0], -r7
20001044:	20000bb1 			; <UNDEFINED> instruction: 0x20000bb1
20001048:	2000011c 	andcs	r0, r0, ip, lsl r1
2000104c:	2000011c 	andcs	r0, r0, ip, lsl r1
20001050:	200000fe 	strdcs	r0, [r0], -lr
20001054:	2000011c 	andcs	r0, r0, ip, lsl r1
20001058:	200000e0 	andcs	r0, r0, r0, ror #1
2000105c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20001060:	200000d2 	ldrdcs	r0, [r0], -r2
20001064:	2000011c 	andcs	r0, r0, ip, lsl r1
20001068:	2000010e 	andcs	r0, r0, lr, lsl #2
2000106c:	200002a0 	andcs	r0, r0, r0, lsr #5
20001070:	20000280 	andcs	r0, r0, r0, lsl #5
20001074:	20000288 	andcs	r0, r0, r8, lsl #5
20001078:	20000290 	mulcs	r0, r0, r2
2000107c:	20000298 	mulcs	r0, r8, r2
20001080:	0a030201 	beq	200c188c <spider_obj+0xc0868>
20001084:	0b060504 	bleq	2018249c <spider_obj+0x181478>
20001088:	0c090807 	stceq	8, cr0, [r9], {7}
2000108c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000105c <spider_obj+0x38>
20001090:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
20001094:	65764f20 	ldrbvs	r4, [r6, #-3872]!	; 0xfffff0e0
20001098:	00202172 	eoreq	r2, r0, r2, ror r1
2000109c:	20756f59 	rsbscs	r6, r5, r9, asr pc
200010a0:	216e6f57 	cmncs	lr, r7, asr pc
200010a4:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013c 	andeq	r0, r0, ip, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003e 	andeq	r0, r0, lr, lsr r0
  10:	0000360c 	andeq	r3, r0, ip, lsl #12
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00006a20 	andeq	r6, r0, r0, lsr #20
  20:	00000000 	andeq	r0, r0, r0
  24:	011a0200 	tsteq	sl, r0, lsl #4
  28:	00d60905 	sbcseq	r0, r6, r5, lsl #18
  2c:	73030000 	movwvc	r0, #12288	; 0x3000
  30:	06010072 			; <UNDEFINED> instruction: 0x06010072
  34:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  38:	2d040000 	stccs	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	00dd1a07 	sbcseq	r1, sp, r7, lsl #20
  44:	03020000 	movweq	r0, #8192	; 0x2000
  48:	01007264 	tsteq	r0, r4, ror #4
  4c:	00dd1a08 	sbcseq	r1, sp, r8, lsl #20
  50:	04040000 	streq	r0, [r4], #-0
  54:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	dd1a0901 	vldrle.16	s0, [sl, #-2]	; <UNPREDICTABLE>
  5c:	06000000 	streq	r0, [r0], -r0
  60:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
  64:	1a0a0100 	bne	28046c <startup-0x1fd7fb94>
  68:	000000dd 	ldrdeq	r0, [r0], -sp
  6c:	00b90408 	adcseq	r0, r9, r8, lsl #8
  70:	0b010000 	bleq	40078 <startup-0x1ffbff88>
  74:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  78:	63030a00 	movwvs	r0, #14848	; 0x3a00
  7c:	01003172 	tsteq	r0, r2, ror r1
  80:	00dd1a0c 	sbcseq	r1, sp, ip, lsl #20
  84:	040c0000 	streq	r0, [ip], #-0
  88:	000000c2 	andeq	r0, r0, r2, asr #1
  8c:	dd1a0d01 	ldcle	13, cr0, [sl, #-4]
  90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  94:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
  98:	1a0e0100 	bne	3804a0 <startup-0x1fc7fb60>
  9c:	000000dd 	ldrdeq	r0, [r0], -sp
  a0:	00cb0410 	sbceq	r0, fp, r0, lsl r4
  a4:	0f010000 	svceq	0x00010000
  a8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  ac:	63031200 	movwvs	r1, #12800	; 0x3200
  b0:	01003372 	tsteq	r0, r2, ror r3
  b4:	00dd1a10 	sbcseq	r1, sp, r0, lsl sl
  b8:	04140000 	ldreq	r0, [r4], #-0
  bc:	000000d4 	ldrdeq	r0, [r0], -r4
  c0:	dd1a1101 	ldfles	f1, [sl, #-4]
  c4:	16000000 	strne	r0, [r0], -r0
  c8:	0000f004 	andeq	pc, r0, r4
  cc:	1a120100 	bne	4804d4 <startup-0x1fb7fb2c>
  d0:	000000dd 	ldrdeq	r0, [r0], -sp
  d4:	02050018 	andeq	r0, r5, #24
  d8:	0000dd07 	andeq	sp, r0, r7, lsl #26
  dc:	00d60600 	sbcseq	r0, r6, r0, lsl #12
  e0:	fb070000 	blx	1c00ea <startup-0x1fe3ff16>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	00250313 	eoreq	r0, r5, r3, lsl r3
  ec:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	00500621 	subseq	r0, r0, r1, lsr #12
  f8:	002a2000 	eoreq	r2, sl, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	01007309 	tsteq	r0, r9, lsl #6
 108:	01121221 	tsteq	r2, r1, lsr #4
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	c7080105 	strgt	r0, [r8, -r5, lsl #2]
 11c:	0b000003 	bleq	130 <startup-0x1ffffed0>
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	100d1701 	andne	r1, sp, r1, lsl #14
 128:	40200000 	eormi	r0, r0, r0
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0063099c 	mlseq	r3, ip, r9, r0
 134:	181d1701 	ldmdane	sp, {r0, r8, r9, sl, ip}
 138:	02000001 	andeq	r0, r0, #1
 13c:	00007791 	muleq	r0, r1, r7
 140:	00000cec 	andeq	r0, r0, ip, ror #25
 144:	00b40004 	adcseq	r0, r4, r4
 148:	01040000 	mrseq	r0, (UNDEF: 4)
 14c:	0000003e 	andeq	r0, r0, lr, lsr r0
 150:	0002da0c 	andeq	sp, r2, ip, lsl #20
 154:	00000000 	andeq	r0, r0, r0
 158:	00007c00 	andeq	r7, r0, r0, lsl #24
 15c:	000e7020 	andeq	r7, lr, r0, lsr #32
 160:	00007600 	andeq	r7, r0, r0, lsl #12
 164:	07040200 	streq	r0, [r4, -r0, lsl #4]
 168:	0000012d 	andeq	r0, r0, sp, lsr #2
 16c:	69050403 	stmdbvs	r5, {r0, r1, sl}
 170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 174:	01760508 	cmneq	r6, r8, lsl #10
 178:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 17c:	00031404 	andeq	r1, r3, r4, lsl #8
 180:	06010200 	streq	r0, [r1], -r0, lsl #4
 184:	000003c0 	andeq	r0, r0, r0, asr #7
 188:	be080102 	adflte	f0, f0, f2
 18c:	02000003 	andeq	r0, r0, #3
 190:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
 194:	02020000 	andeq	r0, r2, #0
 198:	0000dd07 	andeq	sp, r0, r7, lsl #26
 19c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a0:	0000017b 	andeq	r0, r0, fp, ror r1
 1a4:	28070402 	stmdacs	r7, {r1, sl}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	01230708 			; <UNDEFINED> instruction: 0x01230708
 1b0:	04040000 	streq	r0, [r4], #-0
 1b4:	00000048 	andeq	r0, r0, r8, asr #32
 1b8:	007e0404 	rsbseq	r0, lr, r4, lsl #8
 1bc:	01020000 	mrseq	r0, (UNDEF: 2)
 1c0:	0003c708 	andeq	ip, r3, r8, lsl #14
 1c4:	01020500 	tsteq	r2, r0, lsl #10
 1c8:	00a5093a 	adceq	r0, r5, sl, lsr r9
 1cc:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
 1d0:	103c0100 	eorsne	r0, ip, r0, lsl #2
 1d4:	00000048 	andeq	r0, r0, r8, asr #32
 1d8:	00790600 	rsbseq	r0, r9, r0, lsl #12
 1dc:	48123c01 	ldmdami	r2, {r0, sl, fp, ip, sp}
 1e0:	01000000 	mrseq	r0, (UNDEF: 0)
 1e4:	01a50700 			; <UNDEFINED> instruction: 0x01a50700
 1e8:	3d010000 	stccc	0, cr0, [r1, #-0]
 1ec:	00008503 	andeq	r8, r0, r3, lsl #10
 1f0:	01040500 	tsteq	r4, r0, lsl #10
 1f4:	00d3093f 	sbcseq	r0, r3, pc, lsr r9
 1f8:	70060000 	andvc	r0, r6, r0
 1fc:	41010030 	tstmi	r1, r0, lsr r0
 200:	0000a508 	andeq	sl, r0, r8, lsl #10
 204:	70060000 	andvc	r0, r6, r0
 208:	41010031 	tstmi	r1, r1, lsr r0
 20c:	0000a50b 	andeq	sl, r0, fp, lsl #10
 210:	07000200 	streq	r0, [r0, -r0, lsl #4]
 214:	00000340 	andeq	r0, r0, r0, asr #6
 218:	b1034201 	tstlt	r3, r1, lsl #4
 21c:	07000000 	streq	r0, [r0, -r0]
 220:	0000033f 	andeq	r0, r0, pc, lsr r3
 224:	eb0a4201 	bl	290a30 <startup-0x1fd6f5d0>
 228:	04000000 	streq	r0, [r0], #-0
 22c:	0000b104 	andeq	fp, r0, r4, lsl #2
 230:	01040500 	tsteq	r4, r0, lsl #10
 234:	011c0944 	tsteq	ip, r4, asr #18
 238:	70060000 	andvc	r0, r6, r0
 23c:	08460100 	stmdaeq	r6, {r8}^
 240:	000000a5 	andeq	r0, r0, r5, lsr #1
 244:	00780600 	rsbseq	r0, r8, r0, lsl #12
 248:	48104701 	ldmdami	r0, {r0, r8, r9, sl, lr}
 24c:	02000000 	andeq	r0, r0, #0
 250:	01007906 	tsteq	r0, r6, lsl #18
 254:	00481247 	subeq	r1, r8, r7, asr #4
 258:	00030000 	andeq	r0, r3, r0
 25c:	0001b007 	andeq	fp, r1, r7
 260:	0a480100 	beq	1200668 <startup-0x1edff998>
 264:	00000128 	andeq	r0, r0, r8, lsr #2
 268:	00f10404 	rscseq	r0, r1, r4, lsl #8
 26c:	2a080000 	bcs	200274 <startup-0x1fdffd8c>
 270:	08000002 	stmdaeq	r0, {r1}
 274:	5f104a01 	svcpl	0x00104a01
 278:	06000001 	streq	r0, [r0], -r1
 27c:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
 280:	00007e07 	andeq	r7, r0, r7, lsl #28
 284:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
 288:	094c0100 	stmdbeq	ip, {r8}^
 28c:	0000007e 	andeq	r0, r0, lr, ror r0
 290:	01610901 	cmneq	r1, r1, lsl #18
 294:	4d010000 	stcmi	0, cr0, [r1, #-0]
 298:	00015f17 	andeq	r5, r1, r7, lsl pc
 29c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
 2a0:	00012e04 	andeq	r2, r1, r4, lsl #28
 2a4:	01a10700 			; <UNDEFINED> instruction: 0x01a10700
 2a8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 2ac:	00012e03 	andeq	r2, r1, r3, lsl #28
 2b0:	01a00700 	lsleq	r0, r0, #14
 2b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 2b8:	00015f0f 	andeq	r5, r1, pc, lsl #30
 2bc:	01480500 	cmpeq	r8, r0, lsl #10
 2c0:	01ba0950 			; <UNDEFINED> instruction: 0x01ba0950
 2c4:	d0090000 	andle	r0, r9, r0
 2c8:	01000002 	tsteq	r0, r2
 2cc:	002c0652 	eoreq	r0, ip, r2, asr r6
 2d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 2d4:	000004d9 	ldrdeq	r0, [r0], -r9
 2d8:	2c065301 	stccs	3, cr5, [r6], {1}
 2dc:	04000000 	streq	r0, [r0], #-0
 2e0:	0004df09 	andeq	sp, r4, r9, lsl #30
 2e4:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
 2e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ec:	78700608 	ldmdavc	r0!, {r3, r9, sl}^
 2f0:	08550100 	ldmdaeq	r5, {r8}^
 2f4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 2f8:	a50a000c 	strge	r0, [sl, #-12]
 2fc:	ca000000 	bgt	304 <startup-0x1ffffcfc>
 300:	0b000001 	bleq	30c <startup-0x1ffffcf4>
 304:	00000025 	andeq	r0, r0, r5, lsr #32
 308:	4607001d 			; <UNDEFINED> instruction: 0x4607001d
 30c:	01000003 	tsteq	r0, r3
 310:	017d0356 	cmneq	sp, r6, asr r3
 314:	45070000 	strmi	r0, [r7, #-0]
 318:	01000003 	tsteq	r0, r3
 31c:	01e20e56 	mvneq	r0, r6, asr lr
 320:	04040000 	streq	r0, [r4], #-0
 324:	0000017d 	andeq	r0, r0, sp, ror r1
 328:	00047908 	andeq	r7, r4, r8, lsl #18
 32c:	58012400 	stmdapl	r1, {sl, sp}
 330:	00026b10 	andeq	r6, r2, r0, lsl fp
 334:	65670600 	strbvs	r0, [r7, #-1536]!	; 0xfffffa00
 338:	5a01006f 	bpl	404fc <startup-0x1ffbfb04>
 33c:	0001d60c 	andeq	sp, r1, ip, lsl #12
 340:	21090000 	mrscs	r0, (UNDEF: 9)
 344:	01000004 	tsteq	r0, r4
 348:	002c065b 	eoreq	r0, ip, fp, asr r6
 34c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 350:	00000426 	andeq	r0, r0, r6, lsr #8
 354:	2c0c5b01 			; <UNDEFINED> instruction: 0x2c0c5b01
 358:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 35c:	0002ef09 	andeq	lr, r2, r9, lsl #30
 360:	065c0100 	ldrbeq	r0, [ip], -r0, lsl #2
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	02f4090c 	rscseq	r0, r4, #12, 18	; 0x30000
 36c:	5c010000 	stcpl	0, cr0, [r1], {-0}
 370:	00002c0c 	andeq	r2, r0, ip, lsl #24
 374:	b3091000 	movwlt	r1, #36864	; 0x9000
 378:	01000004 	tsteq	r0, r4
 37c:	027c0a5d 	rsbseq	r0, ip, #380928	; 0x5d000
 380:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
 384:	0000029e 	muleq	r0, lr, r2
 388:	7c0a5e01 	stcvc	14, cr5, [sl], {1}
 38c:	18000002 	stmdane	r0, {r1}
 390:	00017109 	andeq	r7, r1, r9, lsl #2
 394:	0a5f0100 	beq	17c079c <startup-0x1e83f864>
 398:	0000027c 	andeq	r0, r0, ip, ror r2
 39c:	013a091c 	teqeq	sl, ip, lsl r9
 3a0:	60010000 	andvs	r0, r1, r0
 3a4:	0002970a 	andeq	r9, r2, sl, lsl #14
 3a8:	0c002000 	stceq	0, cr2, [r0], {-0}
 3ac:	00000276 	andeq	r0, r0, r6, ror r2
 3b0:	0002760d 	andeq	r7, r2, sp, lsl #12
 3b4:	04040000 	streq	r0, [r4], #-0
 3b8:	000001e8 	andeq	r0, r0, r8, ror #3
 3bc:	026b0404 	rsbeq	r0, fp, #4, 8	; 0x4000000
 3c0:	970c0000 	strls	r0, [ip, -r0]
 3c4:	0d000002 	stceq	0, cr0, [r0, #-8]
 3c8:	00000276 	andeq	r0, r0, r6, ror r2
 3cc:	00002c0d 	andeq	r2, r0, sp, lsl #24
 3d0:	002c0d00 	eoreq	r0, ip, r0, lsl #26
 3d4:	04000000 	streq	r0, [r0], #-0
 3d8:	00028204 	andeq	r8, r2, r4, lsl #4
 3dc:	03270700 			; <UNDEFINED> instruction: 0x03270700
 3e0:	61010000 	mrsvs	r0, (UNDEF: 1)
 3e4:	0001e803 	andeq	lr, r1, r3, lsl #16
 3e8:	03260700 			; <UNDEFINED> instruction: 0x03260700
 3ec:	61010000 	mrsvs	r0, (UNDEF: 1)
 3f0:	0002760c 	andeq	r7, r2, ip, lsl #12
 3f4:	04040e00 	streq	r0, [r4], #-3584	; 0xfffff200
 3f8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 3fc:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 400:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
 404:	0f20000f 	svceq	0x0020000f
 408:	00000156 	andeq	r0, r0, r6, asr r1
 40c:	9d0f8101 	stflsd	f0, [pc, #-4]	; 410 <startup-0x1ffffbf0>
 410:	05000002 	streq	r0, [r0, #-2]
 414:	000f4c03 	andeq	r4, pc, r3, lsl #24
 418:	03330e20 	teqeq	r3, #32, 28	; 0x200
 41c:	8d010000 	stchi	0, cr0, [r1, #-0]
 420:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 424:	70030500 	andvc	r0, r3, r0, lsl #10
 428:	0f20000f 	svceq	0x0020000f
 42c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 430:	9d0f9601 	stcls	6, cr9, [pc, #-4]	; 434 <startup-0x1ffffbcc>
 434:	05000002 	streq	r0, [r0, #-2]
 438:	000fb803 	andeq	fp, pc, r3, lsl #16
 43c:	050e0e20 	streq	r0, [lr, #-3616]	; 0xfffff1e0
 440:	a1010000 	mrsge	r0, (UNDEF: 1)
 444:	0001ca0a 	andeq	ip, r1, sl, lsl #20
 448:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
 44c:	0e20000f 	cdpeq	0, 2, cr0, cr0, cr15, {0}
 450:	0000024d 	andeq	r0, r0, sp, asr #4
 454:	9d08a901 	vstrls.16	s20, [r8, #-2]	; <UNPREDICTABLE>
 458:	05000002 	streq	r0, [r0, #-2]
 45c:	00102403 	andseq	r2, r0, r3, lsl #8
 460:	020f1020 	andeq	r1, pc, #32
 464:	ac010000 	stcge	0, cr0, [r1], {-0}
 468:	0ee20602 	cdpeq	6, 14, cr0, cr2, cr2, {0}
 46c:	000a2000 	andeq	r2, sl, r0
 470:	9c010000 	stcls	0, cr0, [r1], {-0}
 474:	00019011 	andeq	r9, r1, r1, lsl r0
 478:	02930100 	addseq	r0, r3, #0, 2
 47c:	00002c05 	andeq	r2, r0, r5, lsl #24
 480:	000de200 	andeq	lr, sp, r0, lsl #4
 484:	00010020 	andeq	r0, r1, r0, lsr #32
 488:	de9c0100 	fmllee	f0, f4, f0
 48c:	12000003 	andne	r0, r0, #3
 490:	0100316f 	tsteq	r0, pc, ror #2
 494:	a91d0293 	ldmdbge	sp, {r0, r1, r4, r7, r9}
 498:	02000002 	andeq	r0, r0, #2
 49c:	6f125c91 	svcvs	0x00125c91
 4a0:	93010032 	movwls	r0, #4146	; 0x1032
 4a4:	02a92902 	adceq	r2, r9, #32768	; 0x8000
 4a8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ac:	02581358 	subseq	r1, r8, #88, 6	; 0x60000001
 4b0:	9a010000 	bls	404b8 <startup-0x1ffbfb48>
 4b4:	002c0602 	eoreq	r0, ip, r2, lsl #12
 4b8:	91020000 	mrsls	r0, (UNDEF: 2)
 4bc:	0418136c 	ldreq	r1, [r8], #-876	; 0xfffffc94
 4c0:	9b010000 	blls	404c8 <startup-0x1ffbfb38>
 4c4:	002c0602 	eoreq	r0, ip, r2, lsl #12
 4c8:	91020000 	mrsls	r0, (UNDEF: 2)
 4cc:	04a11368 	strteq	r1, [r1], #872	; 0x368
 4d0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4d4:	002c0602 	eoreq	r0, ip, r2, lsl #12
 4d8:	91020000 	mrsls	r0, (UNDEF: 2)
 4dc:	04aa1364 	strteq	r1, [sl], #868	; 0x364
 4e0:	9d010000 	stcls	0, cr0, [r1, #-0]
 4e4:	002c0602 	eoreq	r0, ip, r2, lsl #12
 4e8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ec:	0e3e1460 	cfnegdeq	mvd1, mvd14
 4f0:	009a2000 	addseq	r2, sl, r0
 4f4:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 4f8:	029f0100 	addseq	r0, pc, #0, 2
 4fc:	00002c0b 	andeq	r2, r0, fp, lsl #24
 500:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 504:	000e4414 	andeq	r4, lr, r4, lsl r4
 508:	00008220 	andeq	r8, r0, r0, lsr #4
 50c:	006a1500 	rsbeq	r1, sl, r0, lsl #10
 510:	0c02a001 	stceq	0, cr10, [r2], {1}
 514:	0000002c 	andeq	r0, r0, ip, lsr #32
 518:	00709102 	rsbseq	r9, r0, r2, lsl #2
 51c:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
 520:	01000001 	tsteq	r0, r1
 524:	2c060287 	sfmcs	f0, 4, [r6], {135}	; 0x87
 528:	3a000000 	bcc	530 <startup-0x1ffffad0>
 52c:	a820000d 	stmdage	r0!, {r0, r2, r3}
 530:	01000000 	mrseq	r0, (UNDEF: 0)
 534:	0004549c 	muleq	r4, ip, r4
 538:	316f1200 	cmncc	pc, r0, lsl #4
 53c:	02870100 	addeq	r0, r7, #0, 2
 540:	0002a91c 	andeq	sl, r2, ip, lsl r9
 544:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 548:	00326f12 	eorseq	r6, r2, r2, lsl pc
 54c:	28028701 	stmdacs	r2, {r0, r8, r9, sl, pc}
 550:	000002a9 	andeq	r0, r0, r9, lsr #5
 554:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
 558:	01003178 	tsteq	r0, r8, ror r1
 55c:	2c060289 	sfmcs	f0, 4, [r6], {137}	; 0x89
 560:	02000000 	andeq	r0, r0, #0
 564:	79157491 	ldmdbvc	r5, {r0, r4, r7, sl, ip, sp, lr}
 568:	8a010031 	bhi	40634 <startup-0x1ffbf9cc>
 56c:	002c0602 	eoreq	r0, ip, r2, lsl #12
 570:	91020000 	mrsls	r0, (UNDEF: 2)
 574:	32781570 	rsbscc	r1, r8, #112, 10	; 0x1c000000
 578:	028b0100 	addeq	r0, fp, #0, 2
 57c:	00002c06 	andeq	r2, r0, r6, lsl #24
 580:	6c910200 	lfmvs	f0, 4, [r1], {0}
 584:	00327915 	eorseq	r7, r2, r5, lsl r9
 588:	06028c01 	streq	r8, [r2], -r1, lsl #24
 58c:	0000002c 	andeq	r0, r0, ip, lsr #32
 590:	00689102 	rsbeq	r9, r8, r2, lsl #2
 594:	0003d617 	andeq	sp, r3, r7, lsl r6
 598:	027b0100 	rsbseq	r0, fp, #0, 2
 59c:	000cf606 	andeq	pc, ip, r6, lsl #12
 5a0:	00004420 	andeq	r4, r0, r0, lsr #8
 5a4:	9a9c0100 	bls	fe7009ac <spider_obj+0xde6ff988>
 5a8:	12000004 	andne	r0, r0, #4
 5ac:	7b010073 	blvc	40780 <startup-0x1ffbf880>
 5b0:	02a91a02 	adceq	r1, r9, #8192	; 0x2000
 5b4:	91020000 	mrsls	r0, (UNDEF: 2)
 5b8:	010c136c 	tsteq	ip, ip, ror #6
 5bc:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
 5c0:	002c0602 	eoreq	r0, ip, r2, lsl #12
 5c4:	91020000 	mrsls	r0, (UNDEF: 2)
 5c8:	01111374 	tsteq	r1, r4, ror r3
 5cc:	7f010000 	svcvc	0x00010000
 5d0:	002c0602 	eoreq	r0, ip, r2, lsl #12
 5d4:	91020000 	mrsls	r0, (UNDEF: 2)
 5d8:	37160070 			; <UNDEFINED> instruction: 0x37160070
 5dc:	01000002 	tsteq	r0, r2
 5e0:	2c050272 	sfmcs	f0, 4, [r5], {114}	; 0x72
 5e4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
 5e8:	1e20000c 	cdpne	0, 2, cr0, cr0, cr12, {0}
 5ec:	01000000 	mrseq	r0, (UNDEF: 0)
 5f0:	0004c49c 	muleq	r4, ip, r4
 5f4:	00621200 	rsbeq	r1, r2, r0, lsl #4
 5f8:	16027201 	strne	r7, [r2], -r1, lsl #4
 5fc:	000002a9 	andeq	r0, r0, r9, lsr #5
 600:	00749102 	rsbseq	r9, r4, r2, lsl #2
 604:	00027117 	andeq	r7, r2, r7, lsl r1
 608:	02600100 	rsbeq	r0, r0, #0, 2
 60c:	000c7006 	andeq	r7, ip, r6
 610:	00006820 	andeq	r6, r0, r0, lsr #16
 614:	1a9c0100 	bne	fe700a1c <spider_obj+0xde6ff9f8>
 618:	18000005 	stmdane	r0, {r0, r2}
 61c:	00000507 	andeq	r0, r0, r7, lsl #10
 620:	18026001 	stmdane	r2, {r0, sp, lr}
 624:	0000002c 	andeq	r0, r0, ip, lsr #32
 628:	154c9102 	strbne	r9, [ip, #-258]	; 0xfffffefe
 62c:	62010073 	andvs	r0, r1, #115	; 0x73
 630:	00780802 	rsbseq	r0, r8, r2, lsl #16
 634:	91020000 	mrsls	r0, (UNDEF: 2)
 638:	048f136c 	streq	r1, [pc], #876	; 640 <startup-0x1ffff9c0>
 63c:	63010000 	movwvs	r0, #4096	; 0x1000
 640:	051a0702 	ldreq	r0, [sl, #-1794]	; 0xfffff8fe
 644:	91020000 	mrsls	r0, (UNDEF: 2)
 648:	014b1360 	cmpeq	fp, r0, ror #6
 64c:	64010000 	strvs	r0, [r1], #-0
 650:	052a0702 	streq	r0, [sl, #-1794]!	; 0xfffff8fe
 654:	91020000 	mrsls	r0, (UNDEF: 2)
 658:	7e0a0054 	mcrvc	0, 0, r0, cr10, cr4, {2}
 65c:	2a000000 	bcs	664 <startup-0x1ffff99c>
 660:	0b000005 	bleq	67c <startup-0x1ffff984>
 664:	00000025 	andeq	r0, r0, r5, lsr #32
 668:	7e0a000b 	cdpvc	0, 0, cr0, cr10, cr11, {0}
 66c:	3a000000 	bcc	674 <startup-0x1ffff98c>
 670:	0b000005 	bleq	68c <startup-0x1ffff974>
 674:	00000025 	andeq	r0, r0, r5, lsr #32
 678:	b7170008 	ldrlt	r0, [r7, -r8]
 67c:	01000003 	tsteq	r0, r3
 680:	0e060253 	mcreq	2, 0, r0, cr6, cr3, {2}
 684:	6220000c 	eorvs	r0, r0, #12
 688:	01000000 	mrseq	r0, (UNDEF: 0)
 68c:	0005c29c 	muleq	r5, ip, r2
 690:	03331800 	teqeq	r3, #0, 16
 694:	53010000 	movwpl	r0, #4096	; 0x1000
 698:	02a91502 	adceq	r1, r9, #8388608	; 0x800000
 69c:	91020000 	mrsls	r0, (UNDEF: 2)
 6a0:	03601854 	cmneq	r0, #84, 16	; 0x540000
 6a4:	53010000 	movwpl	r0, #4096	; 0x1000
 6a8:	02a92502 	adceq	r2, r9, #8388608	; 0x800000
 6ac:	91020000 	mrsls	r0, (UNDEF: 2)
 6b0:	04121350 	ldreq	r1, [r2], #-848	; 0xfffffcb0
 6b4:	55010000 	strpl	r0, [r1, #-0]
 6b8:	002c0602 	eoreq	r0, ip, r2, lsl #12
 6bc:	91020000 	mrsls	r0, (UNDEF: 2)
 6c0:	0240136c 	subeq	r1, r0, #108, 6	; 0xb0000001
 6c4:	56010000 	strpl	r0, [r1], -r0
 6c8:	002c0602 	eoreq	r0, ip, r2, lsl #12
 6cc:	91020000 	mrsls	r0, (UNDEF: 2)
 6d0:	02611368 	rsbeq	r1, r1, #104, 6	; 0xa0000001
 6d4:	57010000 	strpl	r0, [r1, -r0]
 6d8:	002c0602 	eoreq	r0, ip, r2, lsl #12
 6dc:	91020000 	mrsls	r0, (UNDEF: 2)
 6e0:	02691364 	rsbeq	r1, r9, #100, 6	; 0x90000001
 6e4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 6e8:	002c0602 	eoreq	r0, ip, r2, lsl #12
 6ec:	91020000 	mrsls	r0, (UNDEF: 2)
 6f0:	69641560 	stmdbvs	r4!, {r5, r6, r8, sl, ip}^
 6f4:	59010072 	stmdbpl	r1, {r1, r4, r5, r6}
 6f8:	002c0602 	eoreq	r0, ip, r2, lsl #12
 6fc:	91020000 	mrsls	r0, (UNDEF: 2)
 700:	2e17005c 	mrccs	0, 0, r0, cr7, cr12, {2}
 704:	01000003 	tsteq	r0, r3
 708:	d006024a 	andle	r0, r6, sl, asr #4
 70c:	3e20000b 	cdpcc	0, 2, cr0, cr0, cr11, {0}
 710:	01000000 	mrseq	r0, (UNDEF: 0)
 714:	0005f89c 	muleq	r5, ip, r8
 718:	00701200 	rsbseq	r1, r0, r0, lsl #4
 71c:	1a024a01 	bne	92f28 <startup-0x1ff6d0d8>
 720:	000002a9 	andeq	r0, r0, r9, lsr #5
 724:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 728:	00000111 	andeq	r0, r0, r1, lsl r1
 72c:	06024d01 	streq	r4, [r2], -r1, lsl #26
 730:	0000002c 	andeq	r0, r0, ip, lsr #32
 734:	00749102 	rsbseq	r9, r4, r2, lsl #2
 738:	00036519 	andeq	r6, r3, r9, lsl r5
 73c:	02440100 	subeq	r0, r4, #0, 2
 740:	000bb006 	andeq	fp, fp, r6
 744:	00002020 	andeq	r2, r0, r0, lsr #32
 748:	3e9c0100 	fmlcce	f0, f4, f0
 74c:	12000006 	andne	r0, r0, #6
 750:	4401006f 	strmi	r0, [r1], #-111	; 0xffffff91
 754:	02a92302 	adceq	r2, r9, #134217728	; 0x8000000
 758:	91020000 	mrsls	r0, (UNDEF: 2)
 75c:	02a41874 	adceq	r1, r4, #116, 16	; 0x740000
 760:	44010000 	strmi	r0, [r1], #-0
 764:	002c2a02 	eoreq	r2, ip, r2, lsl #20
 768:	91020000 	mrsls	r0, (UNDEF: 2)
 76c:	02ab1870 	adceq	r1, fp, #112, 16	; 0x700000
 770:	44010000 	strmi	r0, [r1], #-0
 774:	002c3602 	eoreq	r3, ip, r2, lsl #12
 778:	91020000 	mrsls	r0, (UNDEF: 2)
 77c:	5117006c 	tstpl	r7, ip, rrx
 780:	01000001 	tsteq	r0, r1
 784:	f4060224 	vst1.8	{d0-d3}, [r6 :128], r4
 788:	bc20000a 	stclt	0, cr0, [r0], #-40	; 0xffffffd8
 78c:	01000000 	mrseq	r0, (UNDEF: 0)
 790:	0006849c 	muleq	r6, ip, r4
 794:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 798:	1e022401 	cdpne	4, 0, cr2, cr2, cr1, {0}
 79c:	000002a9 	andeq	r0, r0, r9, lsr #5
 7a0:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 7a4:	0000010c 	andeq	r0, r0, ip, lsl #2
 7a8:	06022701 	streq	r2, [r2], -r1, lsl #14
 7ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 7b0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 7b4:	00000111 	andeq	r0, r0, r1, lsl r1
 7b8:	06022801 	streq	r2, [r2], -r1, lsl #16
 7bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 7c0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 7c4:	00034f17 	andeq	r4, r3, r7, lsl pc
 7c8:	021a0100 	andseq	r0, sl, #0, 2
 7cc:	000a9406 	andeq	r9, sl, r6, lsl #8
 7d0:	00006020 	andeq	r6, r0, r0, lsr #32
 7d4:	eb9c0100 	bl	fe700bdc <spider_obj+0xde6ffbb8>
 7d8:	12000006 	andne	r0, r0, #6
 7dc:	1a01006f 	bne	409a0 <startup-0x1ffbf660>
 7e0:	02a91f02 	adceq	r1, r9, #2, 30
 7e4:	91020000 	mrsls	r0, (UNDEF: 2)
 7e8:	0246136c 	subeq	r1, r6, #108, 6	; 0xb0000001
 7ec:	1c010000 	stcne	0, cr0, [r1], {-0}
 7f0:	002c0602 	eoreq	r0, ip, r2, lsl #12
 7f4:	91020000 	mrsls	r0, (UNDEF: 2)
 7f8:	0aa41470 	beq	fe9059c0 <spider_obj+0xde90499c>
 7fc:	00462000 	subeq	r2, r6, r0
 800:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 804:	021d0100 	andseq	r0, sp, #0, 2
 808:	00002c0b 	andeq	r2, r0, fp, lsl #24
 80c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 810:	000aaa14 	andeq	sl, sl, r4, lsl sl
 814:	00003220 	andeq	r3, r0, r0, lsr #4
 818:	02901a00 	addseq	r1, r0, #0, 20
 81c:	1f010000 	svcne	0x00010000
 820:	002c0302 	eoreq	r0, ip, r2, lsl #6
 824:	001b0000 	andseq	r0, fp, r0
 828:	17000000 	strne	r0, [r0, -r0]
 82c:	0000042b 	andeq	r0, r0, fp, lsr #8
 830:	06020c01 	streq	r0, [r2], -r1, lsl #24
 834:	20000a04 	andcs	r0, r0, r4, lsl #20
 838:	00000090 	muleq	r0, r0, r0
 83c:	07729c01 	ldrbeq	r9, [r2, -r1, lsl #24]!
 840:	6f120000 	svcvs	0x00120000
 844:	020c0100 	andeq	r0, ip, #0, 2
 848:	0002a91e 	andeq	sl, r2, lr, lsl r9
 84c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 850:	00024613 	andeq	r4, r2, r3, lsl r6
 854:	020e0100 	andeq	r0, lr, #0, 2
 858:	00002c06 	andeq	r2, r0, r6, lsl #24
 85c:	70910200 	addsvc	r0, r1, r0, lsl #4
 860:	000a1414 	andeq	r1, sl, r4, lsl r4
 864:	00007620 	andeq	r7, r0, r0, lsr #12
 868:	00691500 	rsbeq	r1, r9, r0, lsl #10
 86c:	0b021001 	bleq	84878 <startup-0x1ff7b788>
 870:	0000002c 	andeq	r0, r0, ip, lsr #32
 874:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 878:	20000a1a 	andcs	r0, r0, sl, lsl sl
 87c:	00000062 	andeq	r0, r0, r2, rrx
 880:	00020313 	andeq	r0, r2, r3, lsl r3
 884:	02130100 	andseq	r0, r3, #0, 2
 888:	00002c07 	andeq	r2, r0, r7, lsl #24
 88c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 890:	00020913 	andeq	r0, r2, r3, lsl r9
 894:	02140100 	andseq	r0, r4, #0, 2
 898:	00002c07 	andeq	r2, r0, r7, lsl #24
 89c:	68910200 	ldmvs	r1, {r9}
 8a0:	0002f91a 	andeq	pc, r2, sl, lsl r9	; <UNPREDICTABLE>
 8a4:	01de0100 	bicseq	r0, lr, r0, lsl #2
 8a8:	00002c04 	andeq	r2, r0, r4, lsl #24
 8ac:	00001b00 	andeq	r1, r0, r0, lsl #22
 8b0:	16170000 	ldrne	r0, [r7], -r0
 8b4:	01000001 	tsteq	r0, r1
 8b8:	7c0601f9 	stfvcs	f0, [r6], {249}	; 0xf9
 8bc:	88200009 	stmdahi	r0!, {r0, r3}
 8c0:	01000000 	mrseq	r0, (UNDEF: 0)
 8c4:	0007e29c 	muleq	r7, ip, r2
 8c8:	011b1800 	tsteq	fp, r0, lsl #16
 8cc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 8d0:	01711e01 	cmneq	r1, r1, lsl #28
 8d4:	91020000 	mrsls	r0, (UNDEF: 2)
 8d8:	30701554 	rsbscc	r1, r0, r4, asr r5
 8dc:	01fb0100 	mvnseq	r0, r0, lsl #2
 8e0:	0001650c 	andeq	r6, r1, ip, lsl #10
 8e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 8e8:	72747015 	rsbsvc	r7, r4, #21
 8ec:	01fe0100 	mvnseq	r0, r0, lsl #2
 8f0:	0001710d 	andeq	r7, r1, sp, lsl #2
 8f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8f8:	00099e14 	andeq	r9, r9, r4, lsl lr
 8fc:	00005620 	andeq	r5, r0, r0, lsr #12
 900:	31701500 	cmncc	r0, r0, lsl #10
 904:	02010100 	andeq	r0, r1, #0, 2
 908:	0001650d 	andeq	r6, r1, sp, lsl #10
 90c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 910:	00027f13 	andeq	r7, r2, r3, lsl pc
 914:	02040100 	andeq	r0, r4, #0, 2
 918:	0000d308 	andeq	sp, r0, r8, lsl #6
 91c:	58910200 	ldmpl	r1, {r9}
 920:	5a170000 	bpl	5c0928 <startup-0x1fa3f6d8>
 924:	01000004 	tsteq	r0, r4
 928:	320601ed 	andcc	r0, r6, #1073741883	; 0x4000003b
 92c:	4a200008 	bmi	800954 <startup-0x1f7ff6ac>
 930:	01000001 	tsteq	r0, r1
 934:	0008389c 	muleq	r8, ip, r8
 938:	00721200 	rsbseq	r1, r2, r0, lsl #4
 93c:	1b01ed01 	blne	7bd48 <startup-0x1ff842b8>
 940:	0000011c 	andeq	r0, r0, ip, lsl r1
 944:	13549102 	cmpne	r4, #-2147483648	; 0x80000000
 948:	000004e5 	andeq	r0, r0, r5, ror #9
 94c:	0801ef01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp, lr, pc}
 950:	000000a5 	andeq	r0, r0, r5, lsr #1
 954:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
 958:	00646e65 	rsbeq	r6, r4, r5, ror #28
 95c:	0801f001 	stmdaeq	r1, {r0, ip, sp, lr, pc}
 960:	000000a5 	andeq	r0, r0, r5, lsr #1
 964:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
 968:	0000027f 	andeq	r0, r0, pc, ror r2
 96c:	0701f101 	streq	pc, [r1, -r1, lsl #2]
 970:	000000d3 	ldrdeq	r0, [r0], -r3
 974:	005c9102 	subseq	r9, ip, r2, lsl #2
 978:	00043b11 	andeq	r3, r4, r1, lsl fp
 97c:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
 980:	00002c05 	andeq	r2, r0, r5, lsl #24
 984:	00063c00 	andeq	r3, r6, r0, lsl #24
 988:	0001f620 	andeq	pc, r1, r0, lsr #12
 98c:	0e9c0100 	fmleqe	f0, f4, f0
 990:	12000009 	andne	r0, r0, #9
 994:	bc01006c 	stclt	0, cr0, [r1], {108}	; 0x6c
 998:	00df1501 	sbcseq	r1, pc, r1, lsl #10
 99c:	91020000 	mrsls	r0, (UNDEF: 2)
 9a0:	0320135c 			; <UNDEFINED> instruction: 0x0320135c
 9a4:	c3010000 	movwgt	r0, #4096	; 0x1000
 9a8:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 9ac:	91020000 	mrsls	r0, (UNDEF: 2)
 9b0:	03fd136f 	mvnseq	r1, #-1140850687	; 0xbc000001
 9b4:	d2010000 	andle	r0, r1, #0
 9b8:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 9bc:	91020000 	mrsls	r0, (UNDEF: 2)
 9c0:	02231367 	eoreq	r1, r3, #-1677721599	; 0x9c000001
 9c4:	d3010000 	movwle	r0, #4096	; 0x1000
 9c8:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 9cc:	91020000 	mrsls	r0, (UNDEF: 2)
 9d0:	03a11366 			; <UNDEFINED> instruction: 0x03a11366
 9d4:	d4010000 	strle	r0, [r1], #-0
 9d8:	007e0701 	rsbseq	r0, lr, r1, lsl #14
 9dc:	91020000 	mrsls	r0, (UNDEF: 2)
 9e0:	0079156e 	rsbseq	r1, r9, lr, ror #10
 9e4:	0701d501 	streq	sp, [r1, -r1, lsl #10]
 9e8:	0000007e 	andeq	r0, r0, lr, ror r0
 9ec:	136d9102 	cmnne	sp, #-2147483648	; 0x80000000
 9f0:	000003f7 	strdeq	r0, [r0], -r7
 9f4:	0701d601 	streq	sp, [r1, -r1, lsl #12]
 9f8:	0000007e 	andeq	r0, r0, lr, ror r0
 9fc:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
 a00:	200007a0 	andcs	r0, r0, r0, lsr #15
 a04:	00000088 	andeq	r0, r0, r8, lsl #1
 a08:	01007815 	tsteq	r0, r5, lsl r8
 a0c:	2c0b01db 	stfcss	f0, [fp], {219}	; 0xdb
 a10:	02000000 	andeq	r0, r0, #0
 a14:	b21c6891 	andslt	r6, ip, #9502720	; 0x910000
 a18:	10200007 	eorne	r0, r0, r7
 a1c:	f3000000 	vhadd.u8	d0, d0, d0
 a20:	1a000008 	bne	a48 <startup-0x1ffff5b8>
 a24:	000002f9 	strdeq	r0, [r0], -r9
 a28:	0401de01 	streq	sp, [r1], #-3585	; 0xfffff1ff
 a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
 a30:	1400001b 	strne	r0, [r0], #-27	; 0xffffffe5
 a34:	200007c4 	andcs	r0, r0, r4, asr #15
 a38:	00000010 	andeq	r0, r0, r0, lsl r0
 a3c:	0002f91a 	andeq	pc, r2, sl, lsl r9	; <UNPREDICTABLE>
 a40:	01de0100 	bicseq	r0, lr, r0, lsl #2
 a44:	00002c04 	andeq	r2, r0, r4, lsl #24
 a48:	00001b00 	andeq	r1, r0, r0, lsl #22
 a4c:	8a190000 	bhi	640a54 <startup-0x1f9bf5ac>
 a50:	01000003 	tsteq	r0, r3
 a54:	100601b5 			; <UNDEFINED> instruction: 0x100601b5
 a58:	2c200006 	stccs	0, cr0, [r0], #-24	; 0xffffffe8
 a5c:	01000000 	mrseq	r0, (UNDEF: 0)
 a60:	0009529c 	muleq	r9, ip, r2
 a64:	00611200 	rsbeq	r1, r1, r0, lsl #4
 a68:	1a01b501 	bne	6de74 <startup-0x1ff9218c>
 a6c:	00000072 	andeq	r0, r0, r2, ror r0
 a70:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 a74:	b5010062 	strlt	r0, [r1, #-98]	; 0xffffff9e
 a78:	00722c01 	rsbseq	r2, r2, r1, lsl #24
 a7c:	91020000 	mrsls	r0, (UNDEF: 2)
 a80:	01ab1368 			; <UNDEFINED> instruction: 0x01ab1368
 a84:	b7010000 	strlt	r0, [r1, -r0]
 a88:	00481001 	subeq	r1, r8, r1
 a8c:	91020000 	mrsls	r0, (UNDEF: 2)
 a90:	e8170077 	ldmda	r7, {r0, r1, r2, r4, r5, r6}
 a94:	01000001 	tsteq	r0, r1
 a98:	ce0601aa 	adfgtdp	f0, f6, #2.0
 a9c:	42200005 	eormi	r0, r0, #5
 aa0:	01000000 	mrseq	r0, (UNDEF: 0)
 aa4:	0009969c 	muleq	r9, ip, r6
 aa8:	00781200 	rsbseq	r1, r8, r0, lsl #4
 aac:	1701aa01 	strne	sl, [r1, -r1, lsl #20]
 ab0:	0000002c 	andeq	r0, r0, ip, lsr #32
 ab4:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 ab8:	aa010079 	bge	40ca4 <startup-0x1ffbf35c>
 abc:	002c1e01 	eoreq	r1, ip, r1, lsl #28
 ac0:	91020000 	mrsls	r0, (UNDEF: 2)
 ac4:	01441368 	cmpeq	r4, r8, ror #6
 ac8:	ac010000 	stcge	0, cr0, [r1], {-0}
 acc:	00481001 	subeq	r1, r8, r1
 ad0:	91020000 	mrsls	r0, (UNDEF: 2)
 ad4:	b6170077 			; <UNDEFINED> instruction: 0xb6170077
 ad8:	01000001 	tsteq	r0, r1
 adc:	920601a1 	andls	r0, r6, #1073741864	; 0x40000028
 ae0:	3c200005 	stccc	0, cr0, [r0], #-20	; 0xffffffec
 ae4:	01000000 	mrseq	r0, (UNDEF: 0)
 ae8:	0009bc9c 	muleq	r9, ip, ip
 aec:	00631200 	rsbeq	r1, r3, r0, lsl #4
 af0:	2501a101 	strcs	sl, [r1, #-257]	; 0xfffffeff
 af4:	00000048 	andeq	r0, r0, r8, asr #32
 af8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 afc:	0001dd1d 	andeq	sp, r1, sp, lsl sp
 b00:	01990100 	orrseq	r0, r9, r0, lsl #2
 b04:	00057006 	andeq	r7, r5, r6
 b08:	00002220 	andeq	r2, r0, r0, lsr #4
 b0c:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
 b10:	000002e1 	andeq	r0, r0, r1, ror #5
 b14:	06019001 	streq	r9, [r1], -r1
 b18:	20000534 	andcs	r0, r0, r4, lsr r5
 b1c:	0000003c 	andeq	r0, r0, ip, lsr r0
 b20:	09f79c01 	ldmibeq	r7!, {r0, sl, fp, ip, pc}^
 b24:	e7180000 	ldr	r0, [r8, -r0]
 b28:	01000002 	tsteq	r0, r2
 b2c:	48220190 	stmdami	r2!, {r4, r7, r8}
 b30:	02000000 	andeq	r0, r0, #0
 b34:	11007791 			; <UNDEFINED> instruction: 0x11007791
 b38:	0000037a 	andeq	r0, r0, sl, ror r3
 b3c:	0f018601 	svceq	0x00018601
 b40:	00000048 	andeq	r0, r0, r8, asr #32
 b44:	200004f4 	strdcs	r0, [r0], -r4
 b48:	00000040 	andeq	r0, r0, r0, asr #32
 b4c:	0a229c01 	beq	8a7b58 <startup-0x1f7584a8>
 b50:	72150000 	andsvc	r0, r5, #0
 b54:	8b010076 	blhi	40d34 <startup-0x1ffbf2cc>
 b58:	00481001 	subeq	r1, r8, r1
 b5c:	91020000 	mrsls	r0, (UNDEF: 2)
 b60:	8f11006f 	svchi	0x0011006f
 b64:	01000003 	tsteq	r0, r3
 b68:	480f017c 	stmdami	pc, {r2, r3, r4, r5, r6, r8}	; <UNPREDICTABLE>
 b6c:	b4000000 	strlt	r0, [r0], #-0
 b70:	40200004 	eormi	r0, r0, r4
 b74:	01000000 	mrseq	r0, (UNDEF: 0)
 b78:	000a4d9c 	muleq	sl, ip, sp
 b7c:	76721500 	ldrbtvc	r1, [r2], -r0, lsl #10
 b80:	01810100 	orreq	r0, r1, r0, lsl #2
 b84:	00004810 	andeq	r4, r0, r0, lsl r8
 b88:	6f910200 	svcvs	0x00910200
 b8c:	01c71100 	biceq	r1, r7, r0, lsl #2
 b90:	72010000 	andvc	r0, r1, #0
 b94:	00480f01 	subeq	r0, r8, r1, lsl #30
 b98:	04800000 	streq	r0, [r0], #0
 b9c:	00342000 	eorseq	r2, r4, r0
 ba0:	9c010000 	stcls	0, cr0, [r1], {-0}
 ba4:	00000a78 	andeq	r0, r0, r8, ror sl
 ba8:	00767215 	rsbseq	r7, r6, r5, lsl r2
 bac:	10017701 	andne	r7, r1, r1, lsl #14
 bb0:	00000048 	andeq	r0, r0, r8, asr #32
 bb4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 bb8:	00047e17 	andeq	r7, r4, r7, lsl lr
 bbc:	016b0100 	cmneq	fp, r0, lsl #2
 bc0:	00045606 	andeq	r5, r4, r6, lsl #12
 bc4:	00002a20 	andeq	r2, r0, r0, lsr #20
 bc8:	a09c0100 	addsge	r0, ip, r0, lsl #2
 bcc:	1800000a 	stmdane	r0, {r1, r3}
 bd0:	00000385 	andeq	r0, r0, r5, lsl #7
 bd4:	25016b01 	strcs	r6, [r1, #-2817]	; 0xfffff4ff
 bd8:	00000048 	andeq	r0, r0, r8, asr #32
 bdc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 be0:	0003a717 	andeq	sl, r3, r7, lsl r7
 be4:	01640100 	cmneq	r4, r0, lsl #2
 be8:	00042c06 	andeq	r2, r4, r6, lsl #24
 bec:	00002a20 	andeq	r2, r0, r0, lsr #20
 bf0:	c89c0100 	ldmgt	ip, {r8}
 bf4:	1800000a 	stmdane	r0, {r1, r3}
 bf8:	000002e7 	andeq	r0, r0, r7, ror #5
 bfc:	24016401 	strcs	r6, [r1], #-1025	; 0xfffffbff
 c00:	00000048 	andeq	r0, r0, r8, asr #32
 c04:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c08:	0004f017 	andeq	pc, r4, r7, lsl r0	; <UNPREDICTABLE>
 c0c:	01590100 	cmpeq	r9, r0, lsl #2
 c10:	0003f406 	andeq	pc, r3, r6, lsl #8
 c14:	00003820 	andeq	r3, r0, r0, lsr #16
 c18:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
 c1c:	1800000a 	stmdane	r0, {r1, r3}
 c20:	0000021e 	andeq	r0, r0, lr, lsl r2
 c24:	2b015901 	blcs	57030 <startup-0x1ffa8fd0>
 c28:	00000048 	andeq	r0, r0, r8, asr #32
 c2c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c30:	00044519 	andeq	r4, r4, r9, lsl r5
 c34:	01510100 	cmpeq	r1, r0, lsl #2
 c38:	0003ac06 	andeq	sl, r3, r6, lsl #24
 c3c:	00004820 	andeq	r4, r0, r0, lsr #16
 c40:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 c44:	1200000b 	andne	r0, r0, #11
 c48:	51010078 	tstpl	r1, r8, ror r0
 c4c:	007e2001 	rsbseq	r2, lr, r1
 c50:	91020000 	mrsls	r0, (UNDEF: 2)
 c54:	0063156f 	rsbeq	r1, r3, pc, ror #10
 c58:	07015301 	streq	r5, [r1, -r1, lsl #6]
 c5c:	0000007e 	andeq	r0, r0, lr, ror r0
 c60:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c64:	0004c619 	andeq	ip, r4, r9, lsl r6
 c68:	014a0100 	mrseq	r0, (UNDEF: 90)
 c6c:	00037406 	andeq	r7, r3, r6, lsl #8
 c70:	00003820 	andeq	r3, r0, r0, lsr #16
 c74:	589c0100 	ldmpl	ip, {r8}
 c78:	1200000b 	andne	r0, r0, #11
 c7c:	4a010078 	bmi	40e64 <startup-0x1ffbf19c>
 c80:	007e1e01 	rsbseq	r1, lr, r1, lsl #28
 c84:	91020000 	mrsls	r0, (UNDEF: 2)
 c88:	0063156f 	rsbeq	r1, r3, pc, ror #10
 c8c:	07014c01 	streq	r4, [r1, -r1, lsl #24]
 c90:	0000007e 	andeq	r0, r0, lr, ror r0
 c94:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c98:	00033a11 	andeq	r3, r3, r1, lsl sl
 c9c:	01350100 	teqeq	r5, r0, lsl #2
 ca0:	0000480f 	andeq	r4, r0, pc, lsl #16
 ca4:	00030c00 	andeq	r0, r3, r0, lsl #24
 ca8:	00006820 	andeq	r6, r0, r0, lsr #16
 cac:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
 cb0:	1500000b 	strne	r0, [r0, #-11]
 cb4:	0079656b 	rsbseq	r6, r9, fp, ror #10
 cb8:	13013801 	movwne	r3, #6145	; 0x1801
 cbc:	00000ba4 	andeq	r0, r0, r4, lsr #23
 cc0:	15589102 	ldrbne	r9, [r8, #-258]	; 0xfffffefe
 cc4:	00776f72 	rsbseq	r6, r7, r2, ror pc
 cc8:	09013a01 	stmdbeq	r1, {r0, r9, fp, ip, sp}
 ccc:	0000002c 	andeq	r0, r0, ip, lsr #32
 cd0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 cd4:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 cd8:	0e013a01 	vmlaeq.f32	s6, s2, s2
 cdc:	0000002c 	andeq	r0, r0, ip, lsr #32
 ce0:	00689102 	rsbeq	r9, r8, r2, lsl #2
 ce4:	0000480a 	andeq	r4, r0, sl, lsl #16
 ce8:	000bb400 	andeq	fp, fp, r0, lsl #8
 cec:	00250b00 	eoreq	r0, r5, r0, lsl #22
 cf0:	000f0000 	andeq	r0, pc, r0
 cf4:	00016616 	andeq	r6, r1, r6, lsl r6
 cf8:	011f0100 	tsteq	pc, r0, lsl #2
 cfc:	00002c05 	andeq	r2, r0, r5, lsl #24
 d00:	0002b800 	andeq	fp, r2, r0, lsl #16
 d04:	00005420 	andeq	r5, r0, r0, lsr #8
 d08:	de9c0100 	fmllee	f0, f4, f0
 d0c:	1500000b 	strne	r0, [r0, #-11]
 d10:	27010063 	strcs	r0, [r1, -r3, rrx]
 d14:	00481301 	subeq	r1, r8, r1, lsl #6
 d18:	91020000 	mrsls	r0, (UNDEF: 2)
 d1c:	84190077 	ldrhi	r0, [r9], #-119	; 0xffffff89
 d20:	01000002 	tsteq	r0, r2
 d24:	6606010d 	strvs	r0, [r6], -sp, lsl #2
 d28:	52200002 	eorpl	r0, r0, #2
 d2c:	01000000 	mrseq	r0, (UNDEF: 0)
 d30:	000c069c 	muleq	ip, ip, r6
 d34:	6f721200 	svcvs	0x00721200
 d38:	0d010077 	stceq	0, cr0, [r1, #-476]	; 0xfffffe24
 d3c:	00252001 	eoreq	r2, r5, r1
 d40:	91020000 	mrsls	r0, (UNDEF: 2)
 d44:	c4170074 	ldrgt	r0, [r7], #-116	; 0xffffff8c
 d48:	01000002 	tsteq	r0, r2
 d4c:	42060100 	andmi	r0, r6, #0, 2
 d50:	24200002 	strtcs	r0, [r0], #-2
 d54:	01000000 	mrseq	r0, (UNDEF: 0)
 d58:	000c2d9c 	muleq	ip, ip, sp
 d5c:	736d1200 	cmnvc	sp, #0, 4
 d60:	01000100 	mrseq	r0, (UNDEF: 16)
 d64:	0000251f 	andeq	r2, r0, pc, lsl r5
 d68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d6c:	04951e00 	ldreq	r1, [r5], #3584	; 0xe00
 d70:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
 d74:	00020c06 	andeq	r0, r2, r6, lsl #24
 d78:	00003620 	andeq	r3, r0, r0, lsr #12
 d7c:	699c0100 	ldmibvs	ip, {r8}
 d80:	1f00000c 	svcne	0x0000000c
 d84:	0100736d 	tsteq	r0, sp, ror #6
 d88:	00251fee 	eoreq	r1, r5, lr, ror #31
 d8c:	91020000 	mrsls	r0, (UNDEF: 2)
 d90:	0214146c 	andseq	r1, r4, #108, 8	; 0x6c000000
 d94:	00242000 	eoreq	r2, r4, r0
 d98:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
 d9c:	0bf60100 	bleq	ffd811a4 <spider_obj+0xdfd80180>
 da0:	0000002c 	andeq	r0, r0, ip, lsr #32
 da4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 da8:	01842100 	orreq	r2, r4, r0, lsl #2
 dac:	e3010000 	movw	r0, #4096	; 0x1000
 db0:	0001c806 	andeq	ip, r1, r6, lsl #16
 db4:	00004420 	andeq	r4, r0, r0, lsr #8
 db8:	219c0100 	orrscs	r0, ip, r0, lsl #2
 dbc:	00000469 	andeq	r0, r0, r9, ror #8
 dc0:	5c06d401 	cfstrspl	mvf13, [r6], {1}
 dc4:	6c200001 	stcvs	0, cr0, [r0], #-4
 dc8:	01000000 	mrseq	r0, (UNDEF: 0)
 dcc:	04eb229c 	strbteq	r2, [fp], #668	; 0x29c
 dd0:	b3010000 	movwlt	r0, #4096	; 0x1000
 dd4:	00002c05 	andeq	r2, r0, r5, lsl #24
 dd8:	00007c00 	andeq	r7, r0, r0, lsl #24
 ddc:	0000e020 	andeq	lr, r0, r0, lsr #32
 de0:	209c0100 	addscs	r0, ip, r0, lsl #2
 de4:	b5010063 	strlt	r0, [r1, #-99]	; 0xffffff9d
 de8:	00007e07 	andeq	r7, r0, r7, lsl #28
 dec:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 df0:	0004720f 	andeq	r7, r4, pc, lsl #4
 df4:	0ab60100 	beq	fed811fc <spider_obj+0xded801d8>
 df8:	000002a9 	andeq	r0, r0, r9, lsr #5
 dfc:	0f6c9102 	svceq	0x006c9102
 e00:	0000030b 	andeq	r0, r0, fp, lsl #6
 e04:	a90ab701 	stmdbge	sl, {r0, r8, r9, sl, ip, sp, pc}
 e08:	02000002 	andeq	r0, r0, #2
 e0c:	b2236891 	eorlt	r6, r3, #9502720	; 0x910000
 e10:	01000002 	tsteq	r0, r2
 e14:	002c02b9 	strhteq	r0, [ip], -r9
 e18:	0ce00000 	stcleq	0, cr0, [r0]
 e1c:	001b0000 	andseq	r0, fp, r0
 e20:	0003e224 	andeq	lr, r3, r4, lsr #4
 e24:	02ba0100 	adcseq	r0, sl, #0, 2
 e28:	0000002c 	andeq	r0, r0, ip, lsr #32
 e2c:	0000001b 	andeq	r0, r0, fp, lsl r0
 e30:	0000007c 	andeq	r0, r0, ip, ror r0
 e34:	03320004 	teqeq	r2, #4
 e38:	01040000 	mrseq	r0, (UNDEF: 4)
 e3c:	0000003e 	andeq	r0, r0, lr, lsr r0
 e40:	0005190c 	andeq	r1, r5, ip, lsl #18
	...
 e50:	0009aa00 	andeq	sl, r9, r0, lsl #20
 e54:	02900200 	addseq	r0, r0, #0, 4
 e58:	24010000 	strcs	r0, [r1], #-0
 e5c:	000efe06 	andeq	pc, lr, r6, lsl #28
 e60:	00000620 	andeq	r0, r0, r0, lsr #12
 e64:	029c0100 	addseq	r0, ip, #0, 2
 e68:	000002f9 	strdeq	r0, [r0], -r9
 e6c:	f8061d01 			; <UNDEFINED> instruction: 0xf8061d01
 e70:	0620000e 	strteq	r0, [r0], -lr
 e74:	01000000 	mrseq	r0, (UNDEF: 0)
 e78:	03e2029c 	mvneq	r0, #156, 4	; 0xc0000009
 e7c:	16010000 	strne	r0, [r1], -r0
 e80:	000ef206 	andeq	pc, lr, r6, lsl #4
 e84:	00000620 	andeq	r0, r0, r0, lsr #12
 e88:	029c0100 	addseq	r0, ip, #0, 2
 e8c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
 e90:	ec060f01 	stc	15, cr0, [r6], {1}
 e94:	0620000e 	strteq	r0, [r0], -lr
 e98:	01000000 	mrseq	r0, (UNDEF: 0)
 e9c:	0523029c 	streq	r0, [r3, #-668]!	; 0xfffffd64
 ea0:	06010000 	streq	r0, [r1], -r0
 ea4:	00000001 	andeq	r0, r0, r1
 ea8:	00000c20 	andeq	r0, r0, r0, lsr #24
 eac:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	13490b39 	movtne	r0, #39737	; 0x9b39
  40:	00000b38 	andeq	r0, r0, r8, lsr fp
  44:	0b002405 	bleq	9060 <startup-0x1fff6fa0>
  48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  4c:	0600000e 	streq	r0, [r0], -lr
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	0013490b 	andseq	r4, r3, fp, lsl #18
  64:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050900 	andeq	r0, r5, r0, lsl #18
  84:	0b3a0803 	bleq	e82098 <startup-0x1f17df68>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	0f0a0000 	svceq	0x000a0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0b000013 	bleq	ec <startup-0x1fffff14>
  9c:	0e03012e 	adfeqsp	f0, f3, #0.5
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	110e1b0e 	tstne	lr, lr, lsl #22
  c0:	10061201 	andne	r1, r6, r1, lsl #4
  c4:	02000017 	andeq	r0, r0, #23
  c8:	0b0b0024 	bleq	2c0160 <startup-0x1fd3fea0>
  cc:	0e030b3e 	vmoveq.16	d3[0], r0
  d0:	24030000 	strcs	r0, [r3], #-0
  d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d8:	0008030b 	andeq	r0, r8, fp, lsl #6
  dc:	000f0400 	andeq	r0, pc, r0, lsl #8
  e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  e4:	13050000 	movwne	r0, #20480	; 0x5000
  e8:	3a0b0b01 	bcc	2c2cf4 <startup-0x1fd3d30c>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0803 	bleq	e8210c <startup-0x1f17def4>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	16070000 	strne	r0, [r7], -r0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0013490b 	andseq	r4, r3, fp, lsl #18
 114:	01130800 	tsteq	r3, r0, lsl #16
 118:	0b0b0e03 	bleq	2c392c <startup-0x1fd3c6d4>
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	13010b39 	movwne	r0, #6969	; 0x1b39
 124:	0d090000 	stceq	0, cr0, [r9, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 134:	0a00000b 	beq	168 <startup-0x1ffffe98>
 138:	13490101 	movtne	r0, #37121	; 0x9101
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
 144:	000b2f13 	andeq	r2, fp, r3, lsl pc
 148:	01150c00 	tsteq	r5, r0, lsl #24
 14c:	13011927 	movwne	r1, #6439	; 0x1927
 150:	050d0000 	streq	r0, [sp, #-0]
 154:	00134900 	andseq	r4, r3, r0, lsl #18
 158:	00340e00 	eorseq	r0, r4, r0, lsl #28
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	0b390b3b 	bleq	e42e54 <startup-0x1f1bd1ac>
 164:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 168:	00001802 	andeq	r1, r0, r2, lsl #16
 16c:	0300340f 	movweq	r3, #1039	; 0x40f
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	002e1000 	eoreq	r1, lr, r0
 180:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 188:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 194:	11000019 	tstne	r0, r9, lsl r0
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	0b39053b 	bleq	e41694 <startup-0x1f1be96c>
 1a4:	13491927 	movtne	r1, #39207	; 0x9927
 1a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b0:	00130119 	andseq	r0, r3, r9, lsl r1
 1b4:	00051200 	andeq	r1, r5, r0, lsl #4
 1b8:	0b3a0803 	bleq	e821cc <startup-0x1f17de34>
 1bc:	0b39053b 	bleq	e416b0 <startup-0x1f1be950>
 1c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c4:	34130000 	ldrcc	r0, [r3], #-0
 1c8:	3a0e0300 	bcc	380dd0 <startup-0x1fc7f230>
 1cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1d4:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 1d8:	0111010b 	tsteq	r1, fp, lsl #2
 1dc:	00000612 	andeq	r0, r0, r2, lsl r6
 1e0:	03003415 	movweq	r3, #1045	; 0x415
 1e4:	3b0b3a08 	blcc	2cea0c <startup-0x1fd315f4>
 1e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1ec:	00180213 	andseq	r0, r8, r3, lsl r2
 1f0:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 1f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 200:	01111349 	tsteq	r1, r9, asr #6
 204:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 208:	01194297 			; <UNDEFINED> instruction: 0x01194297
 20c:	17000013 	smladne	r0, r3, r0, r0
 210:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 214:	0b3a0e03 	bleq	e83a28 <startup-0x1f17c5d8>
 218:	0b39053b 	bleq	e4170c <startup-0x1f1be8f4>
 21c:	01111927 	tsteq	r1, r7, lsr #18
 220:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 224:	01194296 			; <UNDEFINED> instruction: 0x01194296
 228:	18000013 	stmdane	r0, {r0, r1, r4}
 22c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 230:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 234:	13490b39 	movtne	r0, #39737	; 0x9b39
 238:	00001802 	andeq	r1, r0, r2, lsl #16
 23c:	3f012e19 	svccc	0x00012e19
 240:	3a0e0319 	bcc	380eac <startup-0x1fc7f154>
 244:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	1119270b 	tstne	r9, fp, lsl #14
 24c:	40061201 	andmi	r1, r6, r1, lsl #4
 250:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	3f012e1a 	svccc	0x00012e1a
 25c:	3a0e0319 	bcc	380ec8 <startup-0x1fc7f138>
 260:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 264:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 268:	1b000019 	blne	2d4 <startup-0x1ffffd2c>
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	11010b1c 	tstne	r1, ip, lsl fp
 274:	01061201 	tsteq	r6, r1, lsl #4
 278:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 27c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 280:	0b3a0e03 	bleq	e83a94 <startup-0x1f17c56c>
 284:	0b39053b 	bleq	e41778 <startup-0x1f1be888>
 288:	01111927 	tsteq	r1, r7, lsr #18
 28c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 290:	00194296 	mulseq	r9, r6, r2
 294:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 298:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 29c:	0b3b0b3a 	bleq	ec2f8c <startup-0x1f13d074>
 2a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2ac:	00130119 	andseq	r0, r3, r9, lsl r1
 2b0:	00051f00 	andeq	r1, r5, r0, lsl #30
 2b4:	0b3a0803 	bleq	e822c8 <startup-0x1f17dd38>
 2b8:	0b390b3b 	bleq	e42fac <startup-0x1f1bd054>
 2bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2c0:	34200000 	strtcc	r0, [r0], #-0
 2c4:	3a080300 	bcc	200ecc <startup-0x1fdff134>
 2c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2d0:	21000018 	tstcs	r0, r8, lsl r0
 2d4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2d8:	0b3a0e03 	bleq	e83aec <startup-0x1f17c514>
 2dc:	0b390b3b 	bleq	e42fd0 <startup-0x1f1bd030>
 2e0:	01111927 	tsteq	r1, r7, lsr #18
 2e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e8:	00194297 	mulseq	r9, r7, r2
 2ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 2f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2f4:	0b3b0b3a 	bleq	ec2fe4 <startup-0x1f13d01c>
 2f8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2fc:	01111349 	tsteq	r1, r9, asr #6
 300:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 304:	00194296 	mulseq	r9, r6, r2
 308:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 30c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	13490b39 	movtne	r0, #39737	; 0x9b39
 318:	1301193c 	movwne	r1, #6460	; 0x193c
 31c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 320:	03193f01 	tsteq	r9, #1, 30
 324:	3b0b3a0e 	blcc	2ceb64 <startup-0x1fd3149c>
 328:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 32c:	00193c13 	andseq	r3, r9, r3, lsl ip
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	1b0e030b 	blne	380f6c <startup-0x1fc7f094>
 33c:	1117550e 	tstne	r7, lr, lsl #10
 340:	00171001 	andseq	r1, r7, r1
 344:	002e0200 	eoreq	r0, lr, r0, lsl #4
 348:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 34c:	0b3b0b3a 	bleq	ec303c <startup-0x1f13cfc4>
 350:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000006a 	andeq	r0, r0, sl, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01400002 	cmpeq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000007c 	andcs	r0, r0, ip, ror r0
  34:	00000e70 	andeq	r0, r0, r0, ror lr
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0e300002 	cdpeq	0, 3, cr0, cr0, cr2, {0}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000eec 	andcs	r0, r0, ip, ror #29
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000072 	andeq	r0, r0, r2, ror r0
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
  20:	00632e67 	rsbeq	r2, r3, r7, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	01160320 	tsteq	r6, r0, lsr #6
  34:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
  38:	04020010 	streq	r0, [r2], #-16
  3c:	15052001 	strne	r2, [r5, #-1]
  40:	01040200 	mrseq	r0, R12_usr
  44:	0008053c 	andeq	r0, r8, ip, lsr r5
  48:	3c010402 	cfstrscc	mvf0, [r1], {2}
  4c:	200f0522 	andcs	r0, pc, r2, lsr #10
  50:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
  54:	03052105 	movweq	r2, #20741	; 0x5105
  58:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
  5c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
  60:	11054b08 	tstne	r5, r8, lsl #22
  64:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
  68:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
  6c:	01052e08 	tsteq	r5, r8, lsl #28
  70:	00050231 	andeq	r0, r5, r1, lsr r2
  74:	09300101 	ldmdbeq	r0!, {r0, r8}
  78:	00030000 	andeq	r0, r3, r0
  7c:	0000001d 	andeq	r0, r0, sp, lsl r0
  80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  84:	0101000d 	tsteq	r1, sp
  88:	00000101 	andeq	r0, r0, r1, lsl #2
  8c:	00000100 	andeq	r0, r0, r0, lsl #2
  90:	616d0001 	cmnvs	sp, r1
  94:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
  98:	00000000 	andeq	r0, r0, r0
  9c:	00010500 	andeq	r0, r1, r0, lsl #10
  a0:	007c0205 	rsbseq	r0, ip, r5, lsl #4
  a4:	b3032000 	movwlt	r2, #12288	; 0x3000
  a8:	0a050101 	beq	1404b4 <startup-0x1febfb4c>
  ac:	02052f3e 	andeq	r2, r5, #62, 30	; 0xf8
  b0:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff189 <spider_obj+0xdfffe165>
  b4:	02052f08 	andeq	r2, r5, #8, 30
  b8:	4e09052e 	cfsh32mi	mvfx0, mvfx9, #30
  bc:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
  c0:	03053d0b 	movweq	r3, #23819	; 0x5d0b
  c4:	3d07052e 	cfstr32cc	mvfx0, [r7, #-184]	; 0xffffff48
  c8:	05590305 	ldrbeq	r0, [r9, #-773]	; 0xfffffcfb
  cc:	0c059214 	sfmeq	f1, 1, [r5], {20}
  d0:	4a04052e 	bmi	101590 <startup-0x1fefea70>
  d4:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
  d8:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
  dc:	21140558 	tstcs	r4, r8, asr r5
  e0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
  e4:	14054a04 	strne	r4, [r5], #-2564	; 0xfffff5fc
  e8:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
  ec:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
  f0:	0c052114 	stfeqs	f2, [r5], {20}
  f4:	4a04052e 	bmi	1015b4 <startup-0x1fefea4c>
  f8:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
  fc:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
 100:	2207054a 	andcs	r0, r7, #310378496	; 0x12800000
 104:	05740605 	ldrbeq	r0, [r4, #-1541]!	; 0xfffff9fb
 108:	70032403 	andvc	r2, r3, r3, lsl #8
 10c:	0304053c 	movweq	r0, #17724	; 0x453c
 110:	0905200e 	stmdbeq	r5, {r1, r2, r3, sp}
 114:	21010524 	tstcs	r1, r4, lsr #10
 118:	300205af 	andcc	r0, r2, pc, lsr #11
 11c:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
 120:	2c053005 	stccs	0, cr3, [r5], {5}
 124:	2f2f0520 	svccs	0x002f0520
 128:	67310559 			; <UNDEFINED> instruction: 0x67310559
 12c:	59592f05 	ldmdbpl	r9, {r0, r2, r8, r9, sl, fp, sp}^
 130:	08680105 	stmdaeq	r8!, {r0, r2, r8}^
 134:	30020532 	andcc	r0, r2, r2, lsr r5
 138:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 13c:	0c052f02 	stceq	15, cr2, [r5], {2}
 140:	2f020520 	svccs	0x00020520
 144:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 148:	0c052f02 	stceq	15, cr2, [r5], {2}
 14c:	2f070520 	svccs	0x00070520
 150:	02000805 	andeq	r0, r0, #327680	; 0x50000
 154:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 158:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
 15c:	07052e01 	streq	r2, [r5, -r1, lsl #28]
 160:	01040200 	mrseq	r0, R12_usr
 164:	2102053c 	tstcs	r2, ip, lsr r5
 168:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 16c:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 170:	0205510b 	andeq	r5, r5, #-1073741822	; 0xc0000002
 174:	0003052e 	andeq	r0, r3, lr, lsr #10
 178:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 184:	02002f03 	andeq	r2, r0, #3, 30
 188:	052f0304 	streq	r0, [pc, #-772]!	; fffffe8c <spider_obj+0xdfffee68>
 18c:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 190:	14052903 	strne	r2, [r5], #-2307	; 0xfffff6fd
 194:	01040200 	mrseq	r0, R12_usr
 198:	0002053c 	andeq	r0, r2, ip, lsr r5
 19c:	20010402 	andcs	r0, r1, r2, lsl #8
 1a0:	5b440105 	blpl	11005bc <startup-0x1eeffa44>
 1a4:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
 1a8:	054f9f01 	strbeq	r9, [pc, #-3841]	; fffff2af <spider_obj+0xdfffe28b>
 1ac:	0d054f05 	stceq	15, cr4, [r5, #-20]	; 0xffffffec
 1b0:	201c0592 	mulscs	ip, r2, r5
 1b4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1b8:	1c05210d 	stfnes	f2, [r5], {13}
 1bc:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 1c0:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 1c4:	0505201c 	streq	r2, [r5, #-28]	; 0xffffffe4
 1c8:	210d052e 	tstcs	sp, lr, lsr #10
 1cc:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 1d0:	0d052e05 	stceq	14, cr2, [r5, #-20]	; 0xffffffec
 1d4:	201c0521 	andscs	r0, ip, r1, lsr #10
 1d8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1dc:	05852401 	streq	r2, [r5, #1025]	; 0x401
 1e0:	07054409 	streq	r4, [r5, -r9, lsl #8]
 1e4:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
 1e8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1ec:	0c052110 	stfeqs	f2, [r5], {16}
 1f0:	4a08052f 	bmi	2016b4 <startup-0x1fdfe94c>
 1f4:	05211005 	streq	r1, [r1, #-5]!
 1f8:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
 1fc:	2110054a 	tstcs	r0, sl, asr #10
 200:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff603 <spider_obj+0xdfffe5df>
 204:	10054a08 	andne	r4, r5, r8, lsl #20
 208:	300c0521 	andcc	r0, ip, r1, lsr #10
 20c:	69210105 	stmdbvs	r1!, {r0, r2, r8}
 210:	053e1305 	ldreq	r1, [lr, #-773]!	; 0xfffffcfb
 214:	0505690c 	streq	r6, [r5, #-2316]	; 0xfffff6f4
 218:	2209052e 	andcs	r0, r9, #192937984	; 0xb800000
 21c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 220:	0d054a0b 	vstreq	s8, [r5, #-44]	; 0xffffffd4
 224:	3d1f053e 	cfldr32cc	mvfx0, [pc, #-248]	; 134 <startup-0x1ffffecc>
 228:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 22c:	22052027 	andcs	r2, r5, #39	; 0x27
 230:	2018052e 	andscs	r0, r8, lr, lsr #10
 234:	02001d05 	andeq	r1, r0, #320	; 0x140
 238:	7a030204 	bvc	c0a50 <startup-0x1ff3f5b0>
 23c:	0005053c 	andeq	r0, r5, ip, lsr r5
 240:	3c010402 	cfstrscc	mvf0, [r1], {2}
 244:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 248:	01053d0d 	tsteq	r5, sp, lsl #26
 24c:	01040200 	mrseq	r0, R12_usr
 250:	06057921 	streq	r7, [r5], -r1, lsr #18
 254:	20040568 	andcs	r0, r4, r8, ror #10
 258:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 25c:	0e056602 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx2
 260:	4b010520 	blmi	416e8 <startup-0x1ffbe918>
 264:	68060569 	stmdavs	r6, {r0, r3, r5, r6, r8, sl}
 268:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 26c:	04054b08 	streq	r4, [r5], #-2824	; 0xfffff4f8
 270:	2f02059e 	svccs	0x0002059e
 274:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 278:	05696701 	strbeq	r6, [r9, #-1793]!	; 0xfffff8ff
 27c:	3d2f6802 	stccc	8, cr6, [pc, #-8]!	; 27c <startup-0x1ffffd84>
 280:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 284:	3d2f3d02 	stccc	13, cr3, [pc, #-8]!	; 284 <startup-0x1ffffd7c>
 288:	692f0105 	stmdbvs	pc!, {r0, r2, r8}	; <UNPREDICTABLE>
 28c:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 290:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 294:	6702054d 	strvs	r0, [r2, -sp, asr #10]
 298:	01053d3d 	tsteq	r5, sp, lsr sp
 29c:	02054d59 	andeq	r4, r5, #5696	; 0x1640
 2a0:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffff56b <spider_obj+0xdfffe547>
 2a4:	10052f15 	andne	r2, r5, r5, lsl pc
 2a8:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 2ac:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 2b0:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 2b4:	0d053d02 	stceq	13, cr3, [r5, #-8]
 2b8:	2f020520 	svccs	0x00020520
 2bc:	3d15053d 	cfldr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 2c0:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 2c4:	0905200d 	stmdbeq	r5, {r0, r2, r3, sp}
 2c8:	2f01052f 	svccs	0x0001052f
 2cc:	3d0205a1 	cfstr32cc	mvfx0, [r2, #-644]	; 0xfffffd7c
 2d0:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2d4:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 2d8:	02053d15 	andeq	r3, r5, #1344	; 0x540
 2dc:	200d0559 	andcs	r0, sp, r9, asr r5
 2e0:	052f0905 	streq	r0, [pc, #-2309]!	; fffff9e3 <spider_obj+0xdfffe9bf>
 2e4:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 2e8:	0a056707 	beq	159f0c <startup-0x1fea60f4>
 2ec:	01040200 	mrseq	r0, R12_usr
 2f0:	001e0520 	andseq	r0, lr, r0, lsr #10
 2f4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2f8:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 2fc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 300:	593d3002 	ldmdbpl	sp!, {r1, ip, sp}
 304:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 308:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 2fc <startup-0x1ffffd04>
 30c:	01053d3d 	tsteq	r5, sp, lsr sp
 310:	07053f3d 	smladxeq	r5, sp, pc, r3	; <UNPREDICTABLE>
 314:	000a0567 	andeq	r0, sl, r7, ror #10
 318:	20010402 	andcs	r0, r1, r2, lsl #8
 31c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 320:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 324:	04020007 	streq	r0, [r2], #-7
 328:	02053c01 	andeq	r3, r5, #256	; 0x100
 32c:	05593d30 	ldrbeq	r3, [r9, #-3376]	; 0xfffff2d0
 330:	054d3d01 	strbeq	r3, [sp, #-3329]	; 0xfffff2ff
 334:	1005591b 	andne	r5, r5, fp, lsl r9
 338:	4b05052e 	blmi	1417f8 <startup-0x1febe808>
 33c:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 340:	01055a02 	tsteq	r5, r2, lsl #20
 344:	10054e9f 	mulne	r5, pc, lr	; <UNPREDICTABLE>
 348:	59070559 	stmdbpl	r7, {r0, r3, r4, r6, r8, sl}
 34c:	2f2e0505 	svccs	0x002e0505
 350:	4d4b0105 	stfmie	f0, [fp, #-20]	; 0xffffffec
 354:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
 358:	1b052e13 	blne	14bbac <startup-0x1feb4454>
 35c:	01040200 	mrseq	r0, R12_usr
 360:	0013052e 	andseq	r0, r3, lr, lsr #10
 364:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 368:	03040200 	movweq	r0, #16896	; 0x4200
 36c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 370:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
 374:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 378:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
 37c:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 380:	33054a06 	movwcc	r4, #23046	; 0x5a06
 384:	06040200 	streq	r0, [r4], -r0, lsl #4
 388:	003b052e 	eorseq	r0, fp, lr, lsr #10
 38c:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
 390:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
 394:	002e0704 	eoreq	r0, lr, r4, lsl #14
 398:	06090402 	streq	r0, [r9], -r2, lsl #8
 39c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3a0:	24052e0a 	strcs	r2, [r5], #-3594	; 0xfffff1f6
 3a4:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 3a8:	4c052006 	stcmi	0, cr2, [r5], {6}
 3ac:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 3b0:	00530574 	subseq	r0, r3, r4, ror r5
 3b4:	2e0c0402 	cdpcs	4, 0, cr0, cr12, cr2, {0}
 3b8:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 3bc:	052e0d04 	streq	r0, [lr, #-3332]!	; 0xfffff2fc
 3c0:	04020053 	streq	r0, [r2], #-83	; 0xffffffad
 3c4:	02002e0d 	andeq	r2, r0, #13, 28	; 0xd0
 3c8:	2e060f04 	cdpcs	15, 0, cr0, cr6, cr4, {0}
 3cc:	10040200 	andne	r0, r4, r0, lsl #4
 3d0:	0044052e 	subeq	r0, r4, lr, lsr #10
 3d4:	06120402 	ldreq	r0, [r2], -r2, lsl #8
 3d8:	006d0520 	rsbeq	r0, sp, r0, lsr #10
 3dc:	20120402 	andscs	r0, r2, r2, lsl #8
 3e0:	02007405 	andeq	r7, r0, #83886080	; 0x5000000
 3e4:	052e1204 	streq	r1, [lr, #-516]!	; 0xfffffdfc
 3e8:	0402007c 	streq	r0, [r2], #-124	; 0xffffff84
 3ec:	74052e13 	strvc	r2, [r5], #-3603	; 0xfffff1ed
 3f0:	13040200 	movwne	r0, #16896	; 0x4200
 3f4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3f8:	002e0615 	eoreq	r0, lr, r5, lsl r6
 3fc:	2e160402 	cfmulscs	mvf0, mvf6, mvf2
 400:	02006505 	andeq	r6, r0, #20971520	; 0x1400000
 404:	20061804 	andcs	r1, r6, r4, lsl #16
 408:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 40c:	05201804 	streq	r1, [r0, #-2052]!	; 0xfffff7fc
 410:	0f05210a 	svceq	0x0005210a
 414:	3c190532 	cfldr32cc	mvfx0, [r9], {50}	; 0x32
 418:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 41c:	28052006 	stmdacs	r5, {r1, r2, sp}
 420:	3c32053c 	cfldr32cc	mvfx0, [r2], #-240	; 0xffffff10
 424:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
 428:	0505201f 	streq	r2, [r5, #-31]	; 0xffffffe1
 42c:	2f09053c 	svccs	0x0009053c
 430:	4b05055a 	blmi	1419a0 <startup-0x1febe660>
 434:	755a0305 	ldrbvc	r0, [sl, #-773]	; 0xfffffcfb
 438:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
 43c:	05052e15 	streq	r2, [r5, #-3605]	; 0xfffff1eb
 440:	3003052e 	andcc	r0, r3, lr, lsr #10
 444:	84150575 	ldrhi	r0, [r5], #-1397	; 0xfffffa8b
 448:	052e1f05 	streq	r1, [lr, #-3845]!	; 0xfffff0fb
 44c:	19052e07 	stmdbne	r5, {r0, r1, r2, r9, sl, fp, sp}
 450:	3c23054b 	cfstr32cc	mvfx0, [r3], #-300	; 0xfffffed4
 454:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 458:	07052010 	smladeq	r5, r0, r0, r2
 45c:	054b3d3c 	strbeq	r3, [fp, #-3388]	; 0xfffff2c4
 460:	15055a0b 	strne	r5, [r5, #-2571]	; 0xfffff5f5
 464:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 468:	5a2f0905 	bpl	bc2884 <startup-0x1f43d77c>
 46c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 470:	02052e0b 	andeq	r2, r5, #11, 28	; 0xb0
 474:	22060520 	andcs	r0, r6, #32, 10	; 0x8000000
 478:	92590405 	subsls	r0, r9, #83886080	; 0x5000000
 47c:	91830905 	orrls	r0, r3, r5, lsl #18
 480:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
 484:	05303c06 	ldreq	r3, [r0, #-3078]!	; 0xfffff3fa
 488:	2705910a 	strcs	r9, [r5, -sl, lsl #2]
 48c:	02040200 	andeq	r0, r4, #0, 4
 490:	05747603 	ldrbeq	r7, [r4, #-1539]!	; 0xfffff9fd
 494:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 498:	02053c01 	andeq	r3, r5, #256	; 0x100
 49c:	01040200 	mrseq	r0, R12_usr
 4a0:	0309053c 	movweq	r0, #38204	; 0x953c
 4a4:	01053c0f 	tsteq	r5, pc, lsl #24
 4a8:	10054d21 	andne	r4, r5, r1, lsr #26
 4ac:	2e0a054f 	cfsh32cs	mvfx0, mvfx10, #47
 4b0:	053c2205 	ldreq	r2, [ip, #-517]!	; 0xfffffdfb
 4b4:	32052e1c 	andcc	r2, r5, #28, 28	; 0x1c0
 4b8:	2e38052e 	cdpcs	5, 3, cr0, cr8, cr14, {1}
 4bc:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 4c0:	49052e2c 	stmdbmi	r5, {r2, r3, r5, r9, sl, fp, sp}
 4c4:	2e43053c 	mcrcs	5, 2, r0, cr3, cr12, {1}
 4c8:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
 4cc:	6d056666 	stcvs	6, cr6, [r5, #-408]	; 0xfffffe68
 4d0:	4b100558 	blmi	401a38 <startup-0x1fbfe5c8>
 4d4:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
 4d8:	0a052e13 	beq	14bd2c <startup-0x1feb42d4>
 4dc:	3c29052e 	cfstr32cc	mvfx0, [r9], #-184	; 0xffffff48
 4e0:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
 4e4:	3f052e39 	svccc	0x00052e39
 4e8:	2e3c052e 	cdpcs	5, 3, cr0, cr12, cr14, {1}
 4ec:	052e3305 	streq	r3, [lr, #-773]!	; 0xfffffcfb
 4f0:	56052e50 			; <UNDEFINED> instruction: 0x56052e50
 4f4:	2e53052e 	cdpcs	5, 5, cr0, cr3, cr14, {1}
 4f8:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
 4fc:	74052e63 	strvc	r2, [r5], #-3683	; 0xfffff19d
 500:	587b0558 	ldmdapl	fp!, {r3, r4, r6, r8, sl}^
 504:	054b1005 	strbeq	r1, [fp, #-5]
 508:	13052e16 	movwne	r2, #24086	; 0x5e16
 50c:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 510:	053c2905 	ldreq	r2, [ip, #-2309]!	; 0xfffff6fb
 514:	2c052e2f 	stccs	14, cr2, [r5], {47}	; 0x2f
 518:	2e23052e 	cfsh64cs	mvdx0, mvdx3, #30
 51c:	052e4005 	streq	r4, [lr, #-5]!
 520:	50052e3a 	andpl	r2, r5, sl, lsr lr
 524:	2e56052e 	cdpcs	5, 5, cr0, cr6, cr14, {1}
 528:	052e5305 	streq	r5, [lr, #-773]!	; 0xfffffcfb
 52c:	63052e4a 	movwvs	r2, #24138	; 0x5e4a
 530:	5874052e 	ldmdapl	r4!, {r1, r2, r3, r5, r8, sl}^
 534:	05587b05 	ldrbeq	r7, [r8, #-2821]	; 0xfffff4fb
 538:	0a054b10 	beq	153180 <startup-0x1feace80>
 53c:	3c22052e 	cfstr32cc	mvfx0, [r2], #-184	; 0xffffff48
 540:	052e2805 	streq	r2, [lr, #-2053]!	; 0xfffff7fb
 544:	1c052e25 	stcne	14, cr2, [r5], {37}	; 0x25
 548:	2e39052e 	cdpcs	5, 3, cr0, cr9, cr14, {1}
 54c:	052e3305 	streq	r3, [lr, #-773]!	; 0xfffffcfb
 550:	43052e49 	movwmi	r2, #24137	; 0x5e49
 554:	2e55052e 	cdpcs	5, 5, cr0, cr5, cr14, {1}
 558:	054a6605 	strbeq	r6, [sl, #-1541]	; 0xfffff9fb
 55c:	0105586d 	tsteq	r5, sp, ror #16
 560:	10054d4b 	andne	r4, r5, fp, asr #26
 564:	2e07054c 	cfsh32cs	mvfx0, mvfx7, #44
 568:	053d1005 	ldreq	r1, [sp, #-5]!
 56c:	0d052e07 	stceq	14, cr2, [r5, #-28]	; 0xffffffe4
 570:	3d08052f 	cfstr32cc	mvfx0, [r8, #-188]	; 0xffffff44
 574:	05230d05 	streq	r0, [r3, #-3333]!	; 0xfffff2fb
 578:	0d052e08 	stceq	14, cr2, [r5, #-32]	; 0xffffffe0
 57c:	2e08053d 	mcrcs	5, 0, r0, cr8, cr13, {1}
 580:	052f1305 	streq	r1, [pc, #-773]!	; 283 <startup-0x1ffffd7d>
 584:	19053c08 	stmdbne	r5, {r3, sl, fp, ip, sp}
 588:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
 58c:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
 590:	27052e08 	strcs	r2, [r5, -r8, lsl #28]
 594:	3c08052e 	cfstr32cc	mvfx0, [r8], {46}	; 0x2e
 598:	052f0305 	streq	r0, [pc, #-773]!	; 29b <startup-0x1ffffd65>
 59c:	08054b0c 	stmdaeq	r5, {r2, r3, r8, r9, fp, lr}
 5a0:	2e19052e 	cfmul64cs	mvdx0, mvdx9, mvdx14
 5a4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 5a8:	08052f07 	stmdaeq	r5, {r0, r1, r2, r8, r9, sl, fp, sp}
 5ac:	053c7803 	ldreq	r7, [ip, #-2051]!	; 0xfffff7fd
 5b0:	3c0a0301 	stccc	3, cr0, [sl], {1}
 5b4:	4b10055c 	blmi	401b2c <startup-0x1fbfe4d4>
 5b8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 5bc:	0205300b 	andeq	r3, r5, #11
 5c0:	0010052e 	andseq	r0, r0, lr, lsr #10
 5c4:	23030402 	movwcs	r0, #13314	; 0x3402
 5c8:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 5cc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 5d0:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 5d4:	24052e03 	strcs	r2, [r5], #-3587	; 0xfffff1fd
 5d8:	03040200 	movweq	r0, #16896	; 0x4200
 5dc:	0027052e 	eoreq	r0, r7, lr, lsr #10
 5e0:	3c030402 	cfstrscc	mvf0, [r3], {2}
 5e4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 5e8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 5ec:	04020010 	streq	r0, [r2], #-16
 5f0:	1b052f03 	blne	14c204 <startup-0x1feb3dfc>
 5f4:	03040200 	movweq	r0, #16896	; 0x4200
 5f8:	001a052e 	andseq	r0, sl, lr, lsr #10
 5fc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 600:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 604:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 608:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 60c:	07053c03 	streq	r3, [r5, -r3, lsl #24]
 610:	03040200 	movweq	r0, #16896	; 0x4200
 614:	00160520 	andseq	r0, r6, r0, lsr #10
 618:	2f030402 	svccs	0x00030402
 61c:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 620:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 624:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 628:	2a052e03 	bcs	14be3c <startup-0x1feb41c4>
 62c:	03040200 	movweq	r0, #16896	; 0x4200
 630:	002d052e 	eoreq	r0, sp, lr, lsr #10
 634:	3c030402 	cfstrscc	mvf0, [r3], {2}
 638:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 63c:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 640:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 644:	3e052003 	cdpcc	0, 0, cr2, cr5, cr3, {0}
 648:	03040200 	movweq	r0, #16896	; 0x4200
 64c:	003d052e 	eorseq	r0, sp, lr, lsr #10
 650:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 654:	02004705 	andeq	r4, r0, #1310720	; 0x140000
 658:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 65c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 660:	03053c03 	movweq	r3, #23555	; 0x5c03
 664:	03040200 	movweq	r0, #16896	; 0x4200
 668:	001f0520 	andseq	r0, pc, r0, lsr #10
 66c:	45030402 	strmi	r0, [r3, #-1026]	; 0xfffffbfe
 670:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 674:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 678:	055b5201 	ldrbeq	r5, [fp, #-513]	; 0xfffffdff
 67c:	06054b10 			; <UNDEFINED> instruction: 0x06054b10
 680:	2f0b052e 	svccs	0x000b052e
 684:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 688:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 68c:	23052203 	movwcs	r2, #20995	; 0x5203
 690:	03040200 	movweq	r0, #16896	; 0x4200
 694:	0022052e 	eoreq	r0, r2, lr, lsr #10
 698:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 69c:	02002c05 	andeq	r2, r0, #1280	; 0x500
 6a0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6a4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 6a8:	03053c03 	movweq	r3, #23555	; 0x5c03
 6ac:	03040200 	movweq	r0, #16896	; 0x4200
 6b0:	00350520 	eorseq	r0, r5, r0, lsr #10
 6b4:	20030402 	andcs	r0, r3, r2, lsl #8
 6b8:	02004005 	andeq	r4, r0, #5
 6bc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 6c0:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 6c4:	49052e03 	stmdbmi	r5, {r0, r1, r9, sl, fp, sp}
 6c8:	03040200 	movweq	r0, #16896	; 0x4200
 6cc:	004c052e 	subeq	r0, ip, lr, lsr #10
 6d0:	3c030402 	cfstrscc	mvf0, [r3], {2}
 6d4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 6d8:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 6dc:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 6e0:	02054803 	andeq	r4, r5, #196608	; 0x30000
 6e4:	01040200 	mrseq	r0, R12_usr
 6e8:	4f01053c 	svcmi	0x0001053c
 6ec:	4b02055b 	blmi	81c60 <startup-0x1ff7e3a0>
 6f0:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 6f4:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 6f8:	2f0e052e 	svccs	0x000e052e
 6fc:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 700:	05052e06 	streq	r2, [r5, #-3590]	; 0xfffff1fa
 704:	3f12052f 	svccc	0x0012052f
 708:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 70c:	052f3c0b 	streq	r3, [pc, #-3083]!	; fffffb09 <spider_obj+0xdfffeae5>
 710:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
 714:	3005052e 	andcc	r0, r5, lr, lsr #10
 718:	053f1005 	ldreq	r1, [pc, #-5]!	; 71b <startup-0x1ffff8e5>
 71c:	0b052e0d 	bleq	14bf58 <startup-0x1feb40a8>
 720:	15052f20 	strne	r2, [r5, #-3872]	; 0xfffff0e0
 724:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
 728:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 72c:	0d053e12 	stceq	14, cr3, [r5, #-72]	; 0xffffffb8
 730:	3c0b052e 	cfstr32cc	mvfx0, [fp], {46}	; 0x2e
 734:	2e15052f 	cfmul64cs	mvdx0, mvdx5, mvdx15
 738:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 73c:	10053005 	andne	r3, r5, r5
 740:	2e0d053e 	mcrcs	5, 0, r0, cr13, cr14, {1}
 744:	2f200b05 	svccs	0x00200b05
 748:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 74c:	0a052e08 	beq	14bf74 <startup-0x1feb408c>
 750:	02053d30 	andeq	r3, r5, #48, 26	; 0xc00
 754:	4b01053d 	blmi	41c50 <startup-0x1ffbe3b0>
 758:	670a054d 	strvs	r0, [sl, -sp, asr #10]
 75c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 760:	4b02054d 	blmi	81c9c <startup-0x1ff7e364>
 764:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 768:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 76c:	2f05052e 	svccs	0x0005052e
 770:	02001005 	andeq	r1, r0, #5
 774:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 778:	02053d0b 	andeq	r3, r5, #704	; 0x2c0
 77c:	4b01053d 	blmi	41c78 <startup-0x1ffbe388>
 780:	5912054d 	ldmdbpl	r2, {r0, r2, r3, r6, r8, sl}
 784:	052e1f05 	streq	r1, [lr, #-3845]!	; 0xfffff0fb
 788:	3d2f2e06 	stccc	14, cr2, [pc, #-24]!	; 778 <startup-0x1ffff888>
 78c:	3d11053d 	cfldr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 790:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 794:	17052f05 	strne	r2, [r5, -r5, lsl #30]
 798:	01040200 	mrseq	r0, R12_usr
 79c:	0040054a 	subeq	r0, r0, sl, asr #10
 7a0:	4a020402 	bmi	817b0 <startup-0x1ff7e850>
 7a4:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 7a8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 7ac:	03053e07 	movweq	r3, #24071	; 0x5e07
 7b0:	6801052e 	stmdavs	r1, {r1, r2, r3, r5, r8, sl}
 7b4:	4c07054d 	cfstr32mi	mvfx0, [r7], {77}	; 0x4d
 7b8:	76020559 			; <UNDEFINED> instruction: 0x76020559
 7bc:	04052f2f 	streq	r2, [r5], #-3887	; 0xfffff0d1
 7c0:	2f05054b 	svccs	0x0005054b
 7c4:	2f08053d 	svccs	0x0008053d
 7c8:	05221605 	streq	r1, [r2, #-1541]!	; 0xfffff9fb
 7cc:	09053c03 	stmdbeq	r5, {r0, r1, sl, fp, ip, sp}
 7d0:	2e080548 	cfsh32cs	mvfx0, mvfx8, #40
 7d4:	93320105 	teqls	r2, #1073741825	; 0x40000001
 7d8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 7dc:	0a052e05 	beq	14bff8 <startup-0x1feb4008>
 7e0:	30090530 	andcc	r0, r9, r0, lsr r5
 7e4:	4d210105 	stfmis	f0, [r1, #-20]!	; 0xffffffec
 7e8:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 7ec:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
 7f0:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 7f4:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff9f7 <spider_obj+0xdfffe9d3>
 7f8:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 7fc:	310a052e 	tstcc	sl, lr, lsr #10
 800:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 804:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 808:	0d054d02 	stceq	13, cr4, [r5, #-8]
 80c:	2e180559 	mrccs	5, 0, r0, cr8, cr9, {2}
 810:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 814:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
 818:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 81c:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 820:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
 824:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 828:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 82c:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
 830:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 834:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 838:	0a052006 	beq	148858 <startup-0x1feb77a8>
 83c:	2e16052f 	cfmul64cs	mvdx0, mvdx6, mvdx15
 840:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 844:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 848:	1d052e01 	stcne	14, cr2, [r5, #-4]
 84c:	01040200 	mrseq	r0, R12_usr
 850:	0036052e 	eorseq	r0, r6, lr, lsr #10
 854:	3c030402 	cfstrscc	mvf0, [r3], {2}
 858:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
 85c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 860:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 864:	4e052e03 	cdpmi	14, 0, cr2, cr5, cr3, {0}
 868:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 86c:	0049052e 	subeq	r0, r9, lr, lsr #10
 870:	2e050402 	cdpcs	4, 0, cr0, cr5, cr2, {0}
 874:	02006405 	andeq	r6, r0, #83886080	; 0x5000000
 878:	053c0704 	ldreq	r0, [ip, #-1796]!	; 0xfffff8fc
 87c:	04020070 	streq	r0, [r2], #-112	; 0xffffff90
 880:	5d052e07 	stcpl	14, cr2, [r5, #-28]	; 0xffffffe4
 884:	07040200 	streq	r0, [r4, -r0, lsl #4]
 888:	007c052e 	rsbseq	r0, ip, lr, lsr #10
 88c:	2e080402 	cdpcs	4, 0, cr0, cr8, cr2, {0}
 890:	02007705 	andeq	r7, r0, #1310720	; 0x140000
 894:	052e0804 	streq	r0, [lr, #-2052]!	; 0xfffff7fc
 898:	02000190 	andeq	r0, r0, #144, 2	; 0x24
 89c:	053c0904 	ldreq	r0, [ip, #-2308]!	; 0xfffff6fc
 8a0:	0200019c 	andeq	r0, r0, #156, 2	; 0x27
 8a4:	052e0904 	streq	r0, [lr, #-2308]!	; 0xfffff6fc
 8a8:	0200018a 	andeq	r0, r0, #-2147483614	; 0x80000022
 8ac:	052e0904 	streq	r0, [lr, #-2308]!	; 0xfffff6fc
 8b0:	020001a8 	andeq	r0, r0, #168, 2	; 0x2a
 8b4:	052e0a04 	streq	r0, [lr, #-2564]!	; 0xfffff5fc
 8b8:	020001a3 	andeq	r0, r0, #-1073741784	; 0xc0000028
 8bc:	052e0a04 	streq	r0, [lr, #-2564]!	; 0xfffff5fc
 8c0:	09053d0a 	stmdbeq	r5, {r1, r3, r8, sl, fp, ip, sp}
 8c4:	2202052f 	andcs	r0, r2, #197132288	; 0xbc00000
 8c8:	054d0105 	strbeq	r0, [sp, #-261]	; 0xfffffefb
 8cc:	05055908 	streq	r5, [r5, #-2312]	; 0xfffff6f8
 8d0:	0018052e 	andseq	r0, r8, lr, lsr #10
 8d4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 8d8:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 8dc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 8e0:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 8e4:	25052e02 	strcs	r2, [r5, #-3586]	; 0xfffff1fe
 8e8:	02040200 	andeq	r0, r4, #0, 4
 8ec:	003a052e 	eorseq	r0, sl, lr, lsr #10
 8f0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 8f4:	02003505 	andeq	r3, r0, #20971520	; 0x1400000
 8f8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 8fc:	0b053004 	bleq	14c914 <startup-0x1feb36ec>
 900:	3006053d 	andcc	r0, r6, sp, lsr r5
 904:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 908:	05740505 	ldrbeq	r0, [r4, #-1285]!	; 0xfffffafb
 90c:	0205210b 	andeq	r2, r5, #-1073741822	; 0xc0000002
 910:	210c052e 	tstcs	ip, lr, lsr #10
 914:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 918:	21052115 	tstcs	r5, r5, lsl r1
 91c:	7411052e 	ldrvc	r0, [r1], #-1326	; 0xfffffad2
 920:	052e3405 	streq	r3, [lr, #-1029]!	; 0xfffffbfb
 924:	30052e40 	andcc	r2, r5, r0, asr #28
 928:	2e060574 	cfrshl64cs	mvdx6, mvdx4, r0
 92c:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
 930:	052f0104 	streq	r0, [pc, #-260]!	; 834 <startup-0x1ffff7cc>
 934:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 938:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
 93c:	01040200 	mrseq	r0, R12_usr
 940:	00310574 	eorseq	r0, r1, r4, ror r5
 944:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 948:	02003d05 	andeq	r3, r0, #320	; 0x140
 94c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 950:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
 954:	44057401 	strmi	r7, [r5], #-1025	; 0xfffffbff
 958:	01040200 	mrseq	r0, R12_usr
 95c:	3104052d 	tstcc	r4, sp, lsr #10
 960:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 964:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
 968:	19052902 	stmdbne	r5, {r1, r8, fp, sp}
 96c:	01040200 	mrseq	r0, R12_usr
 970:	001f053c 	andseq	r0, pc, ip, lsr r5	; <UNPREDICTABLE>
 974:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 978:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 97c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 980:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 984:	18053b02 	stmdane	r5, {r1, r8, r9, fp, ip, sp}
 988:	01040200 	mrseq	r0, R12_usr
 98c:	001d053c 	andseq	r0, sp, ip, lsr r5
 990:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 994:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 998:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 99c:	3c090309 	stccc	3, cr0, [r9], {9}
 9a0:	4e210105 	sufmis	f0, f1, f5
 9a4:	00030232 	andeq	r0, r3, r2, lsr r2
 9a8:	006e0101 	rsbeq	r0, lr, r1, lsl #2
 9ac:	00030000 	andeq	r0, r3, r0
 9b0:	00000020 	andeq	r0, r0, r0, lsr #32
 9b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 9b8:	0101000d 	tsteq	r1, sp
 9bc:	00000101 	andeq	r0, r0, r1, lsl #2
 9c0:	00000100 	andeq	r0, r0, r0, lsl #2
 9c4:	74730001 	ldrbtvc	r0, [r3], #-1
 9c8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 9cc:	00632e70 	rsbeq	r2, r3, r0, ror lr
 9d0:	00000000 	andeq	r0, r0, r0
 9d4:	05000f05 	streq	r0, [r0, #-3845]	; 0xfffff0fb
 9d8:	00000002 	andeq	r0, r0, r2
 9dc:	02051720 	andeq	r1, r5, #32, 14	; 0x800000
 9e0:	2f212113 	svccs	0x00212113
 9e4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 9e8:	01010003 	tsteq	r1, r3
 9ec:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 9f0:	000eec02 	andeq	lr, lr, r2, lsl #24
 9f4:	010f0320 	tsteq	pc, r0, lsr #6
 9f8:	13210205 			; <UNDEFINED> instruction: 0x13210205
 9fc:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 a00:	13210205 			; <UNDEFINED> instruction: 0x13210205
 a04:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 a08:	13210205 			; <UNDEFINED> instruction: 0x13210205
 a0c:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 a10:	13210205 			; <UNDEFINED> instruction: 0x13210205
 a14:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 a18:	01010001 	tsteq	r1, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
   4:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
   8:	72746568 	rsbsvc	r6, r4, #104, 10	; 0x1a000000
   c:	442f6e61 	strtmi	r6, [pc], #-3681	; 14 <startup-0x1fffffec>
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6f6b532f 	svcvs	0x006b532f
  1c:	4d2f616c 	stfmis	f6, [pc, #-432]!	; fffffe74 <spider_obj+0xdfffee50>
  20:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffeec <spider_obj+0xdfffeec8>
  24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffef0 <spider_obj+0xdfffeecc>
  28:	37303444 	ldrcc	r3, [r0, -r4, asr #8]!
  2c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  30:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  34:	65640030 	strbvs	r0, [r4, #-48]!	; 0xffffffd0
  38:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
  3c:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
  40:	31432055 	qdaddcc	r2, r5, r3
  44:	30312037 	eorscc	r2, r1, r7, lsr r0
  48:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  4c:	32303220 	eorscc	r3, r0, #32, 4
  50:	32383031 	eorscc	r3, r8, #49	; 0x31
  54:	72282034 	eorvc	r2, r8, #52	; 0x34
  58:	61656c65 	cmnvs	r5, r5, ror #24
  5c:	20296573 	eorcs	r6, r9, r3, ror r5
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	6f6e6d2d 	svcvs	0x006e6d2d
  6c:	616e752d 	cmnvs	lr, sp, lsr #10
  70:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
  74:	612d6465 			; <UNDEFINED> instruction: 0x612d6465
  78:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
  7c:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  80:	616f6c66 	cmnvs	pc, r6, ror #24
  84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  88:	6f733d69 	svcvs	0x00733d69
  8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  90:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  94:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  98:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  9c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  a0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  a4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  a8:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  ac:	00373175 	eorseq	r3, r7, r5, ror r1
  b0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  b4:	31646573 	smccc	18003	; 0x4653
  b8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  bc:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  c0:	755f0032 	ldrbvc	r0, [pc, #-50]	; 96 <startup-0x1fffff6a>
  c4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
  c8:	5f003364 	svcpl	0x00003364
  cc:	73756e75 	cmnvc	r5, #1872	; 0x750
  d0:	00346465 	eorseq	r6, r4, r5, ror #8
  d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  d8:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
  dc:	6f687300 	svcvs	0x00687300
  e0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f0:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
  f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
  fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 100:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 104:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 110:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 114:	72640079 	rsbvc	r0, r4, #121	; 0x79
 118:	705f7761 	subsvc	r7, pc, r1, ror #14
 11c:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 120:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
 124:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 128:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 12c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 13c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 140:	00646565 	rsbeq	r6, r4, r5, ror #10
 144:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 148:	74007373 	strvc	r7, [r0], #-883	; 0xfffffc8d
 14c:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
 150:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 154:	61625f65 	cmnvs	r2, r5, ror #30
 158:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 15c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 160:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 164:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
 168:	6f436461 	svcvs	0x00436461
 16c:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 170:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 174:	6f6c0065 	svcvs	0x006c0065
 178:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 180:	00746e69 	rsbseq	r6, r4, r9, ror #28
 184:	616c6564 	cmnvs	ip, r4, ror #10
 188:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 18c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 190:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 194:	5f737463 	svcpl	0x00737463
 198:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 19c:	0070616c 	rsbseq	r6, r0, ip, ror #2
 1a0:	4c4f5050 	mcrrmi	0, 5, r5, pc, cr0
 1a4:	494f5059 	stmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
 1a8:	7400544e 	strvc	r5, [r0], #-1102	; 0xfffffbb2
 1ac:	00706d65 	rsbseq	r6, r0, r5, ror #26
 1b0:	43455250 	movtmi	r5, #21072	; 0x5250
 1b4:	73610054 	cmnvc	r1, #84	; 0x54
 1b8:	5f696963 	svcpl	0x00696963
 1bc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1c0:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1c4:	61007261 	tstvs	r0, r1, ror #4
 1c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1cc:	6165725f 	cmnvs	r5, pc, asr r2
 1d0:	6f635f64 	svcvs	0x00635f64
 1d4:	6f72746e 	svcvs	0x0072746e
 1d8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1dc:	63736100 	cmnvs	r3, #0, 2
 1e0:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 1e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1ec:	6f675f69 	svcvs	0x00675f69
 1f0:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 1f4:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 1f8:	6f5f6c65 	svcvs	0x005f6c65
 1fc:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
 200:	74007061 	strvc	r7, [r0], #-97	; 0xffffff9f
 204:	78747365 	ldmdavc	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
 208:	73657400 	cmnvc	r5, #0, 8
 20c:	6d007974 	vstrvs.16	s14, [r0, #-232]	; 0xffffff18	; <UNPREDICTABLE>
 210:	72695f79 	rsbvc	r5, r9, #484	; 0x1e4
 214:	61685f71 	smcvs	34289	; 0x85f1
 218:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 21c:	79620072 	stmdbvc	r2!, {r1, r4, r5, r6}^
 220:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
 224:	61746c65 	cmnvs	r4, r5, ror #24
 228:	6f700079 	svcvs	0x00700079
 22c:	6f67796c 	svcvs	0x0067796c
 230:	696f706e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 234:	6700746e 	strvs	r7, [r0, -lr, ror #8]
 238:	6f656d61 	svcvs	0x00656d61
 23c:	00726576 	rsbseq	r6, r2, r6, ror r5
 240:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 244:	69700079 	ldmdbvs	r0!, {r0, r3, r4, r5, r6}^
 248:	736c6578 	cmnvc	ip, #120, 10	; 0x1e000000
 24c:	69707300 	ldmdbvs	r0!, {r8, r9, ip, sp, lr}^
 250:	5f726564 	svcpl	0x00726564
 254:	006a626f 	rsbeq	r6, sl, pc, ror #4
 258:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 25c:	78317465 	ldmdavc	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}
 260:	64617000 	strbtvs	r7, [r1], #-0
 264:	78656c64 	stmdavc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 268:	64617000 	strbtvs	r7, [r1], #-0
 26c:	79656c64 	stmdbvc	r5!, {r2, r5, r6, sl, fp, sp, lr}^
 270:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 274:	6147746e 	cmpvs	r7, lr, ror #8
 278:	764f656d 	strbvc	r6, [pc], -sp, ror #10
 27c:	73007265 	movwvc	r7, #613	; 0x265
 280:	00656469 	rsbeq	r6, r5, r9, ror #8
 284:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 288:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 28c:	00776f52 	rsbseq	r6, r7, r2, asr pc
 290:	70617267 	rsbvc	r7, r1, r7, ror #4
 294:	5f636968 	svcpl	0x00636968
 298:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 29c:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 2a0:	00726165 	rsbseq	r6, r2, r5, ror #2
 2a4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2a8:	73007864 	movwvc	r7, #2148	; 0x864
 2ac:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2b0:	72670079 	rsbvc	r0, r7, #121	; 0x79
 2b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2bc:	6c617469 	cfstrdvs	mvd7, [r1], #-420	; 0xfffffe5c
 2c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
 2c4:	616c6564 	cmnvs	ip, r4, ror #10
 2c8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2cc:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 2d0:	706d756e 	rsbvc	r7, sp, lr, ror #10
 2d4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 2d8:	616d0073 	smcvs	53251	; 0xd003
 2dc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 2e0:	63736100 	cmnvs	r3, #0, 2
 2e4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 2e8:	616d6d6f 	cmnvs	sp, pc, ror #26
 2ec:	7000646e 	andvc	r6, r0, lr, ror #8
 2f0:	0078736f 	rsbseq	r7, r8, pc, ror #6
 2f4:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2f8:	61726700 	cmnvs	r2, r0, lsl #14
 2fc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 300:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 304:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 308:	63007465 	movwvs	r7, #1125	; 0x465
 30c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
 310:	00657275 	rsbeq	r7, r5, r5, ror r2
 314:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 318:	756f6420 	strbvc	r6, [pc, #-1056]!	; ffffff00 <spider_obj+0xdfffeedc>
 31c:	00656c62 	rsbeq	r6, r5, r2, ror #24
 320:	65657473 	strbvs	r7, [r5, #-1139]!	; 0xfffffb8d
 324:	4f500070 	svcmi	0x00500070
 328:	43454a42 	movtmi	r4, #23106	; 0x5a42
 32c:	6f6d0054 	svcvs	0x006d0054
 330:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 334:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 338:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 33c:	50006279 	andpl	r6, r0, r9, ror r2
 340:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
 344:	45475000 	strbmi	r5, [r7, #-0]
 348:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 34c:	63005952 	movwvs	r5, #2386	; 0x952
 350:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 354:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 358:	6a626f6c 	bvs	189c110 <startup-0x1e763ef0>
 35c:	00746365 	rsbseq	r6, r4, r5, ror #6
 360:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 364:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 368:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 36c:	6a626f6c 	bvs	189c124 <startup-0x1e763edc>
 370:	5f746365 	svcpl	0x00746365
 374:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 378:	73610064 	cmnvc	r1, #100	; 0x64
 37c:	5f696963 	svcpl	0x00696963
 380:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 384:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 388:	77730061 	ldrbvc	r0, [r3, -r1, rrx]!
 38c:	61007061 	tstvs	r0, r1, rrx
 390:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 394:	6165725f 	cmnvs	r5, pc, asr r2
 398:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 39c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 3a0:	72726500 	rsbsvc	r6, r2, #0, 10
 3a4:	6100726f 	tstvs	r0, pc, ror #4
 3a8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3ac:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3b0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3b4:	6200646d 	andvs	r6, r0, #1828716544	; 0x6d000000
 3b8:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
 3bc:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
 3c0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 3c4:	63206465 			; <UNDEFINED> instruction: 0x63206465
 3c8:	00726168 	rsbseq	r6, r2, r8, ror #2
 3cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 3d0:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 3d4:	6f6d0074 	svcvs	0x006d0074
 3d8:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
 3dc:	65646970 	strbvs	r6, [r4, #-2416]!	; 0xfffff690
 3e0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 3e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3e8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 3ec:	5f726165 	svcpl	0x00726165
 3f0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 3f4:	79006e65 	stmdbvc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
 3f8:	70657473 	rsbvc	r7, r5, r3, ror r4
 3fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 400:	00786174 	rsbseq	r6, r8, r4, ror r1
 404:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 408:	6f65675f 	svcvs	0x0065675f
 40c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 410:	61620079 	smcvs	8201	; 0x2009
 414:	00786c6c 	rsbseq	r6, r8, ip, ror #24
 418:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 41c:	79317465 	ldmdbvc	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}
 420:	72696400 	rsbvc	r6, r9, #0, 8
 424:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 428:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 42c:	5f776172 	svcpl	0x00776172
 430:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 434:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 438:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 43c:	5f776172 	svcpl	0x00776172
 440:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
 444:	63736100 	cmnvs	r3, #0, 2
 448:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 44c:	5f6c7274 	svcpl	0x006c7274
 450:	5f746962 	svcpl	0x00746962
 454:	61656c63 	cmnvs	r5, r3, ror #24
 458:	72640072 	rsbvc	r0, r4, #114	; 0x72
 45c:	725f7761 	subsvc	r7, pc, #25427968	; 0x1840000
 460:	61746365 	cmnvs	r4, r5, ror #6
 464:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 468:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 46c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 470:	69760070 	ldmdbvs	r6!, {r4, r5, r6}^
 474:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
 478:	624f7400 	subvs	r7, pc, #0, 8
 47c:	7361006a 	cmnvc	r1, #106	; 0x6a
 480:	5f696963 	svcpl	0x00696963
 484:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 488:	61645f65 	cmnvs	r4, r5, ror #30
 48c:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
 490:	31747365 	cmncc	r4, r5, ror #6
 494:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 498:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 3de <startup-0x1ffffc22>	; <UNPREDICTABLE>
 49c:	6f726369 	svcvs	0x00726369
 4a0:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 4a4:	32746573 	rsbscc	r6, r4, #482344960	; 0x1cc00000
 4a8:	666f0078 			; <UNDEFINED> instruction: 0x666f0078
 4ac:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
 4b0:	64007932 	strvs	r7, [r0], #-2354	; 0xfffff6ce
 4b4:	00776172 	rsbseq	r6, r7, r2, ror r1
 4b8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 4bc:	6f5f656c 	svcvs	0x005f656c
 4c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4c4:	73610074 	cmnvc	r1, #116	; 0x74
 4c8:	5f696963 	svcpl	0x00696963
 4cc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 4d0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4d4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 4d8:	7a697300 	bvc	1a5d0e0 <startup-0x1e5a2f20>
 4dc:	73007865 	movwvc	r7, #2149	; 0x865
 4e0:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 4e4:	61747300 	cmnvs	r4, r0, lsl #6
 4e8:	6d007472 	cfstrsvs	mvf7, [r0, #-456]	; 0xfffffe38
 4ec:	006e6961 	rsbeq	r6, lr, r1, ror #18
 4f0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4f4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4f8:	5f657469 	svcpl	0x00657469
 4fc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 500:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 504:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
 508:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 50c:	70730074 	rsbsvc	r0, r3, r4, ror r0
 510:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
 514:	6f65675f 	svcvs	0x0065675f
 518:	61747300 	cmnvs	r4, r0, lsl #6
 51c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 520:	7300632e 	movwvc	r6, #814	; 0x32e
 524:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 528:	Address 0x0000000000000528 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000050 	andcs	r0, r0, r0, asr r0
  3c:	0000002a 	andeq	r0, r0, sl, lsr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	2000007c 	andcs	r0, r0, ip, ror r0
  6c:	000000e0 	andeq	r0, r0, r0, ror #1
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	200e4101 	andcs	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	2000015c 	andcs	r0, r0, ip, asr r1
  8c:	0000006c 	andeq	r0, r0, ip, rrx
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	200001c8 	andcs	r0, r0, r8, asr #3
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	2000020c 	andcs	r0, r0, ip, lsl #4
  c4:	00000036 	andeq	r0, r0, r6, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	20000242 	andcs	r0, r0, r2, asr #4
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	20000266 	andcs	r0, r0, r6, ror #4
 104:	00000052 	andeq	r0, r0, r2, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 124:	00000054 	andeq	r0, r0, r4, asr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000050 	andeq	r0, r0, r0, asr r0
 140:	2000030c 	andcs	r0, r0, ip, lsl #6
 144:	00000068 	andeq	r0, r0, r8, rrx
 148:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 14c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 150:	280e4101 	stmdacs	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	20000374 	andcs	r0, r0, r4, ror r3
 164:	00000038 	andeq	r0, r0, r8, lsr r0
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000050 	andeq	r0, r0, r0, asr r0
 180:	200003ac 	andcs	r0, r0, ip, lsr #7
 184:	00000048 	andeq	r0, r0, r8, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	200003f4 	strdcs	r0, [r0], -r4
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
 1c0:	2000042c 	andcs	r0, r0, ip, lsr #8
 1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	20000456 	andcs	r0, r0, r6, asr r4
 1e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000050 	andeq	r0, r0, r0, asr r0
 200:	20000480 	andcs	r0, r0, r0, lsl #9
 204:	00000034 	andeq	r0, r0, r4, lsr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 224:	00000040 	andeq	r0, r0, r0, asr #32
 228:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 22c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 230:	180e4101 	stmdane	lr, {r0, r8, lr}
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000050 	andeq	r0, r0, r0, asr r0
 240:	200004f4 	strdcs	r0, [r0], -r4
 244:	00000040 	andeq	r0, r0, r0, asr #32
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000050 	andeq	r0, r0, r0, asr r0
 260:	20000534 	andcs	r0, r0, r4, lsr r5
 264:	0000003c 	andeq	r0, r0, ip, lsr r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000050 	andeq	r0, r0, r0, asr r0
 280:	20000570 	andcs	r0, r0, r0, ror r5
 284:	00000022 	andeq	r0, r0, r2, lsr #32
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000050 	andeq	r0, r0, r0, asr r0
 29c:	20000592 	mulcs	r0, r2, r5
 2a0:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a8:	41018e02 	tstmi	r1, r2, lsl #28
 2ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b0:	00000007 	andeq	r0, r0, r7
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000050 	andeq	r0, r0, r0, asr r0
 2bc:	200005ce 	andcs	r0, r0, lr, asr #11
 2c0:	00000042 	andeq	r0, r0, r2, asr #32
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000050 	andeq	r0, r0, r0, asr r0
 2dc:	20000610 	andcs	r0, r0, r0, lsl r6
 2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e8:	41018e02 	tstmi	r1, r2, lsl #28
 2ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2f0:	00000007 	andeq	r0, r0, r7
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000050 	andeq	r0, r0, r0, asr r0
 2fc:	2000063c 	andcs	r0, r0, ip, lsr r6
 300:	000001f6 	strdeq	r0, [r0], -r6
 304:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 308:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 30c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	00000020 	andeq	r0, r0, r0, lsr #32
 318:	00000050 	andeq	r0, r0, r0, asr r0
 31c:	20000832 	andcs	r0, r0, r2, lsr r8
 320:	0000014a 	andeq	r0, r0, sl, asr #2
 324:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 328:	86048505 	strhi	r8, [r4], -r5, lsl #10
 32c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 330:	300e4101 	andcc	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	00000050 	andeq	r0, r0, r0, asr r0
 340:	2000097c 	andcs	r0, r0, ip, ror r9
 344:	00000088 	andeq	r0, r0, r8, lsl #1
 348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 34c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 358:	00000007 	andeq	r0, r0, r7
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	00000050 	andeq	r0, r0, r0, asr r0
 364:	20000a04 	andcs	r0, r0, r4, lsl #20
 368:	00000090 	muleq	r0, r0, r0
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000050 	andeq	r0, r0, r0, asr r0
 384:	20000a94 	mulcs	r0, r4, sl
 388:	00000060 	andeq	r0, r0, r0, rrx
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000050 	andeq	r0, r0, r0, asr r0
 3a4:	20000af4 	strdcs	r0, [r0], -r4
 3a8:	000000bc 	strheq	r0, [r0], -ip
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b8:	00000007 	andeq	r0, r0, r7
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000050 	andeq	r0, r0, r0, asr r0
 3c4:	20000bb0 			; <UNDEFINED> instruction: 0x20000bb0
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d8:	00000007 	andeq	r0, r0, r7
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000050 	andeq	r0, r0, r0, asr r0
 3e4:	20000bd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3e8:	0000003e 	andeq	r0, r0, lr, lsr r0
 3ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f0:	41018e02 	tstmi	r1, r2, lsl #28
 3f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f8:	00000007 	andeq	r0, r0, r7
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000050 	andeq	r0, r0, r0, asr r0
 404:	20000c0e 	andcs	r0, r0, lr, lsl #24
 408:	00000062 	andeq	r0, r0, r2, rrx
 40c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 410:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 414:	300e4101 	andcc	r4, lr, r1, lsl #2
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	00000020 	andeq	r0, r0, r0, lsr #32
 420:	00000050 	andeq	r0, r0, r0, asr r0
 424:	20000c70 	andcs	r0, r0, r0, ror ip
 428:	00000068 	andeq	r0, r0, r8, rrx
 42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 430:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 43c:	00000007 	andeq	r0, r0, r7
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000050 	andeq	r0, r0, r0, asr r0
 448:	20000cd8 	ldrdcs	r0, [r0], -r8
 44c:	0000001e 	andeq	r0, r0, lr, lsl r0
 450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 454:	41018e02 	tstmi	r1, r2, lsl #28
 458:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 45c:	00000007 	andeq	r0, r0, r7
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000050 	andeq	r0, r0, r0, asr r0
 468:	20000cf6 	strdcs	r0, [r0], -r6
 46c:	00000044 	andeq	r0, r0, r4, asr #32
 470:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 474:	41018e02 	tstmi	r1, r2, lsl #28
 478:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 47c:	00000007 	andeq	r0, r0, r7
 480:	0000001c 	andeq	r0, r0, ip, lsl r0
 484:	00000050 	andeq	r0, r0, r0, asr r0
 488:	20000d3a 	andcs	r0, r0, sl, lsr sp
 48c:	000000a8 	andeq	r0, r0, r8, lsr #1
 490:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 494:	41018e02 	tstmi	r1, r2, lsl #28
 498:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 49c:	00000007 	andeq	r0, r0, r7
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	00000050 	andeq	r0, r0, r0, asr r0
 4a8:	20000de2 	andcs	r0, r0, r2, ror #27
 4ac:	00000100 	andeq	r0, r0, r0, lsl #2
 4b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b4:	41018e02 	tstmi	r1, r2, lsl #28
 4b8:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 4bc:	00000007 	andeq	r0, r0, r7
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	00000050 	andeq	r0, r0, r0, asr r0
 4c8:	20000ee2 	andcs	r0, r0, r2, ror #29
 4cc:	0000000a 	andeq	r0, r0, sl
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	000004dc 	ldrdeq	r0, [r0], -ip
 4f4:	20000000 	andcs	r0, r0, r0
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	0000000c 	andeq	r0, r0, ip
 500:	000004dc 	ldrdeq	r0, [r0], -ip
 504:	20000eec 	andcs	r0, r0, ip, ror #29
 508:	00000006 	andeq	r0, r0, r6
 50c:	0000000c 	andeq	r0, r0, ip
 510:	000004dc 	ldrdeq	r0, [r0], -ip
 514:	20000ef2 	strdcs	r0, [r0], -r2
 518:	00000006 	andeq	r0, r0, r6
 51c:	0000000c 	andeq	r0, r0, ip
 520:	000004dc 	ldrdeq	r0, [r0], -ip
 524:	20000ef8 	strdcs	r0, [r0], -r8
 528:	00000006 	andeq	r0, r0, r6
 52c:	0000000c 	andeq	r0, r0, ip
 530:	000004dc 	ldrdeq	r0, [r0], -ip
 534:	20000efe 	strdcs	r0, [r0], -lr
 538:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000eec 	andcs	r0, r0, ip, ror #29
   4:	20000f04 	andcs	r0, r0, r4, lsl #30
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
