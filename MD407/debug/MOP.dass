
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 f83a 	bl	2000007c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
2000001c:	46c0      	nop			; (mov r8, r8)
2000001e:	4b0b      	ldr	r3, [pc, #44]	; (2000004c <print_char+0x3c>)
20000020:	881b      	ldrh	r3, [r3, #0]
20000022:	b29b      	uxth	r3, r3
20000024:	001a      	movs	r2, r3
20000026:	2380      	movs	r3, #128	; 0x80
20000028:	4013      	ands	r3, r2
2000002a:	d0f8      	beq.n	2000001e <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
2000002c:	4a07      	ldr	r2, [pc, #28]	; (2000004c <print_char+0x3c>)
2000002e:	1dfb      	adds	r3, r7, #7
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b29b      	uxth	r3, r3
20000034:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
20000036:	1dfb      	adds	r3, r7, #7
20000038:	781b      	ldrb	r3, [r3, #0]
2000003a:	2b0a      	cmp	r3, #10
2000003c:	d102      	bne.n	20000044 <print_char+0x34>
		print_char('\r');
2000003e:	200d      	movs	r0, #13
20000040:	f7ff ffe6 	bl	20000010 <print_char>
	}
}
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	46bd      	mov	sp, r7
20000048:	b002      	add	sp, #8
2000004a:	bd80      	pop	{r7, pc}
2000004c:	40011000 	andmi	r1, r1, r0

20000050 <print>:

void print(char *s) {
20000050:	b580      	push	{r7, lr}
20000052:	b082      	sub	sp, #8
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000058:	e006      	b.n	20000068 <print+0x18>
		print_char(*(s++));
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	1c5a      	adds	r2, r3, #1
2000005e:	607a      	str	r2, [r7, #4]
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	0018      	movs	r0, r3
20000064:	f7ff ffd4 	bl	20000010 <print_char>
	while (*s != '\0') {
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	781b      	ldrb	r3, [r3, #0]
2000006c:	2b00      	cmp	r3, #0
2000006e:	d1f4      	bne.n	2000005a <print+0xa>
	}
}
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	46bd      	mov	sp, r7
20000076:	b002      	add	sp, #8
20000078:	bd80      	pop	{r7, pc}
2000007a:	46c0      	nop			; (mov r8, r8)

2000007c <main>:

// Lab 4
void my_irq_handler(void);

void main(void)
{
2000007c:	b590      	push	{r4, r7, lr}
2000007e:	b091      	sub	sp, #68	; 0x44
20000080:	af00      	add	r7, sp, #0
	graphic_initalize();
20000082:	f000 fbff 	bl	20000884 <graphic_initalize>
	graphic_clear_screen();
20000086:	f000 fc00 	bl	2000088a <graphic_clear_screen>
	
	POLYPOINT pg8 = {20, 20, 0};
2000008a:	2038      	movs	r0, #56	; 0x38
2000008c:	183b      	adds	r3, r7, r0
2000008e:	4a28      	ldr	r2, [pc, #160]	; (20000130 <main+0xb4>)
20000090:	ca12      	ldmia	r2!, {r1, r4}
20000092:	c312      	stmia	r3!, {r1, r4}
	POLYPOINT pg7 = {20, 55, &pg8};
20000094:	2130      	movs	r1, #48	; 0x30
20000096:	187b      	adds	r3, r7, r1
20000098:	2214      	movs	r2, #20
2000009a:	701a      	strb	r2, [r3, #0]
2000009c:	187b      	adds	r3, r7, r1
2000009e:	2237      	movs	r2, #55	; 0x37
200000a0:	705a      	strb	r2, [r3, #1]
200000a2:	187b      	adds	r3, r7, r1
200000a4:	183a      	adds	r2, r7, r0
200000a6:	605a      	str	r2, [r3, #4]
	POLYPOINT pg6 = {70, 60, &pg7};
200000a8:	2028      	movs	r0, #40	; 0x28
200000aa:	183b      	adds	r3, r7, r0
200000ac:	2246      	movs	r2, #70	; 0x46
200000ae:	701a      	strb	r2, [r3, #0]
200000b0:	183b      	adds	r3, r7, r0
200000b2:	223c      	movs	r2, #60	; 0x3c
200000b4:	705a      	strb	r2, [r3, #1]
200000b6:	183b      	adds	r3, r7, r0
200000b8:	187a      	adds	r2, r7, r1
200000ba:	605a      	str	r2, [r3, #4]
	POLYPOINT pg5 = {80, 35, &pg6};
200000bc:	2120      	movs	r1, #32
200000be:	187b      	adds	r3, r7, r1
200000c0:	2250      	movs	r2, #80	; 0x50
200000c2:	701a      	strb	r2, [r3, #0]
200000c4:	187b      	adds	r3, r7, r1
200000c6:	2223      	movs	r2, #35	; 0x23
200000c8:	705a      	strb	r2, [r3, #1]
200000ca:	187b      	adds	r3, r7, r1
200000cc:	183a      	adds	r2, r7, r0
200000ce:	605a      	str	r2, [r3, #4]
	POLYPOINT pg4 = {100, 25, &pg5};
200000d0:	2018      	movs	r0, #24
200000d2:	183b      	adds	r3, r7, r0
200000d4:	2264      	movs	r2, #100	; 0x64
200000d6:	701a      	strb	r2, [r3, #0]
200000d8:	183b      	adds	r3, r7, r0
200000da:	2219      	movs	r2, #25
200000dc:	705a      	strb	r2, [r3, #1]
200000de:	183b      	adds	r3, r7, r0
200000e0:	187a      	adds	r2, r7, r1
200000e2:	605a      	str	r2, [r3, #4]
	POLYPOINT pg3 = {90, 10, &pg4};
200000e4:	2110      	movs	r1, #16
200000e6:	187b      	adds	r3, r7, r1
200000e8:	225a      	movs	r2, #90	; 0x5a
200000ea:	701a      	strb	r2, [r3, #0]
200000ec:	187b      	adds	r3, r7, r1
200000ee:	220a      	movs	r2, #10
200000f0:	705a      	strb	r2, [r3, #1]
200000f2:	187b      	adds	r3, r7, r1
200000f4:	183a      	adds	r2, r7, r0
200000f6:	605a      	str	r2, [r3, #4]
	POLYPOINT pg2 = {40, 10, &pg3};
200000f8:	2008      	movs	r0, #8
200000fa:	183b      	adds	r3, r7, r0
200000fc:	2228      	movs	r2, #40	; 0x28
200000fe:	701a      	strb	r2, [r3, #0]
20000100:	183b      	adds	r3, r7, r0
20000102:	220a      	movs	r2, #10
20000104:	705a      	strb	r2, [r3, #1]
20000106:	183b      	adds	r3, r7, r0
20000108:	187a      	adds	r2, r7, r1
2000010a:	605a      	str	r2, [r3, #4]
	POLYPOINT pg1 = {20, 20, &pg2};
2000010c:	003b      	movs	r3, r7
2000010e:	2214      	movs	r2, #20
20000110:	701a      	strb	r2, [r3, #0]
20000112:	003b      	movs	r3, r7
20000114:	2214      	movs	r2, #20
20000116:	705a      	strb	r2, [r3, #1]
20000118:	003b      	movs	r3, r7
2000011a:	183a      	adds	r2, r7, r0
2000011c:	605a      	str	r2, [r3, #4]
	while(1)
	{
		// Resetting the values everytime it runs because sometimes it might change some values. 
		while (1)
		{
			draw_polygon(&pg1);
2000011e:	003b      	movs	r3, r7
20000120:	0018      	movs	r0, r3
20000122:	f000 fb65 	bl	200007f0 <draw_polygon>
			delay_milli(2);
20000126:	2002      	movs	r0, #2
20000128:	f000 f84b 	bl	200001c2 <delay_milli>
			draw_polygon(&pg1);
2000012c:	e7f7      	b.n	2000011e <main+0xa2>
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	2000089c 	mulcs	r0, ip, r8

20000134 <init_app>:
	}	

}

void init_app(void)
{
20000134:	b580      	push	{r7, lr}
20000136:	af00      	add	r7, sp, #0
	// Need to intials the outport 
	*((unsigned long *) 0x40023830) = 0x18;
20000138:	4b02      	ldr	r3, [pc, #8]	; (20000144 <init_app+0x10>)
2000013a:	2218      	movs	r2, #24
2000013c:	601a      	str	r2, [r3, #0]

}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	46bd      	mov	sp, r7
20000142:	bd80      	pop	{r7, pc}
20000144:	40023830 	andmi	r3, r2, r0, lsr r8

20000148 <delay_250ns>:

// ------------------------------------------------------- DELAYS ------------------------------------------------------------------------------- //
void delay_250ns(void)
{
20000148:	b580      	push	{r7, lr}
2000014a:	af00      	add	r7, sp, #0
	// page 98
	*STK_CTRL = 0; // Resets SysTick
2000014c:	4b0c      	ldr	r3, [pc, #48]	; (20000180 <delay_250ns+0x38>)
2000014e:	2200      	movs	r2, #0
20000150:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 / 4) - 1; // Minus 1 comes from how to processor counts 
20000152:	4b0c      	ldr	r3, [pc, #48]	; (20000184 <delay_250ns+0x3c>)
20000154:	2229      	movs	r2, #41	; 0x29
20000156:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0; // Resets counter register 
20000158:	4b0b      	ldr	r3, [pc, #44]	; (20000188 <delay_250ns+0x40>)
2000015a:	2200      	movs	r2, #0
2000015c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5; // Starts the count down 
2000015e:	4b08      	ldr	r3, [pc, #32]	; (20000180 <delay_250ns+0x38>)
20000160:	2205      	movs	r2, #5
20000162:	601a      	str	r2, [r3, #0]
	while(*STK_CTRL & 0x00010000){} // while the countflag is 1 
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	4b06      	ldr	r3, [pc, #24]	; (20000180 <delay_250ns+0x38>)
20000168:	681a      	ldr	r2, [r3, #0]
2000016a:	2380      	movs	r3, #128	; 0x80
2000016c:	025b      	lsls	r3, r3, #9
2000016e:	4013      	ands	r3, r2
20000170:	d1f9      	bne.n	20000166 <delay_250ns+0x1e>
	*STK_CTRL = 0; // resets Systick 
20000172:	4b03      	ldr	r3, [pc, #12]	; (20000180 <delay_250ns+0x38>)
20000174:	2200      	movs	r2, #0
20000176:	601a      	str	r2, [r3, #0]
}
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	bd80      	pop	{r7, pc}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	e000e010 	and	lr, r0, r0, lsl r0
20000184:	e000e014 	and	lr, r0, r4, lsl r0
20000188:	e000e018 	and	lr, r0, r8, lsl r0

2000018c <delay_micro>:

void delay_micro(unsigned int ms)
{
2000018c:	b580      	push	{r7, lr}
2000018e:	b084      	sub	sp, #16
20000190:	af00      	add	r7, sp, #0
20000192:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	// 4 * 250 ns = 1 Âµs
	for (int i = 0; i < ms; i++)
20000194:	2300      	movs	r3, #0
20000196:	60fb      	str	r3, [r7, #12]
20000198:	e00a      	b.n	200001b0 <delay_micro+0x24>
	{
		delay_250ns();
2000019a:	f7ff ffd5 	bl	20000148 <delay_250ns>
		delay_250ns();
2000019e:	f7ff ffd3 	bl	20000148 <delay_250ns>
		delay_250ns();
200001a2:	f7ff ffd1 	bl	20000148 <delay_250ns>
		delay_250ns();
200001a6:	f7ff ffcf 	bl	20000148 <delay_250ns>
	for (int i = 0; i < ms; i++)
200001aa:	68fb      	ldr	r3, [r7, #12]
200001ac:	3301      	adds	r3, #1
200001ae:	60fb      	str	r3, [r7, #12]
200001b0:	68fb      	ldr	r3, [r7, #12]
200001b2:	687a      	ldr	r2, [r7, #4]
200001b4:	429a      	cmp	r2, r3
200001b6:	d8f0      	bhi.n	2000019a <delay_micro+0xe>
	}

}
200001b8:	46c0      	nop			; (mov r8, r8)
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	46bd      	mov	sp, r7
200001be:	b004      	add	sp, #16
200001c0:	bd80      	pop	{r7, pc}

200001c2 <delay_milli>:

void delay_milli(unsigned int ms)
{
200001c2:	b580      	push	{r7, lr}
200001c4:	b082      	sub	sp, #8
200001c6:	af00      	add	r7, sp, #0
200001c8:	6078      	str	r0, [r7, #4]
		ms = ms / 1000;
		ms++;
	#endif
	// 1000 Âµs = 1 ms 
	
	delay_micro(ms * 1000);
200001ca:	687a      	ldr	r2, [r7, #4]
200001cc:	0013      	movs	r3, r2
200001ce:	015b      	lsls	r3, r3, #5
200001d0:	1a9b      	subs	r3, r3, r2
200001d2:	009b      	lsls	r3, r3, #2
200001d4:	189b      	adds	r3, r3, r2
200001d6:	00db      	lsls	r3, r3, #3
200001d8:	0018      	movs	r0, r3
200001da:	f7ff ffd7 	bl	2000018c <delay_micro>
}
200001de:	46c0      	nop			; (mov r8, r8)
200001e0:	46bd      	mov	sp, r7
200001e2:	b002      	add	sp, #8
200001e4:	bd80      	pop	{r7, pc}

200001e6 <ascii_ctrl_bit_set>:

// ------------------------------------------------------- ASCII DISPLAY ------------------------------------------------------------------------------- //
// B_SELECT is needed here to activate the ascii display
void ascii_ctrl_bit_set(char x)
{
200001e6:	b580      	push	{r7, lr}
200001e8:	b084      	sub	sp, #16
200001ea:	af00      	add	r7, sp, #0
200001ec:	0002      	movs	r2, r0
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
200001f2:	4a0a      	ldr	r2, [pc, #40]	; (2000021c <ascii_ctrl_bit_set+0x36>)
200001f4:	210f      	movs	r1, #15
200001f6:	187b      	adds	r3, r7, r1
200001f8:	7812      	ldrb	r2, [r2, #0]
200001fa:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
200001fc:	1dfa      	adds	r2, r7, #7
200001fe:	187b      	adds	r3, r7, r1
20000200:	7812      	ldrb	r2, [r2, #0]
20000202:	781b      	ldrb	r3, [r3, #0]
20000204:	4313      	orrs	r3, r2
20000206:	b2db      	uxtb	r3, r3
20000208:	4a04      	ldr	r2, [pc, #16]	; (2000021c <ascii_ctrl_bit_set+0x36>)
2000020a:	2104      	movs	r1, #4
2000020c:	430b      	orrs	r3, r1
2000020e:	b2db      	uxtb	r3, r3
20000210:	7013      	strb	r3, [r2, #0]
}
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	46bd      	mov	sp, r7
20000216:	b004      	add	sp, #16
20000218:	bd80      	pop	{r7, pc}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	40021014 	andmi	r1, r2, r4, lsl r0

20000220 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x)
{
20000220:	b580      	push	{r7, lr}
20000222:	b084      	sub	sp, #16
20000224:	af00      	add	r7, sp, #0
20000226:	0002      	movs	r2, r0
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
2000022c:	4a0d      	ldr	r2, [pc, #52]	; (20000264 <ascii_ctrl_bit_clear+0x44>)
2000022e:	210f      	movs	r1, #15
20000230:	187b      	adds	r3, r7, r1
20000232:	7812      	ldrb	r2, [r2, #0]
20000234:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000236:	1dfb      	adds	r3, r7, #7
20000238:	781b      	ldrb	r3, [r3, #0]
2000023a:	b25b      	sxtb	r3, r3
2000023c:	43db      	mvns	r3, r3
2000023e:	b25b      	sxtb	r3, r3
20000240:	187a      	adds	r2, r7, r1
20000242:	7812      	ldrb	r2, [r2, #0]
20000244:	b252      	sxtb	r2, r2
20000246:	4013      	ands	r3, r2
20000248:	b25a      	sxtb	r2, r3
2000024a:	187b      	adds	r3, r7, r1
2000024c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
2000024e:	4a05      	ldr	r2, [pc, #20]	; (20000264 <ascii_ctrl_bit_clear+0x44>)
20000250:	187b      	adds	r3, r7, r1
20000252:	781b      	ldrb	r3, [r3, #0]
20000254:	2104      	movs	r1, #4
20000256:	430b      	orrs	r3, r1
20000258:	b2db      	uxtb	r3, r3
2000025a:	7013      	strb	r3, [r2, #0]
}
2000025c:	46c0      	nop			; (mov r8, r8)
2000025e:	46bd      	mov	sp, r7
20000260:	b004      	add	sp, #16
20000262:	bd80      	pop	{r7, pc}
20000264:	40021014 	andmi	r1, r2, r4, lsl r0

20000268 <ascii_write_controller>:

// The commented time is the required time for MD407 to perform a certain task. More time doens't affect anything only less time. 
void ascii_write_controller(unsigned char byte)
{
20000268:	b580      	push	{r7, lr}
2000026a:	b082      	sub	sp, #8
2000026c:	af00      	add	r7, sp, #0
2000026e:	0002      	movs	r2, r0
20000270:	1dfb      	adds	r3, r7, #7
20000272:	701a      	strb	r2, [r3, #0]
	// These delays are need for the processor to execute the respective functions.
	delay_250ns(); // 40ns
20000274:	f7ff ff68 	bl	20000148 <delay_250ns>
	ascii_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ffb4 	bl	200001e6 <ascii_ctrl_bit_set>
	*portOdrHigh = byte;
2000027e:	4a07      	ldr	r2, [pc, #28]	; (2000029c <ascii_write_controller+0x34>)
20000280:	1dfb      	adds	r3, r7, #7
20000282:	781b      	ldrb	r3, [r3, #0]
20000284:	7013      	strb	r3, [r2, #0]
	delay_250ns(); //230ns
20000286:	f7ff ff5f 	bl	20000148 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000028a:	2040      	movs	r0, #64	; 0x40
2000028c:	f7ff ffc8 	bl	20000220 <ascii_ctrl_bit_clear>
	delay_250ns(); // 10ns 
20000290:	f7ff ff5a 	bl	20000148 <delay_250ns>
}
20000294:	46c0      	nop			; (mov r8, r8)
20000296:	46bd      	mov	sp, r7
20000298:	b002      	add	sp, #8
2000029a:	bd80      	pop	{r7, pc}
2000029c:	40021015 	andmi	r1, r2, r5, lsl r0

200002a0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
200002a0:	b580      	push	{r7, lr}
200002a2:	b082      	sub	sp, #8
200002a4:	af00      	add	r7, sp, #0
200002a6:	0002      	movs	r2, r0
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200002ac:	2001      	movs	r0, #1
200002ae:	f7ff ffb7 	bl	20000220 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200002b2:	2002      	movs	r0, #2
200002b4:	f7ff ffb4 	bl	20000220 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	781b      	ldrb	r3, [r3, #0]
200002bc:	0018      	movs	r0, r3
200002be:	f7ff ffd3 	bl	20000268 <ascii_write_controller>
}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	46bd      	mov	sp, r7
200002c6:	b002      	add	sp, #8
200002c8:	bd80      	pop	{r7, pc}

200002ca <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
200002ca:	b580      	push	{r7, lr}
200002cc:	b082      	sub	sp, #8
200002ce:	af00      	add	r7, sp, #0
200002d0:	0002      	movs	r2, r0
200002d2:	1dfb      	adds	r3, r7, #7
200002d4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200002d6:	2001      	movs	r0, #1
200002d8:	f7ff ff85 	bl	200001e6 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200002dc:	2002      	movs	r0, #2
200002de:	f7ff ff9f 	bl	20000220 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200002e2:	1dfb      	adds	r3, r7, #7
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	0018      	movs	r0, r3
200002e8:	f7ff ffbe 	bl	20000268 <ascii_write_controller>
}
200002ec:	46c0      	nop			; (mov r8, r8)
200002ee:	46bd      	mov	sp, r7
200002f0:	b002      	add	sp, #8
200002f2:	bd80      	pop	{r7, pc}

200002f4 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
200002f4:	b580      	push	{r7, lr}
200002f6:	b082      	sub	sp, #8
200002f8:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
200002fa:	2040      	movs	r0, #64	; 0x40
200002fc:	f7ff ff73 	bl	200001e6 <ascii_ctrl_bit_set>
	delay_250ns();
20000300:	f7ff ff22 	bl	20000148 <delay_250ns>
	delay_250ns(); // 360ns
20000304:	f7ff ff20 	bl	20000148 <delay_250ns>
	unsigned char rv = *portIdrHigh;
20000308:	4a06      	ldr	r2, [pc, #24]	; (20000324 <ascii_read_controller+0x30>)
2000030a:	1dfb      	adds	r3, r7, #7
2000030c:	7812      	ldrb	r2, [r2, #0]
2000030e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000310:	2040      	movs	r0, #64	; 0x40
20000312:	f7ff ff85 	bl	20000220 <ascii_ctrl_bit_clear>
	return rv;
20000316:	1dfb      	adds	r3, r7, #7
20000318:	781b      	ldrb	r3, [r3, #0]
}
2000031a:	0018      	movs	r0, r3
2000031c:	46bd      	mov	sp, r7
2000031e:	b002      	add	sp, #8
20000320:	bd80      	pop	{r7, pc}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	40021011 	andmi	r1, r2, r1, lsl r0

20000328 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
20000328:	b590      	push	{r4, r7, lr}
2000032a:	b083      	sub	sp, #12
2000032c:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
2000032e:	4b0b      	ldr	r3, [pc, #44]	; (2000035c <ascii_read_status+0x34>)
20000330:	4a0b      	ldr	r2, [pc, #44]	; (20000360 <ascii_read_status+0x38>)
20000332:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000334:	2001      	movs	r0, #1
20000336:	f7ff ff73 	bl	20000220 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000033a:	2002      	movs	r0, #2
2000033c:	f7ff ff53 	bl	200001e6 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000340:	1dfc      	adds	r4, r7, #7
20000342:	f7ff ffd7 	bl	200002f4 <ascii_read_controller>
20000346:	0003      	movs	r3, r0
20000348:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output
2000034a:	4b04      	ldr	r3, [pc, #16]	; (2000035c <ascii_read_status+0x34>)
2000034c:	4a05      	ldr	r2, [pc, #20]	; (20000364 <ascii_read_status+0x3c>)
2000034e:	601a      	str	r2, [r3, #0]
	return rv;
20000350:	1dfb      	adds	r3, r7, #7
20000352:	781b      	ldrb	r3, [r3, #0]
}
20000354:	0018      	movs	r0, r3
20000356:	46bd      	mov	sp, r7
20000358:	b003      	add	sp, #12
2000035a:	bd90      	pop	{r4, r7, pc}
2000035c:	40021000 	andmi	r1, r2, r0
20000360:	00005555 	andeq	r5, r0, r5, asr r5
20000364:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000368 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
20000368:	b590      	push	{r4, r7, lr}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
	*portModer = 0x00005555; // Set bit15-8 as input 
2000036e:	4b0b      	ldr	r3, [pc, #44]	; (2000039c <ascii_read_data+0x34>)
20000370:	4a0b      	ldr	r2, [pc, #44]	; (200003a0 <ascii_read_data+0x38>)
20000372:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000374:	2001      	movs	r0, #1
20000376:	f7ff ff36 	bl	200001e6 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000037a:	2002      	movs	r0, #2
2000037c:	f7ff ff33 	bl	200001e6 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000380:	1dfc      	adds	r4, r7, #7
20000382:	f7ff ffb7 	bl	200002f4 <ascii_read_controller>
20000386:	0003      	movs	r3, r0
20000388:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555; // Set bit15-8 as output 
2000038a:	4b04      	ldr	r3, [pc, #16]	; (2000039c <ascii_read_data+0x34>)
2000038c:	4a05      	ldr	r2, [pc, #20]	; (200003a4 <ascii_read_data+0x3c>)
2000038e:	601a      	str	r2, [r3, #0]
	return rv;
20000390:	1dfb      	adds	r3, r7, #7
20000392:	781b      	ldrb	r3, [r3, #0]
}
20000394:	0018      	movs	r0, r3
20000396:	46bd      	mov	sp, r7
20000398:	b003      	add	sp, #12
2000039a:	bd90      	pop	{r4, r7, pc}
2000039c:	40021000 	andmi	r1, r2, r0
200003a0:	00005555 	andeq	r5, r0, r5, asr r5
200003a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003a8 <ascii_command>:

void ascii_command(unsigned char command)
{
200003a8:	b580      	push	{r7, lr}
200003aa:	b082      	sub	sp, #8
200003ac:	af00      	add	r7, sp, #0
200003ae:	0002      	movs	r2, r0
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
200003b4:	46c0      	nop			; (mov r8, r8)
200003b6:	f7ff ffb7 	bl	20000328 <ascii_read_status>
200003ba:	0003      	movs	r3, r0
200003bc:	001a      	movs	r2, r3
200003be:	2380      	movs	r3, #128	; 0x80
200003c0:	4013      	ands	r3, r2
200003c2:	2b80      	cmp	r3, #128	; 0x80
200003c4:	d0f7      	beq.n	200003b6 <ascii_command+0xe>
	{}
	delay_micro(8);
200003c6:	2008      	movs	r0, #8
200003c8:	f7ff fee0 	bl	2000018c <delay_micro>
	ascii_write_cmd(command);
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff65 	bl	200002a0 <ascii_write_cmd>
	delay_micro(45);
200003d6:	202d      	movs	r0, #45	; 0x2d
200003d8:	f7ff fed8 	bl	2000018c <delay_micro>
}
200003dc:	46c0      	nop			; (mov r8, r8)
200003de:	46bd      	mov	sp, r7
200003e0:	b002      	add	sp, #8
200003e2:	bd80      	pop	{r7, pc}

200003e4 <ascii_init>:

void ascii_init(void)
{
200003e4:	b580      	push	{r7, lr}
200003e6:	af00      	add	r7, sp, #0
	ascii_command(0x38); // 2 rows, 5x8 
200003e8:	2038      	movs	r0, #56	; 0x38
200003ea:	f7ff ffdd 	bl	200003a8 <ascii_command>
	ascii_command(0x0E); // Activate display, activate cursor and set it as constant 
200003ee:	200e      	movs	r0, #14
200003f0:	f7ff ffda 	bl	200003a8 <ascii_command>
	ascii_command(0x01); // Clear Display
200003f4:	2001      	movs	r0, #1
200003f6:	f7ff ffd7 	bl	200003a8 <ascii_command>
	ascii_command(0x06); // Increment, No shift
200003fa:	2006      	movs	r0, #6
200003fc:	f7ff ffd4 	bl	200003a8 <ascii_command>
}
20000400:	46c0      	nop			; (mov r8, r8)
20000402:	46bd      	mov	sp, r7
20000404:	bd80      	pop	{r7, pc}

20000406 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000406:	b580      	push	{r7, lr}
20000408:	b082      	sub	sp, #8
2000040a:	af00      	add	r7, sp, #0
2000040c:	0002      	movs	r2, r0
2000040e:	1dfb      	adds	r3, r7, #7
20000410:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80) // Wait for the display to be ready for instructions
20000412:	46c0      	nop			; (mov r8, r8)
20000414:	f7ff ff88 	bl	20000328 <ascii_read_status>
20000418:	0003      	movs	r3, r0
2000041a:	001a      	movs	r2, r3
2000041c:	2380      	movs	r3, #128	; 0x80
2000041e:	4013      	ands	r3, r2
20000420:	2b80      	cmp	r3, #128	; 0x80
20000422:	d0f7      	beq.n	20000414 <ascii_write_char+0xe>
	{}
	delay_micro(8);
20000424:	2008      	movs	r0, #8
20000426:	f7ff feb1 	bl	2000018c <delay_micro>
	ascii_write_data(c);
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	0018      	movs	r0, r3
20000430:	f7ff ff4b 	bl	200002ca <ascii_write_data>
	delay_micro(45);
20000434:	202d      	movs	r0, #45	; 0x2d
20000436:	f7ff fea9 	bl	2000018c <delay_micro>
}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	46bd      	mov	sp, r7
2000043e:	b002      	add	sp, #8
20000440:	bd80      	pop	{r7, pc}

20000442 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
20000442:	b580      	push	{r7, lr}
20000444:	b084      	sub	sp, #16
20000446:	af00      	add	r7, sp, #0
20000448:	6078      	str	r0, [r7, #4]
2000044a:	6039      	str	r1, [r7, #0]
	unsigned char adress = x - 1;
2000044c:	687b      	ldr	r3, [r7, #4]
2000044e:	b2da      	uxtb	r2, r3
20000450:	210f      	movs	r1, #15
20000452:	187b      	adds	r3, r7, r1
20000454:	3a01      	subs	r2, #1
20000456:	701a      	strb	r2, [r3, #0]
	if ( y == 2 )
20000458:	683b      	ldr	r3, [r7, #0]
2000045a:	2b02      	cmp	r3, #2
2000045c:	d104      	bne.n	20000468 <ascii_gotoxy+0x26>
	{
		adress = adress + 0x40;
2000045e:	187b      	adds	r3, r7, r1
20000460:	187a      	adds	r2, r7, r1
20000462:	7812      	ldrb	r2, [r2, #0]
20000464:	3240      	adds	r2, #64	; 0x40
20000466:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | adress);
20000468:	230f      	movs	r3, #15
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	781b      	ldrb	r3, [r3, #0]
2000046e:	2280      	movs	r2, #128	; 0x80
20000470:	4252      	negs	r2, r2
20000472:	4313      	orrs	r3, r2
20000474:	b2db      	uxtb	r3, r3
20000476:	0018      	movs	r0, r3
20000478:	f7ff ff12 	bl	200002a0 <ascii_write_cmd>
}
2000047c:	46c0      	nop			; (mov r8, r8)
2000047e:	46bd      	mov	sp, r7
20000480:	b004      	add	sp, #16
20000482:	bd80      	pop	{r7, pc}

20000484 <swap>:

// ------------------------------------------------------- LCD MODULE ------------------------------------------------------------------------------- //
void swap(unsigned char *a, unsigned char *b)
{
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
2000048c:	6039      	str	r1, [r7, #0]
	unsigned char temp = *a;
2000048e:	210f      	movs	r1, #15
20000490:	187b      	adds	r3, r7, r1
20000492:	687a      	ldr	r2, [r7, #4]
20000494:	7812      	ldrb	r2, [r2, #0]
20000496:	701a      	strb	r2, [r3, #0]
	*a = *b;
20000498:	683b      	ldr	r3, [r7, #0]
2000049a:	781a      	ldrb	r2, [r3, #0]
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	701a      	strb	r2, [r3, #0]
	*b = temp;
200004a0:	683b      	ldr	r3, [r7, #0]
200004a2:	187a      	adds	r2, r7, r1
200004a4:	7812      	ldrb	r2, [r2, #0]
200004a6:	701a      	strb	r2, [r3, #0]
}
200004a8:	46c0      	nop			; (mov r8, r8)
200004aa:	46bd      	mov	sp, r7
200004ac:	b004      	add	sp, #16
200004ae:	bd80      	pop	{r7, pc}

200004b0 <draw_line>:

int draw_line(PLINE l)
{
200004b0:	b590      	push	{r4, r7, lr}
200004b2:	b087      	sub	sp, #28
200004b4:	af00      	add	r7, sp, #0
200004b6:	6078      	str	r0, [r7, #4]
	// This just checks so that there are no points outside of the display which is 128x64 
	if ((l->p0.x < 1 && l->p0.x > 64) | (l->p1.x < 1 && l->p1.x > 64) | (l->p0.y < 1 && l->p0.y > 128) | (l->p1.y < 1 && l->p1.y > 128))
200004b8:	687b      	ldr	r3, [r7, #4]
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b00      	cmp	r3, #0
200004be:	d105      	bne.n	200004cc <draw_line+0x1c>
200004c0:	687b      	ldr	r3, [r7, #4]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2b40      	cmp	r3, #64	; 0x40
200004c6:	d901      	bls.n	200004cc <draw_line+0x1c>
200004c8:	2301      	movs	r3, #1
200004ca:	e000      	b.n	200004ce <draw_line+0x1e>
200004cc:	2300      	movs	r3, #0
200004ce:	1c1a      	adds	r2, r3, #0
200004d0:	2301      	movs	r3, #1
200004d2:	4013      	ands	r3, r2
200004d4:	b2da      	uxtb	r2, r3
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	789b      	ldrb	r3, [r3, #2]
200004da:	2b00      	cmp	r3, #0
200004dc:	d105      	bne.n	200004ea <draw_line+0x3a>
200004de:	687b      	ldr	r3, [r7, #4]
200004e0:	789b      	ldrb	r3, [r3, #2]
200004e2:	2b40      	cmp	r3, #64	; 0x40
200004e4:	d901      	bls.n	200004ea <draw_line+0x3a>
200004e6:	2301      	movs	r3, #1
200004e8:	e000      	b.n	200004ec <draw_line+0x3c>
200004ea:	2300      	movs	r3, #0
200004ec:	1c19      	adds	r1, r3, #0
200004ee:	2301      	movs	r3, #1
200004f0:	400b      	ands	r3, r1
200004f2:	b2db      	uxtb	r3, r3
200004f4:	4313      	orrs	r3, r2
200004f6:	b2db      	uxtb	r3, r3
200004f8:	001a      	movs	r2, r3
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	785b      	ldrb	r3, [r3, #1]
200004fe:	2b00      	cmp	r3, #0
20000500:	d105      	bne.n	2000050e <draw_line+0x5e>
20000502:	687b      	ldr	r3, [r7, #4]
20000504:	785b      	ldrb	r3, [r3, #1]
20000506:	2b80      	cmp	r3, #128	; 0x80
20000508:	d901      	bls.n	2000050e <draw_line+0x5e>
2000050a:	2301      	movs	r3, #1
2000050c:	e000      	b.n	20000510 <draw_line+0x60>
2000050e:	2300      	movs	r3, #0
20000510:	431a      	orrs	r2, r3
20000512:	687b      	ldr	r3, [r7, #4]
20000514:	78db      	ldrb	r3, [r3, #3]
20000516:	2b00      	cmp	r3, #0
20000518:	d105      	bne.n	20000526 <draw_line+0x76>
2000051a:	687b      	ldr	r3, [r7, #4]
2000051c:	78db      	ldrb	r3, [r3, #3]
2000051e:	2b80      	cmp	r3, #128	; 0x80
20000520:	d901      	bls.n	20000526 <draw_line+0x76>
20000522:	2301      	movs	r3, #1
20000524:	e000      	b.n	20000528 <draw_line+0x78>
20000526:	2300      	movs	r3, #0
20000528:	4313      	orrs	r3, r2
2000052a:	d001      	beq.n	20000530 <draw_line+0x80>
		return 0;
2000052c:	2300      	movs	r3, #0
2000052e:	e0b6      	b.n	2000069e <draw_line+0x1ee>
	
	// Bresenhams Algorithm - honestly no idea how it works 
	char steep;
	if (abs(l->p0.y - l->p1.y) > abs(l->p0.x - l->p1.x))
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	785b      	ldrb	r3, [r3, #1]
20000534:	001a      	movs	r2, r3
20000536:	687b      	ldr	r3, [r7, #4]
20000538:	78db      	ldrb	r3, [r3, #3]
2000053a:	1ad3      	subs	r3, r2, r3
2000053c:	17d9      	asrs	r1, r3, #31
2000053e:	185a      	adds	r2, r3, r1
20000540:	404a      	eors	r2, r1
20000542:	687b      	ldr	r3, [r7, #4]
20000544:	781b      	ldrb	r3, [r3, #0]
20000546:	0019      	movs	r1, r3
20000548:	687b      	ldr	r3, [r7, #4]
2000054a:	789b      	ldrb	r3, [r3, #2]
2000054c:	1acb      	subs	r3, r1, r3
2000054e:	17d9      	asrs	r1, r3, #31
20000550:	185b      	adds	r3, r3, r1
20000552:	404b      	eors	r3, r1
20000554:	429a      	cmp	r2, r3
20000556:	dd04      	ble.n	20000562 <draw_line+0xb2>
		steep = 1;
20000558:	2317      	movs	r3, #23
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2201      	movs	r2, #1
2000055e:	701a      	strb	r2, [r3, #0]
20000560:	e003      	b.n	2000056a <draw_line+0xba>
	else
		steep = 0;
20000562:	2317      	movs	r3, #23
20000564:	18fb      	adds	r3, r7, r3
20000566:	2200      	movs	r2, #0
20000568:	701a      	strb	r2, [r3, #0]
	if (steep)
2000056a:	2317      	movs	r3, #23
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2b00      	cmp	r3, #0
20000572:	d00e      	beq.n	20000592 <draw_line+0xe2>
	{
		swap(&l->p0.x, &l->p0.y);
20000574:	687a      	ldr	r2, [r7, #4]
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	3301      	adds	r3, #1
2000057a:	0019      	movs	r1, r3
2000057c:	0010      	movs	r0, r2
2000057e:	f7ff ff81 	bl	20000484 <swap>
		swap(&l->p1.x, &l->p1.y);
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	1c9a      	adds	r2, r3, #2
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	3303      	adds	r3, #3
2000058a:	0019      	movs	r1, r3
2000058c:	0010      	movs	r0, r2
2000058e:	f7ff ff79 	bl	20000484 <swap>
	}
	if (l->p0.x > l->p1.x)
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	781a      	ldrb	r2, [r3, #0]
20000596:	687b      	ldr	r3, [r7, #4]
20000598:	789b      	ldrb	r3, [r3, #2]
2000059a:	429a      	cmp	r2, r3
2000059c:	d90e      	bls.n	200005bc <draw_line+0x10c>
	{
		swap(&l->p0.x, &l->p1.x);
2000059e:	687a      	ldr	r2, [r7, #4]
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	3302      	adds	r3, #2
200005a4:	0019      	movs	r1, r3
200005a6:	0010      	movs	r0, r2
200005a8:	f7ff ff6c 	bl	20000484 <swap>
		swap(&l->p0.y, &l->p1.y);
200005ac:	687b      	ldr	r3, [r7, #4]
200005ae:	1c5a      	adds	r2, r3, #1
200005b0:	687b      	ldr	r3, [r7, #4]
200005b2:	3303      	adds	r3, #3
200005b4:	0019      	movs	r1, r3
200005b6:	0010      	movs	r0, r2
200005b8:	f7ff ff64 	bl	20000484 <swap>
	}
	char deltax = l->p1.x - l->p0.x;
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	7899      	ldrb	r1, [r3, #2]
200005c0:	687b      	ldr	r3, [r7, #4]
200005c2:	781a      	ldrb	r2, [r3, #0]
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	1a8a      	subs	r2, r1, r2
200005ca:	701a      	strb	r2, [r3, #0]
	char deltay = abs(l->p1.y - l->p0.y);
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	78db      	ldrb	r3, [r3, #3]
200005d0:	001a      	movs	r2, r3
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	785b      	ldrb	r3, [r3, #1]
200005d6:	1ad3      	subs	r3, r2, r3
200005d8:	17d9      	asrs	r1, r3, #31
200005da:	185a      	adds	r2, r3, r1
200005dc:	404a      	eors	r2, r1
200005de:	230e      	movs	r3, #14
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	701a      	strb	r2, [r3, #0]
	char error = 0;
200005e4:	2316      	movs	r3, #22
200005e6:	18fb      	adds	r3, r7, r3
200005e8:	2200      	movs	r2, #0
200005ea:	701a      	strb	r2, [r3, #0]
	char y = l->p0.y;
200005ec:	2315      	movs	r3, #21
200005ee:	18fb      	adds	r3, r7, r3
200005f0:	687a      	ldr	r2, [r7, #4]
200005f2:	7852      	ldrb	r2, [r2, #1]
200005f4:	701a      	strb	r2, [r3, #0]
	char ystep;
	if (l->p0.y < l->p1.y)
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	785a      	ldrb	r2, [r3, #1]
200005fa:	687b      	ldr	r3, [r7, #4]
200005fc:	78db      	ldrb	r3, [r3, #3]
200005fe:	429a      	cmp	r2, r3
20000600:	d204      	bcs.n	2000060c <draw_line+0x15c>
		ystep = 1;
20000602:	2314      	movs	r3, #20
20000604:	18fb      	adds	r3, r7, r3
20000606:	2201      	movs	r2, #1
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	e003      	b.n	20000614 <draw_line+0x164>
	else
		ystep = -1;
2000060c:	2314      	movs	r3, #20
2000060e:	18fb      	adds	r3, r7, r3
20000610:	22ff      	movs	r2, #255	; 0xff
20000612:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
20000614:	687b      	ldr	r3, [r7, #4]
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	613b      	str	r3, [r7, #16]
2000061a:	e039      	b.n	20000690 <draw_line+0x1e0>
	{
		if (steep)
2000061c:	2317      	movs	r3, #23
2000061e:	18fb      	adds	r3, r7, r3
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	2b00      	cmp	r3, #0
20000624:	d008      	beq.n	20000638 <draw_line+0x188>
			graphic_pixel_set(y, x);
20000626:	2315      	movs	r3, #21
20000628:	18fb      	adds	r3, r7, r3
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	693a      	ldr	r2, [r7, #16]
2000062e:	0011      	movs	r1, r2
20000630:	0018      	movs	r0, r3
20000632:	f000 f92d 	bl	20000890 <graphic_pixel_set>
20000636:	e007      	b.n	20000648 <draw_line+0x198>
		else
			graphic_pixel_set(x, y);
20000638:	2315      	movs	r3, #21
2000063a:	18fb      	adds	r3, r7, r3
2000063c:	781a      	ldrb	r2, [r3, #0]
2000063e:	693b      	ldr	r3, [r7, #16]
20000640:	0011      	movs	r1, r2
20000642:	0018      	movs	r0, r3
20000644:	f000 f924 	bl	20000890 <graphic_pixel_set>
		error = error + deltay;
20000648:	2016      	movs	r0, #22
2000064a:	183b      	adds	r3, r7, r0
2000064c:	1839      	adds	r1, r7, r0
2000064e:	220e      	movs	r2, #14
20000650:	18ba      	adds	r2, r7, r2
20000652:	7809      	ldrb	r1, [r1, #0]
20000654:	7812      	ldrb	r2, [r2, #0]
20000656:	188a      	adds	r2, r1, r2
20000658:	701a      	strb	r2, [r3, #0]
		if (2 * error >= deltax)
2000065a:	183b      	adds	r3, r7, r0
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	005a      	lsls	r2, r3, #1
20000660:	240f      	movs	r4, #15
20000662:	193b      	adds	r3, r7, r4
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	429a      	cmp	r2, r3
20000668:	db0f      	blt.n	2000068a <draw_line+0x1da>
		{
			y = y +ystep;
2000066a:	2215      	movs	r2, #21
2000066c:	18bb      	adds	r3, r7, r2
2000066e:	18b9      	adds	r1, r7, r2
20000670:	2214      	movs	r2, #20
20000672:	18ba      	adds	r2, r7, r2
20000674:	7809      	ldrb	r1, [r1, #0]
20000676:	7812      	ldrb	r2, [r2, #0]
20000678:	188a      	adds	r2, r1, r2
2000067a:	701a      	strb	r2, [r3, #0]
			error = error - deltax;
2000067c:	183b      	adds	r3, r7, r0
2000067e:	1839      	adds	r1, r7, r0
20000680:	193a      	adds	r2, r7, r4
20000682:	7809      	ldrb	r1, [r1, #0]
20000684:	7812      	ldrb	r2, [r2, #0]
20000686:	1a8a      	subs	r2, r1, r2
20000688:	701a      	strb	r2, [r3, #0]
	for (int x = l->p0.x; x <= l->p1.x; x++)
2000068a:	693b      	ldr	r3, [r7, #16]
2000068c:	3301      	adds	r3, #1
2000068e:	613b      	str	r3, [r7, #16]
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	789b      	ldrb	r3, [r3, #2]
20000694:	001a      	movs	r2, r3
20000696:	693b      	ldr	r3, [r7, #16]
20000698:	4293      	cmp	r3, r2
2000069a:	ddbf      	ble.n	2000061c <draw_line+0x16c>
		}
	}

	// Returns 1 if it succeded
	return 1;
2000069c:	2301      	movs	r3, #1
}
2000069e:	0018      	movs	r0, r3
200006a0:	46bd      	mov	sp, r7
200006a2:	b007      	add	sp, #28
200006a4:	bd90      	pop	{r4, r7, pc}

200006a6 <draw_rectangle>:

void draw_rectangle(PRECT r)
{
200006a6:	b5f0      	push	{r4, r5, r6, r7, lr}
200006a8:	b087      	sub	sp, #28
200006aa:	af00      	add	r7, sp, #0
200006ac:	6078      	str	r0, [r7, #4]
	POINT start;
	POINT end;
	LINE side;
	// Honestly would never write code like this but in the book it looked like this. 
	start.x = r->p.x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	2114      	movs	r1, #20
200006b4:	187b      	adds	r3, r7, r1
200006b6:	701a      	strb	r2, [r3, #0]
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	785a      	ldrb	r2, [r3, #1]
200006bc:	187b      	adds	r3, r7, r1
200006be:	705a      	strb	r2, [r3, #1]
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	781a      	ldrb	r2, [r3, #0]
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	789b      	ldrb	r3, [r3, #2]
200006c8:	18d3      	adds	r3, r2, r3
200006ca:	b2da      	uxtb	r2, r3
200006cc:	2510      	movs	r5, #16
200006ce:	197b      	adds	r3, r7, r5
200006d0:	701a      	strb	r2, [r3, #0]
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	785a      	ldrb	r2, [r3, #1]
200006d6:	197b      	adds	r3, r7, r5
200006d8:	705a      	strb	r2, [r3, #1]
200006da:	260c      	movs	r6, #12
200006dc:	19bb      	adds	r3, r7, r6
200006de:	000c      	movs	r4, r1
200006e0:	187a      	adds	r2, r7, r1
200006e2:	8812      	ldrh	r2, [r2, #0]
200006e4:	801a      	strh	r2, [r3, #0]
200006e6:	19bb      	adds	r3, r7, r6
200006e8:	2102      	movs	r1, #2
200006ea:	197a      	adds	r2, r7, r5
200006ec:	8812      	ldrh	r2, [r2, #0]
200006ee:	525a      	strh	r2, [r3, r1]
200006f0:	19bb      	adds	r3, r7, r6
200006f2:	0018      	movs	r0, r3
200006f4:	f7ff fedc 	bl	200004b0 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y; end.x = r->p.x + r->x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	781a      	ldrb	r2, [r3, #0]
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	789b      	ldrb	r3, [r3, #2]
20000700:	18d3      	adds	r3, r2, r3
20000702:	b2da      	uxtb	r2, r3
20000704:	0021      	movs	r1, r4
20000706:	187b      	adds	r3, r7, r1
20000708:	701a      	strb	r2, [r3, #0]
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	785a      	ldrb	r2, [r3, #1]
2000070e:	187b      	adds	r3, r7, r1
20000710:	705a      	strb	r2, [r3, #1]
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	781a      	ldrb	r2, [r3, #0]
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	789b      	ldrb	r3, [r3, #2]
2000071a:	18d3      	adds	r3, r2, r3
2000071c:	b2da      	uxtb	r2, r3
2000071e:	197b      	adds	r3, r7, r5
20000720:	701a      	strb	r2, [r3, #0]
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	785a      	ldrb	r2, [r3, #1]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	78db      	ldrb	r3, [r3, #3]
2000072a:	18d3      	adds	r3, r2, r3
2000072c:	b2da      	uxtb	r2, r3
2000072e:	197b      	adds	r3, r7, r5
20000730:	705a      	strb	r2, [r3, #1]
20000732:	19bb      	adds	r3, r7, r6
20000734:	000c      	movs	r4, r1
20000736:	187a      	adds	r2, r7, r1
20000738:	8812      	ldrh	r2, [r2, #0]
2000073a:	801a      	strh	r2, [r3, #0]
2000073c:	19bb      	adds	r3, r7, r6
2000073e:	2102      	movs	r1, #2
20000740:	197a      	adds	r2, r7, r5
20000742:	8812      	ldrh	r2, [r2, #0]
20000744:	525a      	strh	r2, [r3, r1]
20000746:	19bb      	adds	r3, r7, r6
20000748:	0018      	movs	r0, r3
2000074a:	f7ff feb1 	bl	200004b0 <draw_line>
	start.x = r->p.x + r->x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y + r->y; side.p0 = start; side.p1 = end; draw_line(&side);
2000074e:	687b      	ldr	r3, [r7, #4]
20000750:	781a      	ldrb	r2, [r3, #0]
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	789b      	ldrb	r3, [r3, #2]
20000756:	18d3      	adds	r3, r2, r3
20000758:	b2da      	uxtb	r2, r3
2000075a:	0021      	movs	r1, r4
2000075c:	187b      	adds	r3, r7, r1
2000075e:	701a      	strb	r2, [r3, #0]
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	785a      	ldrb	r2, [r3, #1]
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	78db      	ldrb	r3, [r3, #3]
20000768:	18d3      	adds	r3, r2, r3
2000076a:	b2da      	uxtb	r2, r3
2000076c:	187b      	adds	r3, r7, r1
2000076e:	705a      	strb	r2, [r3, #1]
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	781a      	ldrb	r2, [r3, #0]
20000774:	197b      	adds	r3, r7, r5
20000776:	701a      	strb	r2, [r3, #0]
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	785a      	ldrb	r2, [r3, #1]
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	78db      	ldrb	r3, [r3, #3]
20000780:	18d3      	adds	r3, r2, r3
20000782:	b2da      	uxtb	r2, r3
20000784:	197b      	adds	r3, r7, r5
20000786:	705a      	strb	r2, [r3, #1]
20000788:	19bb      	adds	r3, r7, r6
2000078a:	000c      	movs	r4, r1
2000078c:	187a      	adds	r2, r7, r1
2000078e:	8812      	ldrh	r2, [r2, #0]
20000790:	801a      	strh	r2, [r3, #0]
20000792:	19bb      	adds	r3, r7, r6
20000794:	2102      	movs	r1, #2
20000796:	197a      	adds	r2, r7, r5
20000798:	8812      	ldrh	r2, [r2, #0]
2000079a:	525a      	strh	r2, [r3, r1]
2000079c:	19bb      	adds	r3, r7, r6
2000079e:	0018      	movs	r0, r3
200007a0:	f7ff fe86 	bl	200004b0 <draw_line>
	start.x = r->p.x; start.y = r->p.y + r->y; end.x = r->p.x; end.y = r->p.y; side.p0 = start; side.p1 = end; draw_line(&side);
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	781a      	ldrb	r2, [r3, #0]
200007a8:	0021      	movs	r1, r4
200007aa:	187b      	adds	r3, r7, r1
200007ac:	701a      	strb	r2, [r3, #0]
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	785a      	ldrb	r2, [r3, #1]
200007b2:	687b      	ldr	r3, [r7, #4]
200007b4:	78db      	ldrb	r3, [r3, #3]
200007b6:	18d3      	adds	r3, r2, r3
200007b8:	b2da      	uxtb	r2, r3
200007ba:	187b      	adds	r3, r7, r1
200007bc:	705a      	strb	r2, [r3, #1]
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	781a      	ldrb	r2, [r3, #0]
200007c2:	197b      	adds	r3, r7, r5
200007c4:	701a      	strb	r2, [r3, #0]
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	785a      	ldrb	r2, [r3, #1]
200007ca:	197b      	adds	r3, r7, r5
200007cc:	705a      	strb	r2, [r3, #1]
200007ce:	19bb      	adds	r3, r7, r6
200007d0:	187a      	adds	r2, r7, r1
200007d2:	8812      	ldrh	r2, [r2, #0]
200007d4:	801a      	strh	r2, [r3, #0]
200007d6:	19bb      	adds	r3, r7, r6
200007d8:	2102      	movs	r1, #2
200007da:	197a      	adds	r2, r7, r5
200007dc:	8812      	ldrh	r2, [r2, #0]
200007de:	525a      	strh	r2, [r3, r1]
200007e0:	19bb      	adds	r3, r7, r6
200007e2:	0018      	movs	r0, r3
200007e4:	f7ff fe64 	bl	200004b0 <draw_line>
}
200007e8:	46c0      	nop			; (mov r8, r8)
200007ea:	46bd      	mov	sp, r7
200007ec:	b007      	add	sp, #28
200007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

200007f0 <draw_polygon>:

void draw_polygon(PPOLYPOINT polygon)
{
200007f0:	b5b0      	push	{r4, r5, r7, lr}
200007f2:	b088      	sub	sp, #32
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
	POLYPOINT p0;
	p0.x = polygon->x;
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	781a      	ldrb	r2, [r3, #0]
200007fc:	2114      	movs	r1, #20
200007fe:	187b      	adds	r3, r7, r1
20000800:	701a      	strb	r2, [r3, #0]
	p0.y = polygon->y;
20000802:	687b      	ldr	r3, [r7, #4]
20000804:	785a      	ldrb	r2, [r3, #1]
20000806:	187b      	adds	r3, r7, r1
20000808:	705a      	strb	r2, [r3, #1]
	PPOLYPOINT ptr = polygon->next;
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	685b      	ldr	r3, [r3, #4]
2000080e:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
20000810:	e02a      	b.n	20000868 <draw_polygon+0x78>
	{
		POLYPOINT p1;
		p1.x = ptr->x;
20000812:	69fb      	ldr	r3, [r7, #28]
20000814:	781a      	ldrb	r2, [r3, #0]
20000816:	210c      	movs	r1, #12
20000818:	187b      	adds	r3, r7, r1
2000081a:	701a      	strb	r2, [r3, #0]
		p1.y = ptr->y;
2000081c:	69fb      	ldr	r3, [r7, #28]
2000081e:	785a      	ldrb	r2, [r3, #1]
20000820:	187b      	adds	r3, r7, r1
20000822:	705a      	strb	r2, [r3, #1]
		LINE side = {{p0.x, p0.y}, {p1.x, p1.y}};
20000824:	2514      	movs	r5, #20
20000826:	197b      	adds	r3, r7, r5
20000828:	781a      	ldrb	r2, [r3, #0]
2000082a:	2008      	movs	r0, #8
2000082c:	183b      	adds	r3, r7, r0
2000082e:	701a      	strb	r2, [r3, #0]
20000830:	197b      	adds	r3, r7, r5
20000832:	785a      	ldrb	r2, [r3, #1]
20000834:	183b      	adds	r3, r7, r0
20000836:	705a      	strb	r2, [r3, #1]
20000838:	187b      	adds	r3, r7, r1
2000083a:	781a      	ldrb	r2, [r3, #0]
2000083c:	183b      	adds	r3, r7, r0
2000083e:	709a      	strb	r2, [r3, #2]
20000840:	000c      	movs	r4, r1
20000842:	187b      	adds	r3, r7, r1
20000844:	785a      	ldrb	r2, [r3, #1]
20000846:	183b      	adds	r3, r7, r0
20000848:	70da      	strb	r2, [r3, #3]
		draw_line(&side);
2000084a:	183b      	adds	r3, r7, r0
2000084c:	0018      	movs	r0, r3
2000084e:	f7ff fe2f 	bl	200004b0 <draw_line>
		p0.x = p1.x; p0.y = p1.y;
20000852:	193b      	adds	r3, r7, r4
20000854:	781a      	ldrb	r2, [r3, #0]
20000856:	197b      	adds	r3, r7, r5
20000858:	701a      	strb	r2, [r3, #0]
2000085a:	193b      	adds	r3, r7, r4
2000085c:	785a      	ldrb	r2, [r3, #1]
2000085e:	197b      	adds	r3, r7, r5
20000860:	705a      	strb	r2, [r3, #1]
		ptr = ptr->next;
20000862:	69fb      	ldr	r3, [r7, #28]
20000864:	685b      	ldr	r3, [r3, #4]
20000866:	61fb      	str	r3, [r7, #28]
	while (ptr != 0) 
20000868:	69fb      	ldr	r3, [r7, #28]
2000086a:	2b00      	cmp	r3, #0
2000086c:	d1d1      	bne.n	20000812 <draw_polygon+0x22>
	}
}
2000086e:	46c0      	nop			; (mov r8, r8)
20000870:	46c0      	nop			; (mov r8, r8)
20000872:	46bd      	mov	sp, r7
20000874:	b008      	add	sp, #32
20000876:	bdb0      	pop	{r4, r5, r7, pc}

20000878 <my_irq_handler>:

// ------------------------------------------------------- Interrupt ------------------------------------------------------------------------------- //
void my_irq_handler(void)
{
20000878:	b580      	push	{r7, lr}
2000087a:	af00      	add	r7, sp, #0
	// tÃ¤nd diodramp pÃ¥ port D 
	//*GPIO_D_MODER = 0x00005555;
	//*GPIO_D_ODR_LOW = 0xFF;
}
2000087c:	46c0      	nop			; (mov r8, r8)
2000087e:	46bd      	mov	sp, r7
20000880:	bd80      	pop	{r7, pc}
20000882:	46c0      	nop			; (mov r8, r8)

20000884 <graphic_initalize>:

// ------------------------------------------------------- MD407 BUILT IN FUNCTIONS ------------------------------------------------------------------------------- //
__attribute__((naked))
void graphic_initalize(void)
{
20000884:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
20000888:	46c0      	nop			; (mov r8, r8)

2000088a <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
2000088a:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
2000088e:	46c0      	nop			; (mov r8, r8)

20000890 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(void)
{
20000890:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
20000894:	46c0      	nop			; (mov r8, r8)

20000896 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(void)
{
20000896:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
2000089a:	46c0      	nop			; (mov r8, r8)
2000089c:	00001414 	andeq	r1, r0, r4, lsl r4
200008a0:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013c 	andeq	r0, r0, ip, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003e 	andeq	r0, r0, lr, lsr r0
  10:	0000360c 	andeq	r3, r0, ip, lsl #12
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00006a20 	andeq	r6, r0, r0, lsr #20
  20:	00000000 	andeq	r0, r0, r0
  24:	011a0200 	tsteq	sl, r0, lsl #4
  28:	00d60905 	sbcseq	r0, r6, r5, lsl #18
  2c:	73030000 	movwvc	r0, #12288	; 0x3000
  30:	06010072 			; <UNDEFINED> instruction: 0x06010072
  34:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  38:	2d040000 	stccs	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	00dd1a07 	sbcseq	r1, sp, r7, lsl #20
  44:	03020000 	movweq	r0, #8192	; 0x2000
  48:	01007264 	tsteq	r0, r4, ror #4
  4c:	00dd1a08 	sbcseq	r1, sp, r8, lsl #20
  50:	04040000 	streq	r0, [r4], #-0
  54:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	dd1a0901 	vldrle.16	s0, [sl, #-2]	; <UNPREDICTABLE>
  5c:	06000000 	streq	r0, [r0], -r0
  60:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
  64:	1a0a0100 	bne	28046c <startup-0x1fd7fb94>
  68:	000000dd 	ldrdeq	r0, [r0], -sp
  6c:	00b90408 	adcseq	r0, r9, r8, lsl #8
  70:	0b010000 	bleq	40078 <startup-0x1ffbff88>
  74:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  78:	63030a00 	movwvs	r0, #14848	; 0x3a00
  7c:	01003172 	tsteq	r0, r2, ror r1
  80:	00dd1a0c 	sbcseq	r1, sp, ip, lsl #20
  84:	040c0000 	streq	r0, [ip], #-0
  88:	000000c2 	andeq	r0, r0, r2, asr #1
  8c:	dd1a0d01 	ldcle	13, cr0, [sl, #-4]
  90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  94:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
  98:	1a0e0100 	bne	3804a0 <startup-0x1fc7fb60>
  9c:	000000dd 	ldrdeq	r0, [r0], -sp
  a0:	00cb0410 	sbceq	r0, fp, r0, lsl r4
  a4:	0f010000 	svceq	0x00010000
  a8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
  ac:	63031200 	movwvs	r1, #12800	; 0x3200
  b0:	01003372 	tsteq	r0, r2, ror r3
  b4:	00dd1a10 	sbcseq	r1, sp, r0, lsl sl
  b8:	04140000 	ldreq	r0, [r4], #-0
  bc:	000000d4 	ldrdeq	r0, [r0], -r4
  c0:	dd1a1101 	ldfles	f1, [sl, #-4]
  c4:	16000000 	strne	r0, [r0], -r0
  c8:	0000f004 	andeq	pc, r0, r4
  cc:	1a120100 	bne	4804d4 <startup-0x1fb7fb2c>
  d0:	000000dd 	ldrdeq	r0, [r0], -sp
  d4:	02050018 	andeq	r0, r5, #24
  d8:	0000dd07 	andeq	sp, r0, r7, lsl #26
  dc:	00d60600 	sbcseq	r0, r6, r0, lsl #12
  e0:	fb070000 	blx	1c00ea <startup-0x1fe3ff16>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	00250313 	eoreq	r0, r5, r3, lsl r3
  ec:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	00500621 	subseq	r0, r0, r1, lsr #12
  f8:	002a2000 	eoreq	r2, sl, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	01007309 	tsteq	r0, r9, lsl #6
 108:	01121221 	tsteq	r2, r1, lsr #4
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	84080105 	strhi	r0, [r8], #-261	; 0xfffffefb
 11c:	0b000002 	bleq	12c <startup-0x1ffffed4>
 120:	00000101 	andeq	r0, r0, r1, lsl #2
 124:	100d1701 	andne	r1, sp, r1, lsl #14
 128:	40200000 	eormi	r0, r0, r0
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0063099c 	mlseq	r3, ip, r9, r0
 134:	181d1701 	ldmdane	sp, {r0, r8, r9, sl, ip}
 138:	02000001 	andeq	r0, r0, #1
 13c:	00007791 	muleq	r0, r1, r7
 140:	00000688 	andeq	r0, r0, r8, lsl #13
 144:	00b40004 	adcseq	r0, r4, r4
 148:	01040000 	mrseq	r0, (UNDEF: 4)
 14c:	0000003e 	andeq	r0, r0, lr, lsr r0
 150:	0001fa0c 	andeq	pc, r1, ip, lsl #20
 154:	00000000 	andeq	r0, r0, r0
 158:	00007c00 	andeq	r7, r0, r0, lsl #24
 15c:	00080620 	andeq	r0, r8, r0, lsr #12
 160:	00007600 	andeq	r7, r0, r0, lsl #12
 164:	07040200 	streq	r0, [r4, -r0, lsl #4]
 168:	00000123 	andeq	r0, r0, r3, lsr #2
 16c:	69050403 	stmdbvs	r5, {r0, r1, sl}
 170:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 174:	013c0508 	teqeq	ip, r8, lsl #10
 178:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 17c:	00022604 	andeq	r2, r2, r4, lsl #12
 180:	06010200 	streq	r0, [r1], -r0, lsl #4
 184:	0000027d 	andeq	r0, r0, sp, ror r2
 188:	7b080102 	blvc	200598 <startup-0x1fdffa68>
 18c:	02000002 	andeq	r0, r0, #2
 190:	02890502 	addeq	r0, r9, #8388608	; 0x800000
 194:	02020000 	andeq	r0, r2, #0
 198:	0000dd07 	andeq	sp, r0, r7, lsl #26
 19c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a0:	00000141 	andeq	r0, r0, r1, asr #2
 1a4:	1e070402 	cdpne	4, 0, cr0, cr7, cr2, {0}
 1a8:	02000001 	andeq	r0, r0, #1
 1ac:	01190708 	tsteq	r9, r8, lsl #14
 1b0:	04040000 	streq	r0, [r4], #-0
 1b4:	00000048 	andeq	r0, r0, r8, asr #32
 1b8:	84080102 	strhi	r0, [r8], #-258	; 0xfffffefe
 1bc:	05000002 	streq	r0, [r0, #-2]
 1c0:	09300102 	ldmdbeq	r0!, {r1, r8}
 1c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1c8:	01007806 	tsteq	r0, r6, lsl #16
 1cc:	00481032 	subeq	r1, r8, r2, lsr r0
 1d0:	06000000 	streq	r0, [r0], -r0
 1d4:	32010079 	andcc	r0, r1, #121	; 0x79
 1d8:	00004812 	andeq	r4, r0, r2, lsl r8
 1dc:	07000100 	streq	r0, [r0, -r0, lsl #2]
 1e0:	0000015b 	andeq	r0, r0, fp, asr r1
 1e4:	7f033301 	svcvc	0x00033301
 1e8:	05000000 	streq	r0, [r0, #-0]
 1ec:	09350104 	ldmdbeq	r5!, {r2, r8}
 1f0:	000000cd 	andeq	r0, r0, sp, asr #1
 1f4:	00307006 	eorseq	r7, r0, r6
 1f8:	9f083701 	svcls	0x00083701
 1fc:	00000000 	andeq	r0, r0, r0
 200:	00317006 	eorseq	r7, r1, r6
 204:	9f0b3701 	svcls	0x000b3701
 208:	02000000 	andeq	r0, r0, #0
 20c:	02390700 	eorseq	r0, r9, #0, 14
 210:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 214:	0000ab03 	andeq	sl, r0, r3, lsl #22
 218:	02380700 	eorseq	r0, r8, #0, 14
 21c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 220:	0000e50a 	andeq	lr, r0, sl, lsl #10
 224:	ab040400 	blge	10122c <startup-0x1fefedd4>
 228:	05000000 	streq	r0, [r0, #-0]
 22c:	093a0104 	ldmdbeq	sl!, {r2, r8}
 230:	00000116 	andeq	r0, r0, r6, lsl r1
 234:	01007006 	tsteq	r0, r6
 238:	009f083c 	addseq	r0, pc, ip, lsr r8	; <UNPREDICTABLE>
 23c:	06000000 	streq	r0, [r0], -r0
 240:	3d010078 	stccc	0, cr0, [r1, #-480]	; 0xfffffe20
 244:	00004810 	andeq	r4, r0, r0, lsl r8
 248:	79060200 	stmdbvc	r6, {r9}
 24c:	123d0100 	eorsne	r0, sp, #0, 2
 250:	00000048 	andeq	r0, r0, r8, asr #32
 254:	61070003 	tstvs	r7, r3
 258:	01000001 	tsteq	r0, r1
 25c:	01220a3e 			; <UNDEFINED> instruction: 0x01220a3e
 260:	04040000 	streq	r0, [r4], #-0
 264:	000000eb 	andeq	r0, r0, fp, ror #1
 268:	0001c108 	andeq	ip, r1, r8, lsl #2
 26c:	40010800 	andmi	r0, r1, r0, lsl #16
 270:	00015910 	andeq	r5, r1, r0, lsl r9
 274:	00780600 	rsbseq	r0, r8, r0, lsl #12
 278:	78074201 	stmdavc	r7, {r0, r9, lr}
 27c:	00000000 	andeq	r0, r0, r0
 280:	01007906 	tsteq	r0, r6, lsl #18
 284:	00780942 	rsbseq	r0, r8, r2, asr #18
 288:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 28c:	00000137 	andeq	r0, r0, r7, lsr r1
 290:	59174301 	ldmdbpl	r7, {r0, r8, r9, lr}
 294:	04000001 	streq	r0, [r0], #-1
 298:	28040400 	stmdacs	r4, {sl}
 29c:	07000001 	streq	r0, [r0, -r1]
 2a0:	00000157 	andeq	r0, r0, r7, asr r1
 2a4:	28034401 	stmdacs	r3, {r0, sl, lr}
 2a8:	07000001 	streq	r0, [r0, -r1]
 2ac:	00000156 	andeq	r0, r0, r6, asr r1
 2b0:	590f4401 	stmdbpl	pc, {r0, sl, lr}	; <UNPREDICTABLE>
 2b4:	0a000001 	beq	2c0 <startup-0x1ffffd40>
 2b8:	000001a6 	andeq	r0, r0, r6, lsr #3
 2bc:	06015e01 	streq	r5, [r1], -r1, lsl #28
 2c0:	20000878 	andcs	r0, r0, r8, ror r8
 2c4:	0000000a 	andeq	r0, r0, sl
 2c8:	0c0b9c01 	stceq	12, cr9, [fp], {1}
 2cc:	01000001 	tsteq	r0, r1
 2d0:	f006014b 			; <UNDEFINED> instruction: 0xf006014b
 2d4:	88200007 	stmdahi	r0!, {r0, r1, r2}
 2d8:	01000000 	mrseq	r0, (UNDEF: 0)
 2dc:	0001fa9c 	muleq	r1, ip, sl
 2e0:	01110c00 	tsteq	r1, r0, lsl #24
 2e4:	4b010000 	blmi	402ec <startup-0x1ffbfd14>
 2e8:	016b1e01 	cmneq	fp, r1, lsl #28
 2ec:	91020000 	mrsls	r0, (UNDEF: 2)
 2f0:	30700d54 	rsbscc	r0, r0, r4, asr sp
 2f4:	014d0100 	mrseq	r0, (UNDEF: 93)
 2f8:	00015f0c 	andeq	r5, r1, ip, lsl #30
 2fc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 300:	7274700d 	rsbsvc	r7, r4, #13
 304:	01500100 	cmpeq	r0, r0, lsl #2
 308:	00016b0d 	andeq	r6, r1, sp, lsl #22
 30c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 310:	0008120e 	andeq	r1, r8, lr, lsl #4
 314:	00005620 	andeq	r5, r0, r0, lsr #12
 318:	31700d00 	cmncc	r0, r0, lsl #26
 31c:	01530100 	cmpeq	r3, r0, lsl #2
 320:	00015f0d 	andeq	r5, r1, sp, lsl #30
 324:	5c910200 	lfmpl	f0, 4, [r1], {0}
 328:	0002210f 	andeq	r2, r2, pc, lsl #2
 32c:	01560100 	cmpeq	r6, r0, lsl #2
 330:	0000cd08 	andeq	ip, r0, r8, lsl #26
 334:	58910200 	ldmpl	r1, {r9}
 338:	b80b0000 	stmdalt	fp, {}	; <UNPREDICTABLE>
 33c:	01000002 	tsteq	r0, r2
 340:	a606013f 			; <UNDEFINED> instruction: 0xa606013f
 344:	4a200006 	bmi	800364 <startup-0x1f7ffc9c>
 348:	01000001 	tsteq	r0, r1
 34c:	0002509c 	muleq	r2, ip, r0
 350:	00721000 	rsbseq	r1, r2, r0
 354:	1b013f01 	blne	4ff60 <startup-0x1ffb00a0>
 358:	00000116 	andeq	r0, r0, r6, lsl r1
 35c:	0f549102 	svceq	0x00549102
 360:	0000030c 	andeq	r0, r0, ip, lsl #6
 364:	08014101 	stmdaeq	r1, {r0, r8, lr}
 368:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 36c:	0d649102 	stfeqp	f1, [r4, #-8]!
 370:	00646e65 	rsbeq	r6, r4, r5, ror #28
 374:	08014201 	stmdaeq	r1, {r0, r9, lr}
 378:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 37c:	0f609102 	svceq	0x00609102
 380:	00000221 	andeq	r0, r0, r1, lsr #4
 384:	07014301 	streq	r4, [r1, -r1, lsl #6]
 388:	000000cd 	andeq	r0, r0, sp, asr #1
 38c:	005c9102 	subseq	r9, ip, r2, lsl #2
 390:	00029911 	andeq	r9, r2, r1, lsl r9
 394:	010e0100 	mrseq	r0, (UNDEF: 30)
 398:	00002c05 	andeq	r2, r0, r5, lsl #24
 39c:	0004b000 	andeq	fp, r4, r0
 3a0:	0001f620 	andeq	pc, r1, r0, lsr #12
 3a4:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
 3a8:	10000003 	andne	r0, r0, r3
 3ac:	0e01006c 	cdpeq	0, 0, cr0, cr1, cr12, {3}
 3b0:	00d91501 	sbcseq	r1, r9, r1, lsl #10
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	02320f5c 	eorseq	r0, r2, #92, 30	; 0x170
 3bc:	15010000 	strne	r0, [r1, #-0]
 3c0:	00780701 	rsbseq	r0, r8, r1, lsl #14
 3c4:	91020000 	mrsls	r0, (UNDEF: 2)
 3c8:	032e0f6f 			; <UNDEFINED> instruction: 0x032e0f6f
 3cc:	24010000 	strcs	r0, [r1], #-0
 3d0:	00780701 	rsbseq	r0, r8, r1, lsl #14
 3d4:	91020000 	mrsls	r0, (UNDEF: 2)
 3d8:	01ba0f67 			; <UNDEFINED> instruction: 0x01ba0f67
 3dc:	25010000 	strcs	r0, [r1, #-0]
 3e0:	00780701 	rsbseq	r0, r8, r1, lsl #14
 3e4:	91020000 	mrsls	r0, (UNDEF: 2)
 3e8:	02650f66 	rsbeq	r0, r5, #408	; 0x198
 3ec:	26010000 	strcs	r0, [r1], -r0
 3f0:	00780701 	rsbseq	r0, r8, r1, lsl #14
 3f4:	91020000 	mrsls	r0, (UNDEF: 2)
 3f8:	00790d6e 	rsbseq	r0, r9, lr, ror #26
 3fc:	07012701 	streq	r2, [r1, -r1, lsl #14]
 400:	00000078 	andeq	r0, r0, r8, ror r0
 404:	0f6d9102 	svceq	0x006d9102
 408:	00000293 	muleq	r0, r3, r2
 40c:	07012801 	streq	r2, [r1, -r1, lsl #16]
 410:	00000078 	andeq	r0, r0, r8, ror r0
 414:	0e6c9102 	lgneqe	f1, f2
 418:	20000614 	andcs	r0, r0, r4, lsl r6
 41c:	00000088 	andeq	r0, r0, r8, lsl #1
 420:	0100780d 	tsteq	r0, sp, lsl #16
 424:	2c0b012d 	stfcss	f0, [fp], {45}	; 0x2d
 428:	02000000 	andeq	r0, r0, #0
 42c:	26126891 			; <UNDEFINED> instruction: 0x26126891
 430:	10200006 	eorne	r0, r0, r6
 434:	0b000000 	bleq	43c <startup-0x1ffffbc4>
 438:	13000003 	movwne	r0, #3
 43c:	0000020f 	andeq	r0, r0, pc, lsl #4
 440:	04013001 	streq	r3, [r1], #-1
 444:	0000002c 	andeq	r0, r0, ip, lsr #32
 448:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
 44c:	20000638 	andcs	r0, r0, r8, lsr r6
 450:	00000010 	andeq	r0, r0, r0, lsl r0
 454:	00020f13 	andeq	r0, r2, r3, lsl pc
 458:	01300100 	teqeq	r0, r0, lsl #2
 45c:	00002c04 	andeq	r2, r0, r4, lsl #24
 460:	00001400 	andeq	r1, r0, r0, lsl #8
 464:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
 468:	01000002 	tsteq	r0, r2
 46c:	84060107 	strhi	r0, [r6], #-263	; 0xfffffef9
 470:	2c200004 	stccs	0, cr0, [r0], #-16
 474:	01000000 	mrseq	r0, (UNDEF: 0)
 478:	00036a9c 	muleq	r3, ip, sl
 47c:	00611000 	rsbeq	r1, r1, r0
 480:	1a010701 	bne	4208c <startup-0x1ffbdf74>
 484:	00000072 	andeq	r0, r0, r2, ror r0
 488:	106c9102 	rsbne	r9, ip, r2, lsl #2
 48c:	07010062 	streq	r0, [r1, -r2, rrx]
 490:	00722c01 	rsbseq	r2, r2, r1, lsl #24
 494:	91020000 	mrsls	r0, (UNDEF: 2)
 498:	01ce0f68 	biceq	r0, lr, r8, ror #30
 49c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 4a0:	00481001 	subeq	r1, r8, r1
 4a4:	91020000 	mrsls	r0, (UNDEF: 2)
 4a8:	99160077 	ldmdbls	r6, {r0, r1, r2, r4, r5, r6}
 4ac:	01000001 	tsteq	r0, r1
 4b0:	044206fc 	strbeq	r0, [r2], #-1788	; 0xfffff904
 4b4:	00422000 	subeq	r2, r2, r0
 4b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4bc:	000003aa 	andeq	r0, r0, sl, lsr #7
 4c0:	01007817 	tsteq	r0, r7, lsl r8
 4c4:	002c17fc 	strdeq	r1, [ip], -ip	; <UNPREDICTABLE>
 4c8:	91020000 	mrsls	r0, (UNDEF: 2)
 4cc:	0079176c 	rsbseq	r1, r9, ip, ror #14
 4d0:	2c1efc01 	ldccs	12, cr15, [lr], {1}
 4d4:	02000000 	andeq	r0, r0, #0
 4d8:	30186891 	mulscc	r8, r1, r8
 4dc:	01000001 	tsteq	r0, r1
 4e0:	004810fe 	strdeq	r1, [r8], #-14
 4e4:	91020000 	mrsls	r0, (UNDEF: 2)
 4e8:	67160077 			; <UNDEFINED> instruction: 0x67160077
 4ec:	01000001 	tsteq	r0, r1
 4f0:	040606f3 	streq	r0, [r6], #-1779	; 0xfffff90d
 4f4:	003c2000 	eorseq	r2, ip, r0
 4f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4fc:	000003ce 	andeq	r0, r0, lr, asr #7
 500:	01006317 	tsteq	r0, r7, lsl r3
 504:	004825f3 	strdeq	r2, [r8], #-83	; 0xffffffad
 508:	91020000 	mrsls	r0, (UNDEF: 2)
 50c:	8e190077 	mrchi	0, 0, r0, cr9, cr7, {3}
 510:	01000001 	tsteq	r0, r1
 514:	03e406eb 	mvneq	r0, #246415360	; 0xeb00000
 518:	00222000 	eoreq	r2, r2, r0
 51c:	9c010000 	stcls	0, cr0, [r1], {-0}
 520:	00020116 	andeq	r0, r2, r6, lsl r1
 524:	06e20100 	strbteq	r0, [r2], r0, lsl #2
 528:	200003a8 	andcs	r0, r0, r8, lsr #7
 52c:	0000003c 	andeq	r0, r0, ip, lsr r0
 530:	04069c01 	streq	r9, [r6], #-3073	; 0xfffff3ff
 534:	071a0000 	ldreq	r0, [sl, -r0]
 538:	01000002 	tsteq	r0, r2
 53c:	004822e2 	subeq	r2, r8, r2, ror #5
 540:	91020000 	mrsls	r0, (UNDEF: 2)
 544:	3e1b0077 	mrccc	0, 0, r0, cr11, cr7, {3}
 548:	01000002 	tsteq	r0, r2
 54c:	00480fd8 	ldrdeq	r0, [r8], #-248	; 0xffffff08
 550:	03680000 	cmneq	r8, #0
 554:	00402000 	subeq	r2, r0, r0
 558:	9c010000 	stcls	0, cr0, [r1], {-0}
 55c:	0000042f 	andeq	r0, r0, pc, lsr #8
 560:	0076721c 	rsbseq	r7, r6, ip, lsl r2
 564:	4810dd01 	ldmdami	r0, {r0, r8, sl, fp, ip, lr, pc}
 568:	02000000 	andeq	r0, r0, #0
 56c:	1b006f91 	blne	1c3b8 <startup-0x1ffe3c48>
 570:	00000253 	andeq	r0, r0, r3, asr r2
 574:	480fce01 	stmdami	pc, {r0, r9, sl, fp, lr, pc}	; <UNPREDICTABLE>
 578:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 57c:	40200003 	eormi	r0, r0, r3
 580:	01000000 	mrseq	r0, (UNDEF: 0)
 584:	0004589c 	muleq	r4, ip, r8
 588:	76721c00 	ldrbtvc	r1, [r2], -r0, lsl #24
 58c:	10d30100 	sbcsne	r0, r3, r0, lsl #2
 590:	00000048 	andeq	r0, r0, r8, asr #32
 594:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 598:	0001781b 	andeq	r7, r1, fp, lsl r8
 59c:	0fc40100 	svceq	0x00c40100
 5a0:	00000048 	andeq	r0, r0, r8, asr #32
 5a4:	200002f4 	strdcs	r0, [r0], -r4
 5a8:	00000034 	andeq	r0, r0, r4, lsr r0
 5ac:	04819c01 	streq	r9, [r1], #3073	; 0xc01
 5b0:	721c0000 	andsvc	r0, ip, #0
 5b4:	c9010076 	stmdbgt	r1, {r1, r2, r4, r5, r6}
 5b8:	00004810 	andeq	r4, r0, r0, lsl r8
 5bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5c0:	02c71600 	sbceq	r1, r7, #0, 12
 5c4:	bd010000 	stclt	0, cr0, [r1, #-0]
 5c8:	0002ca06 	andeq	ip, r2, r6, lsl #20
 5cc:	00002a20 	andeq	r2, r0, r0, lsr #20
 5d0:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
 5d4:	1a000004 	bne	5ec <startup-0x1ffffa14>
 5d8:	00000249 	andeq	r0, r0, r9, asr #4
 5dc:	4825bd01 	stmdami	r5!, {r0, r8, sl, fp, ip, sp, pc}
 5e0:	02000000 	andeq	r0, r0, #0
 5e4:	16007791 			; <UNDEFINED> instruction: 0x16007791
 5e8:	0000026b 	andeq	r0, r0, fp, ror #4
 5ec:	a006b601 	andge	fp, r6, r1, lsl #12
 5f0:	2a200002 	bcs	800600 <startup-0x1f7ffa00>
 5f4:	01000000 	mrseq	r0, (UNDEF: 0)
 5f8:	0004cd9c 	muleq	r4, ip, sp
 5fc:	02071a00 	andeq	r1, r7, #0, 20
 600:	b6010000 	strlt	r0, [r1], -r0
 604:	00004824 	andeq	r4, r0, r4, lsr #16
 608:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 60c:	03171600 	tsteq	r7, #0, 12
 610:	ab010000 	blge	40618 <startup-0x1ffbf9e8>
 614:	00026806 	andeq	r6, r2, r6, lsl #16
 618:	00003820 	andeq	r3, r0, r0, lsr #16
 61c:	f39c0100 	vaddw.u16	q0, q6, d0
 620:	1a000004 	bne	638 <startup-0x1ffff9c8>
 624:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 628:	482bab01 	stmdami	fp!, {r0, r8, r9, fp, sp, pc}
 62c:	02000000 	andeq	r0, r0, #0
 630:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 634:	000002a3 	andeq	r0, r0, r3, lsr #5
 638:	2006a201 	andcs	sl, r6, r1, lsl #4
 63c:	48200002 	stmdami	r0!, {r1}
 640:	01000000 	mrseq	r0, (UNDEF: 0)
 644:	0005249c 	muleq	r5, ip, r4
 648:	00781700 	rsbseq	r1, r8, r0, lsl #14
 64c:	7820a201 	stmdavc	r0!, {r0, r9, sp, pc}
 650:	02000000 	andeq	r0, r0, #0
 654:	631c6f91 	tstvs	ip, #580	; 0x244
 658:	07a40100 	streq	r0, [r4, r0, lsl #2]!
 65c:	00000078 	andeq	r0, r0, r8, ror r0
 660:	00779102 	rsbseq	r9, r7, r2, lsl #2
 664:	0002e41d 	andeq	lr, r2, sp, lsl r4
 668:	069b0100 	ldreq	r0, [fp], r0, lsl #2
 66c:	200001e6 	andcs	r0, r0, r6, ror #3
 670:	0000003a 	andeq	r0, r0, sl, lsr r0
 674:	05559c01 	ldrbeq	r9, [r5, #-3073]	; 0xfffff3ff
 678:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 67c:	1e9b0100 	fmlnee	f0, f3, f0
 680:	00000078 	andeq	r0, r0, r8, ror r0
 684:	1c6f9102 	stfnep	f1, [pc], #-8	; 684 <startup-0x1ffff97c>
 688:	9d010063 	stcls	0, cr0, [r1, #-396]	; 0xfffffe74
 68c:	00007807 	andeq	r7, r0, r7, lsl #16
 690:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 694:	01ee1600 	mvneq	r1, r0, lsl #12
 698:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 69c:	0001c206 	andeq	ip, r1, r6, lsl #4
 6a0:	00002420 	andeq	r2, r0, r0, lsr #8
 6a4:	7a9c0100 	bvc	fe700aac <graphic_pixel_clear+0xde700216>
 6a8:	17000005 	strne	r0, [r0, -r5]
 6ac:	0100736d 	tsteq	r0, sp, ror #6
 6b0:	00251f8e 	eoreq	r1, r5, lr, lsl #31
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	d8160074 	ldmdale	r6, {r2, r4, r5, r6}
 6bc:	01000002 	tsteq	r0, r2
 6c0:	018c067c 	orreq	r0, ip, ip, ror r6
 6c4:	00362000 	eorseq	r2, r6, r0
 6c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6cc:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
 6d0:	00736d17 	rsbseq	r6, r3, r7, lsl sp
 6d4:	251f7c01 	ldrcs	r7, [pc, #-3073]	; fffffadb <graphic_pixel_clear+0xdffff245>
 6d8:	02000000 	andeq	r0, r0, #0
 6dc:	940e6c91 	strls	r6, [lr], #-3217	; 0xfffff36f
 6e0:	24200001 	strtcs	r0, [r0], #-1
 6e4:	1c000000 	stcne	0, cr0, [r0], {-0}
 6e8:	84010069 	strhi	r0, [r1], #-105	; 0xffffff97
 6ec:	00002c0b 	andeq	r2, r0, fp, lsl #24
 6f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6f4:	4a1e0000 	bmi	7806fc <startup-0x1f87f904>
 6f8:	01000001 	tsteq	r0, r1
 6fc:	01480671 	hvceq	32865	; 0x8061
 700:	00442000 	subeq	r2, r4, r0
 704:	9c010000 	stcls	0, cr0, [r1], {-0}
 708:	0001d31e 	andeq	sp, r1, lr, lsl r3
 70c:	06690100 	strbteq	r0, [r9], -r0, lsl #2
 710:	20000134 	andcs	r0, r0, r4, lsr r1
 714:	00000014 	andeq	r0, r0, r4, lsl r0
 718:	121f9c01 	andsne	r9, pc, #256	; 0x100
 71c:	01000003 	tsteq	r0, r3
 720:	007c064e 	rsbseq	r0, ip, lr, asr #12
 724:	00b82000 	adcseq	r2, r8, r0
 728:	9c010000 	stcls	0, cr0, [r1], {-0}
 72c:	0001dc20 	andeq	sp, r1, r0, lsr #24
 730:	02500100 	subseq	r0, r0, #0, 2
 734:	0000002c 	andeq	r0, r0, ip, lsr #32
 738:	000005fe 	strdeq	r0, [r0], -lr
 73c:	f7200014 			; <UNDEFINED> instruction: 0xf7200014
 740:	01000002 	tsteq	r0, r2
 744:	002c0251 	eoreq	r0, ip, r1, asr r2
 748:	06100000 	ldreq	r0, [r0], -r0
 74c:	00140000 	andseq	r0, r4, r0
 750:	3867701c 	stmdacc	r7!, {r2, r3, r4, ip, sp, lr}^
 754:	0c530100 	ldfeqe	f0, [r3], {-0}
 758:	0000015f 	andeq	r0, r0, pc, asr r1
 75c:	1c689102 	stfnep	f1, [r8], #-8
 760:	00376770 	eorseq	r6, r7, r0, ror r7
 764:	5f0c5401 	svcpl	0x000c5401
 768:	02000001 	andeq	r0, r0, #1
 76c:	701c6091 	mulsvc	ip, r1, r0
 770:	01003667 	tsteq	r0, r7, ror #12
 774:	015f0c55 	cmpeq	pc, r5, asr ip	; <UNPREDICTABLE>
 778:	91020000 	mrsls	r0, (UNDEF: 2)
 77c:	67701c58 			; <UNDEFINED> instruction: 0x67701c58
 780:	56010035 			; <UNDEFINED> instruction: 0x56010035
 784:	00015f0c 	andeq	r5, r1, ip, lsl #30
 788:	50910200 	addspl	r0, r1, r0, lsl #4
 78c:	3467701c 	strbtcc	r7, [r7], #-28	; 0xffffffe4
 790:	0c570100 	ldfeqe	f0, [r7], {-0}
 794:	0000015f 	andeq	r0, r0, pc, asr r1
 798:	1c489102 	stfnep	f1, [r8], {2}
 79c:	00336770 	eorseq	r6, r3, r0, ror r7
 7a0:	5f0c5801 	svcpl	0x000c5801
 7a4:	02000001 	andeq	r0, r0, #1
 7a8:	701c4091 	mulsvc	ip, r1, r0
 7ac:	01003267 	tsteq	r0, r7, ror #4
 7b0:	015f0c59 	cmpeq	pc, r9, asr ip	; <UNPREDICTABLE>
 7b4:	91030000 	mrsls	r0, (UNDEF: 3)
 7b8:	701c7fb8 			; <UNDEFINED> instruction: 0x701c7fb8
 7bc:	01003167 	tsteq	r0, r7, ror #2
 7c0:	015f0c5a 	cmpeq	pc, sl, asr ip	; <UNPREDICTABLE>
 7c4:	91030000 	mrsls	r0, (UNDEF: 3)
 7c8:	00007fb0 			; <UNDEFINED> instruction: 0x00007fb0
 7cc:	0000007c 	andeq	r0, r0, ip, ror r0
 7d0:	03150004 	tsteq	r5, #4
 7d4:	01040000 	mrseq	r0, (UNDEF: 4)
 7d8:	0000003e 	andeq	r0, r0, lr, lsr r0
 7dc:	0003490c 	andeq	r4, r3, ip, lsl #18
	...
 7ec:	0004b700 	andeq	fp, r4, r0, lsl #14
 7f0:	03350200 	teqeq	r5, #0, 4
 7f4:	24010000 	strcs	r0, [r1], #-0
 7f8:	00089606 	andeq	r9, r8, r6, lsl #12
 7fc:	00000620 	andeq	r0, r0, r0, lsr #12
 800:	029c0100 	addseq	r0, ip, #0, 2
 804:	0000020f 	andeq	r0, r0, pc, lsl #4
 808:	90061d01 	andls	r1, r6, r1, lsl #26
 80c:	06200008 	strteq	r0, [r0], -r8
 810:	01000000 	mrseq	r0, (UNDEF: 0)
 814:	02f7029c 	rscseq	r0, r7, #156, 4	; 0xc0000009
 818:	16010000 	strne	r0, [r1], -r0
 81c:	00088a06 	andeq	r8, r8, r6, lsl #20
 820:	00000620 	andeq	r0, r0, r0, lsr #12
 824:	029c0100 	addseq	r0, ip, #0, 2
 828:	000001dc 	ldrdeq	r0, [r0], -ip
 82c:	84060f01 	strhi	r0, [r6], #-3841	; 0xfffff0ff
 830:	06200008 	strteq	r0, [r0], -r8
 834:	01000000 	mrseq	r0, (UNDEF: 0)
 838:	0353029c 	cmpeq	r3, #156, 4	; 0xc0000009
 83c:	06010000 	streq	r0, [r1], -r0
 840:	00000001 	andeq	r0, r0, r1
 844:	00000c20 	andeq	r0, r0, r0, lsr #24
 848:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  38:	0b3b0b3a 	bleq	ec2d28 <startup-0x1f13d2d8>
  3c:	13490b39 	movtne	r0, #39737	; 0x9b39
  40:	00000b38 	andeq	r0, r0, r8, lsr fp
  44:	0b002405 	bleq	9060 <startup-0x1fff6fa0>
  48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  4c:	0600000e 	streq	r0, [r0], -lr
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	16070000 	strne	r0, [r7], -r0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	0013490b 	andseq	r4, r3, fp, lsl #18
  64:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	00130119 	andseq	r0, r3, r9, lsl r1
  80:	00050900 	andeq	r0, r5, r0, lsl #18
  84:	0b3a0803 	bleq	e82098 <startup-0x1f17df68>
  88:	0b390b3b 	bleq	e42d7c <startup-0x1f1bd284>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	0f0a0000 	svceq	0x000a0000
  94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  98:	0b000013 	bleq	ec <startup-0x1fffff14>
  9c:	0e03012e 	adfeqsp	f0, f3, #0.5
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  b0:	00000019 	andeq	r0, r0, r9, lsl r0
  b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b8:	030b130e 	movweq	r1, #45838	; 0xb30e
  bc:	110e1b0e 	tstne	lr, lr, lsl #22
  c0:	10061201 	andne	r1, r6, r1, lsl #4
  c4:	02000017 	andeq	r0, r0, #23
  c8:	0b0b0024 	bleq	2c0160 <startup-0x1fd3fea0>
  cc:	0e030b3e 	vmoveq.16	d3[0], r0
  d0:	24030000 	strcs	r0, [r3], #-0
  d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  d8:	0008030b 	andeq	r0, r8, fp, lsl #6
  dc:	000f0400 	andeq	r0, pc, r0, lsl #8
  e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  e4:	13050000 	movwne	r0, #20480	; 0x5000
  e8:	3a0b0b01 	bcc	2c2cf4 <startup-0x1fd3d30c>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	0013010b 	andseq	r0, r3, fp, lsl #2
  f4:	000d0600 	andeq	r0, sp, r0, lsl #12
  f8:	0b3a0803 	bleq	e8210c <startup-0x1f17def4>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	16070000 	strne	r0, [r7], -r0
 108:	3a0e0300 	bcc	380d10 <startup-0x1fc7f2f0>
 10c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 110:	0013490b 	andseq	r4, r3, fp, lsl #18
 114:	01130800 	tsteq	r3, r0, lsl #16
 118:	0b0b0e03 	bleq	2c392c <startup-0x1fd3c6d4>
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	13010b39 	movwne	r0, #6969	; 0x1b39
 124:	0d090000 	stceq	0, cr0, [r9, #-0]
 128:	3a0e0300 	bcc	380d30 <startup-0x1fc7f2d0>
 12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 134:	0a00000b 	beq	168 <startup-0x1ffffe98>
 138:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	0b39053b 	bleq	e41634 <startup-0x1f1be9cc>
 144:	01111927 	tsteq	r1, r7, lsr #18
 148:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 14c:	00194297 	mulseq	r9, r7, r2
 150:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 154:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 158:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 15c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 160:	06120111 			; <UNDEFINED> instruction: 0x06120111
 164:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 168:	00130119 	andseq	r0, r3, r9, lsl r1
 16c:	00050c00 	andeq	r0, r5, r0, lsl #24
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	0b39053b 	bleq	e41668 <startup-0x1f1be998>
 178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 17c:	340d0000 	strcc	r0, [sp], #-0
 180:	3a080300 	bcc	200d88 <startup-0x1fdff278>
 184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 18c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 190:	0111010b 	tsteq	r1, fp, lsl #2
 194:	00000612 	andeq	r0, r0, r2, lsl r6
 198:	0300340f 	movweq	r3, #1039	; 0x40f
 19c:	3b0b3a0e 	blcc	2ce9dc <startup-0x1fd31624>
 1a0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1a4:	00180213 	andseq	r0, r8, r3, lsl r2
 1a8:	00051000 	andeq	r1, r5, r0
 1ac:	0b3a0803 	bleq	e821c0 <startup-0x1f17de40>
 1b0:	0b39053b 	bleq	e416a4 <startup-0x1f1be95c>
 1b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1c8:	11134919 	tstne	r3, r9, lsl r9
 1cc:	40061201 	andmi	r1, r6, r1, lsl #4
 1d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d4:	00001301 	andeq	r1, r0, r1, lsl #6
 1d8:	11010b12 	tstne	r1, r2, lsl fp
 1dc:	01061201 	tsteq	r6, r1, lsl #4
 1e0:	13000013 	movwne	r0, #19
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	0b39053b 	bleq	e416e0 <startup-0x1f1be920>
 1f0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1f4:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
 1f8:	15000000 	strne	r0, [r0, #-0]
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	0b39053b 	bleq	e416f8 <startup-0x1f1be908>
 208:	01111927 	tsteq	r1, r7, lsr #18
 20c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 210:	01194297 			; <UNDEFINED> instruction: 0x01194297
 214:	16000013 			; <UNDEFINED> instruction: 0x16000013
 218:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	0b390b3b 	bleq	e42f14 <startup-0x1f1bd0ec>
 224:	01111927 	tsteq	r1, r7, lsr #18
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 230:	17000013 	smladne	r0, r3, r0, r0
 234:	08030005 	stmdaeq	r3, {r0, r2}
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	13490b39 	movtne	r0, #39737	; 0x9b39
 240:	00001802 	andeq	r1, r0, r2, lsl #16
 244:	03003418 	movweq	r3, #1048	; 0x418
 248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
 24c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 250:	00180213 	andseq	r0, r8, r3, lsl r2
 254:	002e1900 	eoreq	r1, lr, r0, lsl #18
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 26c:	1a000019 	bne	2d8 <startup-0x1ffffd28>
 270:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	13490b39 	movtne	r0, #39737	; 0x9b39
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	3f012e1b 	svccc	0x00012e1b
 284:	3a0e0319 	bcc	380ef0 <startup-0x1fc7f110>
 288:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 290:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 294:	96184006 	ldrls	r4, [r8], -r6
 298:	13011942 	movwne	r1, #6466	; 0x1942
 29c:	341c0000 	ldrcc	r0, [ip], #-0
 2a0:	3a080300 	bcc	200ea8 <startup-0x1fdff158>
 2a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2ac:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 2b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2b4:	0b3a0e03 	bleq	e83ac8 <startup-0x1f17c538>
 2b8:	0b390b3b 	bleq	e42fac <startup-0x1f1bd054>
 2bc:	01111927 	tsteq	r1, r7, lsr #18
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2c8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 2cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	0b390b3b 	bleq	e42fc8 <startup-0x1f1bd038>
 2d8:	01111927 	tsteq	r1, r7, lsr #18
 2dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2e0:	00194297 	mulseq	r9, r7, r2
 2e4:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	0b3b0b3a 	bleq	ec2fdc <startup-0x1f13d024>
 2f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2fc:	20000019 	andcs	r0, r0, r9, lsl r0
 300:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <startup-0x1f17c4e8>
 308:	0b390b3b 	bleq	e42ffc <startup-0x1f1bd004>
 30c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 310:	00001301 	andeq	r1, r0, r1, lsl #6
 314:	01110100 	tsteq	r1, r0, lsl #2
 318:	0b130e25 	bleq	4c3bb4 <startup-0x1fb3c44c>
 31c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 320:	01111755 	tsteq	r1, r5, asr r7
 324:	00001710 	andeq	r1, r0, r0, lsl r7
 328:	3f002e02 	svccc	0x00002e02
 32c:	3a0e0319 	bcc	380f98 <startup-0x1fc7f068>
 330:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 334:	1119270b 	tstne	r9, fp, lsl #14
 338:	40061201 	andmi	r1, r6, r1, lsl #4
 33c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 340:	Address 0x0000000000000340 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000006a 	andeq	r0, r0, sl, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01400002 	cmpeq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000007c 	andcs	r0, r0, ip, ror r0
  34:	00000806 	andeq	r0, r0, r6, lsl #16
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	07cc0002 	strbeq	r0, [ip, r2]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000884 	andcs	r0, r0, r4, lsl #17
  54:	00000018 	andeq	r0, r0, r8, lsl r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000072 	andeq	r0, r0, r2, ror r0
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
  20:	00632e67 	rsbeq	r2, r3, r7, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	01160320 	tsteq	r6, r0, lsr #6
  34:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
  38:	04020010 	streq	r0, [r2], #-16
  3c:	15052001 	strne	r2, [r5, #-1]
  40:	01040200 	mrseq	r0, R12_usr
  44:	0008053c 	andeq	r0, r8, ip, lsr r5
  48:	3c010402 	cfstrscc	mvf0, [r1], {2}
  4c:	200f0522 	andcs	r0, pc, r2, lsr #10
  50:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
  54:	03052105 	movweq	r2, #20741	; 0x5105
  58:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
  5c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
  60:	11054b08 	tstne	r5, r8, lsl #22
  64:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
  68:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
  6c:	01052e08 	tsteq	r5, r8, lsl #28
  70:	00050231 	andeq	r0, r5, r1, lsr r2
  74:	043d0101 	ldrteq	r0, [sp], #-257	; 0xfffffeff
  78:	00030000 	andeq	r0, r3, r0
  7c:	0000001d 	andeq	r0, r0, sp, lsl r0
  80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  84:	0101000d 	tsteq	r1, sp
  88:	00000101 	andeq	r0, r0, r1, lsl #2
  8c:	00000100 	andeq	r0, r0, r0, lsl #2
  90:	616d0001 	cmnvs	sp, r1
  94:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
  98:	00000000 	andeq	r0, r0, r0
  9c:	00010500 	andeq	r0, r1, r0, lsl #10
  a0:	007c0205 	rsbseq	r0, ip, r5, lsl #4
  a4:	ce032000 	cdpgt	0, 0, cr2, cr3, cr0, {0}
  a8:	02050100 	andeq	r0, r5, #0, 2
  ac:	0c052f3d 	stceq	15, cr2, [r5], {61}	; 0x3d
  b0:	9f9f5930 	svcls	0x009f5930
  b4:	9f9f9f9f 	svcls	0x009f9f9f
  b8:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
  bc:	00960104 	addseq	r0, r6, r4, lsl #2
  c0:	4b010402 	blmi	410d0 <startup-0x1ffbef30>
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	0301053b 	movweq	r0, #5435	; 0x153b
  cc:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
  d0:	20220530 	eorcs	r0, r2, r0, lsr r5
  d4:	5c300105 	ldfpls	f0, [r0], #-20	; 0xffffffec
  d8:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
  dc:	0205200c 	andeq	r2, r5, #12
  e0:	200c052f 	andcs	r0, ip, pc, lsr #10
  e4:	052f0205 	streq	r0, [pc, #-517]!	; fffffee7 <graphic_pixel_clear+0xdffff651>
  e8:	0205200b 	andeq	r2, r5, #11
  ec:	200c052f 	andcs	r0, ip, pc, lsr #10
  f0:	052f0705 	streq	r0, [pc, #-1797]!	; fffff9f3 <graphic_pixel_clear+0xdffff15d>
  f4:	04020008 	streq	r0, [r2], #-8
  f8:	12052001 	andne	r2, r5, #1
  fc:	01040200 	mrseq	r0, R12_usr
 100:	0007052e 	andeq	r0, r7, lr, lsr #10
 104:	3c010402 	cfstrscc	mvf0, [r1], {2}
 108:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 10c:	0105200c 	tsteq	r5, ip
 110:	0b05a12f 	bleq	1685d4 <startup-0x1fe97a2c>
 114:	2e020551 	cfrshl32cs	mvfx2, mvfx1, r0
 118:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 11c:	00220304 	eoreq	r0, r2, r4, lsl #6
 120:	2f030402 	svccs	0x00030402
 124:	03040200 	movweq	r0, #16896	; 0x4200
 128:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 12c:	1b052f03 	blne	14bd40 <startup-0x1feb42c0>
 130:	03040200 	movweq	r0, #16896	; 0x4200
 134:	00140529 	andseq	r0, r4, r9, lsr #10
 138:	3c010402 	cfstrscc	mvf0, [r1], {2}
 13c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 140:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 144:	055b4401 	ldrbeq	r4, [fp, #-1025]	; 0xfffffbff
 148:	01055102 	tsteq	r5, r2, lsl #2
 14c:	06054f9f 			; <UNDEFINED> instruction: 0x06054f9f
 150:	20040568 	andcs	r0, r4, r8, ror #10
 154:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 158:	0e056602 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx2
 15c:	4b010520 	blmi	415e4 <startup-0x1ffbea1c>
 160:	68060577 	stmdavs	r6, {r0, r1, r2, r4, r5, r6, r8, sl}
 164:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 168:	04054b08 	streq	r4, [r5], #-2824	; 0xfffff4f8
 16c:	2f02059e 	svccs	0x0002059e
 170:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 174:	056a6701 	strbeq	r6, [sl, #-1793]!	; 0xfffff8ff
 178:	3d2f6802 	stccc	8, cr6, [pc, #-8]!	; 178 <startup-0x1ffffe88>
 17c:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 180:	3d2f3d02 	stccc	13, cr3, [pc, #-8]!	; 180 <startup-0x1ffffe80>
 184:	692f0105 	stmdbvs	pc!, {r0, r2, r8}	; <UNPREDICTABLE>
 188:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 18c:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 190:	6702054d 	strvs	r0, [r2, -sp, asr #10]
 194:	01053d3d 	tsteq	r5, sp, lsr sp
 198:	02054d59 	andeq	r4, r5, #5696	; 0x1640
 19c:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffff467 <graphic_pixel_clear+0xdfffebd1>
 1a0:	10052f15 	andne	r2, r5, r5, lsl pc
 1a4:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 1a8:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 1ac:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 1b0:	0d053d02 	stceq	13, cr3, [r5, #-8]
 1b4:	2f020520 	svccs	0x00020520
 1b8:	3d15053d 	cfldr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 1bc:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 1c0:	0905200d 	stmdbeq	r5, {r0, r2, r3, sp}
 1c4:	2f01052f 	svccs	0x0001052f
 1c8:	3d0205a1 	cfstr32cc	mvfx0, [r2, #-644]	; 0xfffffd7c
 1cc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 1d0:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 1d4:	02053d15 	andeq	r3, r5, #1344	; 0x540
 1d8:	200d0559 	andcs	r0, sp, r9, asr r5
 1dc:	052f0905 	streq	r0, [pc, #-2309]!	; fffff8df <graphic_pixel_clear+0xdffff049>
 1e0:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 1e4:	0a056707 	beq	159e08 <startup-0x1fea61f8>
 1e8:	01040200 	mrseq	r0, R12_usr
 1ec:	001e0520 	andseq	r0, lr, r0, lsr #10
 1f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1f4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 1f8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1fc:	593d3002 	ldmdbpl	sp!, {r1, ip, sp}
 200:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 204:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1f8 <startup-0x1ffffe08>
 208:	01053d3d 	tsteq	r5, sp, lsr sp
 20c:	07053f3d 	smladxeq	r5, sp, pc, r3	; <UNPREDICTABLE>
 210:	000a0567 	andeq	r0, sl, r7, ror #10
 214:	20010402 	andcs	r0, r1, r2, lsl #8
 218:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 21c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 220:	04020007 	streq	r0, [r2], #-7
 224:	02053c01 	andeq	r3, r5, #256	; 0x100
 228:	05593d30 	ldrbeq	r3, [r9, #-3376]	; 0xfffff2d0
 22c:	054d3d01 	strbeq	r3, [sp, #-3329]	; 0xfffff2ff
 230:	1005591b 	andne	r5, r5, fp, lsl r9
 234:	4b05052e 	blmi	1416f4 <startup-0x1febe90c>
 238:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 23c:	01055a02 	tsteq	r5, r2, lsl #20
 240:	10054e9f 	mulne	r5, pc, lr	; <UNPREDICTABLE>
 244:	59070559 	stmdbpl	r7, {r0, r3, r4, r6, r8, sl}
 248:	2f2e0505 	svccs	0x002e0505
 24c:	4d4b0105 	stfmie	f0, [fp, #-20]	; 0xffffffec
 250:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
 254:	1b052e13 	blne	14baa8 <startup-0x1feb4558>
 258:	01040200 	mrseq	r0, R12_usr
 25c:	0013052e 	andseq	r0, r3, lr, lsr #10
 260:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 264:	03040200 	movweq	r0, #16896	; 0x4200
 268:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
 26c:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
 270:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 274:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
 278:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 27c:	33054a06 	movwcc	r4, #23046	; 0x5a06
 280:	06040200 	streq	r0, [r4], -r0, lsl #4
 284:	003b052e 	eorseq	r0, fp, lr, lsr #10
 288:	2e070402 	cdpcs	4, 0, cr0, cr7, cr2, {0}
 28c:	02003305 	andeq	r3, r0, #335544320	; 0x14000000
 290:	002e0704 	eoreq	r0, lr, r4, lsl #14
 294:	06090402 	streq	r0, [r9], -r2, lsl #8
 298:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 29c:	24052e0a 	strcs	r2, [r5], #-3594	; 0xfffff1f6
 2a0:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 2a4:	4c052006 	stcmi	0, cr2, [r5], {6}
 2a8:	0c040200 	sfmeq	f0, 4, [r4], {-0}
 2ac:	00530574 	subseq	r0, r3, r4, ror r5
 2b0:	2e0c0402 	cdpcs	4, 0, cr0, cr12, cr2, {0}
 2b4:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 2b8:	052e0d04 	streq	r0, [lr, #-3332]!	; 0xfffff2fc
 2bc:	04020053 	streq	r0, [r2], #-83	; 0xffffffad
 2c0:	02002e0d 	andeq	r2, r0, #13, 28	; 0xd0
 2c4:	2e060f04 	cdpcs	15, 0, cr0, cr6, cr4, {0}
 2c8:	10040200 	andne	r0, r4, r0, lsl #4
 2cc:	0044052e 	subeq	r0, r4, lr, lsr #10
 2d0:	06120402 	ldreq	r0, [r2], -r2, lsl #8
 2d4:	006d0520 	rsbeq	r0, sp, r0, lsr #10
 2d8:	20120402 	andscs	r0, r2, r2, lsl #8
 2dc:	02007405 	andeq	r7, r0, #83886080	; 0x5000000
 2e0:	052e1204 	streq	r1, [lr, #-516]!	; 0xfffffdfc
 2e4:	0402007c 	streq	r0, [r2], #-124	; 0xffffff84
 2e8:	74052e13 	strvc	r2, [r5], #-3603	; 0xfffff1ed
 2ec:	13040200 	movwne	r0, #16896	; 0x4200
 2f0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 2f4:	002e0615 	eoreq	r0, lr, r5, lsl r6
 2f8:	2e160402 	cfmulscs	mvf0, mvf6, mvf2
 2fc:	02006505 	andeq	r6, r0, #20971520	; 0x1400000
 300:	20061804 	andcs	r1, r6, r4, lsl #16
 304:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 308:	05201804 	streq	r1, [r0, #-2052]!	; 0xfffff7fc
 30c:	0f05210a 	svceq	0x0005210a
 310:	3c190532 	cfldr32cc	mvfx0, [r9], {50}	; 0x32
 314:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 318:	28052006 	stmdacs	r5, {r1, r2, sp}
 31c:	3c32053c 	cfldr32cc	mvfx0, [r2], #-240	; 0xffffff10
 320:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
 324:	0505201f 	streq	r2, [r5, #-31]	; 0xffffffe1
 328:	2f09053c 	svccs	0x0009053c
 32c:	4b05055a 	blmi	14189c <startup-0x1febe764>
 330:	755a0305 	ldrbvc	r0, [sl, #-773]	; 0xfffffcfb
 334:	05840b05 	streq	r0, [r4, #2821]	; 0xb05
 338:	05052e15 	streq	r2, [r5, #-3605]	; 0xfffff1eb
 33c:	3003052e 	andcc	r0, r3, lr, lsr #10
 340:	84150575 	ldrhi	r0, [r5], #-1397	; 0xfffffa8b
 344:	052e1f05 	streq	r1, [lr, #-3845]!	; 0xfffff0fb
 348:	19052e07 	stmdbne	r5, {r0, r1, r2, r9, sl, fp, sp}
 34c:	3c23054b 	cfstr32cc	mvfx0, [r3], #-300	; 0xfffffed4
 350:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 354:	07052010 	smladeq	r5, r0, r0, r2
 358:	054b3d3c 	strbeq	r3, [fp, #-3388]	; 0xfffff2c4
 35c:	15055a0b 	strne	r5, [r5, #-2571]	; 0xfffff5f5
 360:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 364:	5a2f0905 	bpl	bc2780 <startup-0x1f43d880>
 368:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 36c:	02052e0b 	andeq	r2, r5, #11, 28	; 0xb0
 370:	22060520 	andcs	r0, r6, #32, 10	; 0x8000000
 374:	92590405 	subsls	r0, r9, #83886080	; 0x5000000
 378:	91830905 	orrls	r0, r3, r5, lsl #18
 37c:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
 380:	05303c06 	ldreq	r3, [r0, #-3078]!	; 0xfffff3fa
 384:	2705910a 	strcs	r9, [r5, -sl, lsl #2]
 388:	02040200 	andeq	r0, r4, #0, 4
 38c:	05747603 	ldrbeq	r7, [r4, #-1539]!	; 0xfffff9fd
 390:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 394:	02053c01 	andeq	r3, r5, #256	; 0x100
 398:	01040200 	mrseq	r0, R12_usr
 39c:	0309053c 	movweq	r0, #38204	; 0x953c
 3a0:	01053c0f 	tsteq	r5, pc, lsl #24
 3a4:	10054d21 	andne	r4, r5, r1, lsr #26
 3a8:	2e0a054f 	cfsh32cs	mvfx0, mvfx10, #47
 3ac:	053c2205 	ldreq	r2, [ip, #-517]!	; 0xfffffdfb
 3b0:	32052e1c 	andcc	r2, r5, #28, 28	; 0x1c0
 3b4:	2e38052e 	cdpcs	5, 3, cr0, cr8, cr14, {1}
 3b8:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 3bc:	49052e2c 	stmdbmi	r5, {r2, r3, r5, r9, sl, fp, sp}
 3c0:	2e43053c 	mcrcs	5, 2, r0, cr3, cr12, {1}
 3c4:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
 3c8:	6d056666 	stcvs	6, cr6, [r5, #-408]	; 0xfffffe68
 3cc:	4b100558 	blmi	401934 <startup-0x1fbfe6cc>
 3d0:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
 3d4:	0a052e13 	beq	14bc28 <startup-0x1feb43d8>
 3d8:	3c29052e 	cfstr32cc	mvfx0, [r9], #-184	; 0xffffff48
 3dc:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
 3e0:	3f052e39 	svccc	0x00052e39
 3e4:	2e3c052e 	cdpcs	5, 3, cr0, cr12, cr14, {1}
 3e8:	052e3305 	streq	r3, [lr, #-773]!	; 0xfffffcfb
 3ec:	56052e50 			; <UNDEFINED> instruction: 0x56052e50
 3f0:	2e53052e 	cdpcs	5, 5, cr0, cr3, cr14, {1}
 3f4:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
 3f8:	74052e63 	strvc	r2, [r5], #-3683	; 0xfffff19d
 3fc:	587b0558 	ldmdapl	fp!, {r3, r4, r6, r8, sl}^
 400:	054b1005 	strbeq	r1, [fp, #-5]
 404:	13052e16 	movwne	r2, #24086	; 0x5e16
 408:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 40c:	053c2905 	ldreq	r2, [ip, #-2309]!	; 0xfffff6fb
 410:	2c052e2f 	stccs	14, cr2, [r5], {47}	; 0x2f
 414:	2e23052e 	cfsh64cs	mvdx0, mvdx3, #30
 418:	052e4005 	streq	r4, [lr, #-5]!
 41c:	50052e3a 	andpl	r2, r5, sl, lsr lr
 420:	2e56052e 	cdpcs	5, 5, cr0, cr6, cr14, {1}
 424:	052e5305 	streq	r5, [lr, #-773]!	; 0xfffffcfb
 428:	63052e4a 	movwvs	r2, #24138	; 0x5e4a
 42c:	5874052e 	ldmdapl	r4!, {r1, r2, r3, r5, r8, sl}^
 430:	05587b05 	ldrbeq	r7, [r8, #-2821]	; 0xfffff4fb
 434:	0a054b10 	beq	15307c <startup-0x1feacf84>
 438:	3c22052e 	cfstr32cc	mvfx0, [r2], #-184	; 0xffffff48
 43c:	052e2805 	streq	r2, [lr, #-2053]!	; 0xfffff7fb
 440:	1c052e25 	stcne	14, cr2, [r5], {37}	; 0x25
 444:	2e39052e 	cdpcs	5, 3, cr0, cr9, cr14, {1}
 448:	052e3305 	streq	r3, [lr, #-773]!	; 0xfffffcfb
 44c:	43052e49 	movwmi	r2, #24137	; 0x5e49
 450:	2e55052e 	cdpcs	5, 5, cr0, cr5, cr14, {1}
 454:	054a6605 	strbeq	r6, [sl, #-1541]	; 0xfffff9fb
 458:	0105586d 	tsteq	r5, sp, ror #16
 45c:	10054d4b 	andne	r4, r5, fp, asr #26
 460:	2e07054c 	cfsh32cs	mvfx0, mvfx7, #44
 464:	053d1005 	ldreq	r1, [sp, #-5]!
 468:	0d052e07 	stceq	14, cr2, [r5, #-28]	; 0xffffffe4
 46c:	3d08052f 	cfstr32cc	mvfx0, [r8, #-188]	; 0xffffff44
 470:	05230d05 	streq	r0, [r3, #-3333]!	; 0xfffff2fb
 474:	0d052e08 	stceq	14, cr2, [r5, #-32]	; 0xffffffe0
 478:	2e08053d 	mcrcs	5, 0, r0, cr8, cr13, {1}
 47c:	052f1305 	streq	r1, [pc, #-773]!	; 17f <startup-0x1ffffe81>
 480:	19053c08 	stmdbne	r5, {r3, sl, fp, ip, sp}
 484:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
 488:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
 48c:	27052e08 	strcs	r2, [r5, -r8, lsl #28]
 490:	3c08052e 	cfstr32cc	mvfx0, [r8], {46}	; 0x2e
 494:	052f0305 	streq	r0, [pc, #-773]!	; 197 <startup-0x1ffffe69>
 498:	08054b0c 	stmdaeq	r5, {r2, r3, r8, r9, fp, lr}
 49c:	2e19052e 	cfmul64cs	mvdx0, mvdx9, mvdx14
 4a0:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 4a4:	08052f07 	stmdaeq	r5, {r0, r1, r2, r8, r9, sl, fp, sp}
 4a8:	053c7803 	ldreq	r7, [ip, #-2051]!	; 0xfffff7fd
 4ac:	3c0a0301 	stccc	3, cr0, [sl], {1}
 4b0:	0302325c 	movweq	r3, #8796	; 0x225c
 4b4:	6e010100 	adfvss	f0, f1, f0
 4b8:	03000000 	movweq	r0, #0
 4bc:	00002000 	andeq	r2, r0, r0
 4c0:	fb010200 	blx	40cca <startup-0x1ffbf336>
 4c4:	01000d0e 	tsteq	r0, lr, lsl #26
 4c8:	00010101 	andeq	r0, r1, r1, lsl #2
 4cc:	00010000 	andeq	r0, r1, r0
 4d0:	73000100 	movwvc	r0, #256	; 0x100
 4d4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 4d8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	000f0500 	andeq	r0, pc, r0, lsl #10
 4e4:	00000205 	andeq	r0, r0, r5, lsl #4
 4e8:	05172000 	ldreq	r2, [r7, #-0]
 4ec:	21211302 			; <UNDEFINED> instruction: 0x21211302
 4f0:	2101052f 	tstcs	r1, pc, lsr #10
 4f4:	01000302 	tsteq	r0, r2, lsl #6
 4f8:	00010501 	andeq	r0, r1, r1, lsl #10
 4fc:	08840205 	stmeq	r4, {r0, r2, r9}
 500:	0f032000 	svceq	0x00032000
 504:	21020501 	tstcs	r2, r1, lsl #10
 508:	21010513 	tstcs	r1, r3, lsl r5
 50c:	21020524 	tstcs	r2, r4, lsr #10
 510:	21010513 	tstcs	r1, r3, lsl r5
 514:	21020524 	tstcs	r2, r4, lsr #10
 518:	21010513 	tstcs	r1, r3, lsl r5
 51c:	21020524 	tstcs	r2, r4, lsr #10
 520:	21010513 	tstcs	r1, r3, lsl r5
 524:	01000102 	tsteq	r0, r2, lsl #2
 528:	Address 0x0000000000000528 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
   4:	632f7372 			; <UNDEFINED> instruction: 0x632f7372
   8:	72746568 	rsbsvc	r6, r4, #104, 10	; 0x1a000000
   c:	442f6e61 	strtmi	r6, [pc], #-3681	; 14 <startup-0x1fffffec>
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6f6b532f 	svcvs	0x006b532f
  1c:	4d2f616c 	stfmis	f6, [pc, #-432]!	; fffffe74 <graphic_pixel_clear+0xdffff5de>
  20:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffeec <graphic_pixel_clear+0xdffff656>
  24:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; fffffef0 <graphic_pixel_clear+0xdffff65a>
  28:	37303444 	ldrcc	r3, [r0, -r4, asr #8]!
  2c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  30:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  34:	65640030 	strbvs	r0, [r4, #-48]!	; 0xffffffd0
  38:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
  3c:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
  40:	31432055 	qdaddcc	r2, r5, r3
  44:	30312037 	eorscc	r2, r1, r7, lsr r0
  48:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  4c:	32303220 	eorscc	r3, r0, #32, 4
  50:	32383031 	eorscc	r3, r8, #49	; 0x31
  54:	72282034 	eorvc	r2, r8, #52	; 0x34
  58:	61656c65 	cmnvs	r5, r5, ror #24
  5c:	20296573 	eorcs	r6, r9, r3, ror r5
  60:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  64:	20626d75 	rsbcs	r6, r2, r5, ror sp
  68:	6f6e6d2d 	svcvs	0x006e6d2d
  6c:	616e752d 	cmnvs	lr, sp, lsr #10
  70:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
  74:	612d6465 			; <UNDEFINED> instruction: 0x612d6465
  78:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
  7c:	6d2d2073 	stcvs	0, cr2, [sp, #-460]!	; 0xfffffe34
  80:	616f6c66 	cmnvs	pc, r6, ror #24
  84:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  88:	6f733d69 	svcvs	0x00733d69
  8c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  90:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  94:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  98:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  9c:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  a0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  a4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  a8:	6e673d64 	cdpvs	13, 6, cr3, cr7, cr4, {3}
  ac:	00373175 	eorseq	r3, r7, r5, ror r1
  b0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  b4:	31646573 	smccc	18003	; 0x4653
  b8:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
  bc:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
  c0:	755f0032 	ldrbvc	r0, [pc, #-50]	; 96 <startup-0x1fffff6a>
  c4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
  c8:	5f003364 	svcpl	0x00003364
  cc:	73756e75 	cmnvc	r5, #1872	; 0x750
  d0:	00346465 	eorseq	r6, r4, r5, ror #8
  d4:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
  d8:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
  dc:	6f687300 	svcvs	0x00687300
  e0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f0:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
  f4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  f8:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
  fc:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
 100:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 104:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 108:	00726168 	rsbseq	r6, r2, r8, ror #2
 10c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 110:	6c6f705f 	stclvs	0, cr7, [pc], #-380	; ffffff9c <graphic_pixel_clear+0xdffff706>
 114:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 118:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 11c:	6f6c2067 	svcvs	0x006c2067
 120:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 124:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 128:	2064656e 	rsbcs	r6, r4, lr, ror #10
 12c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 130:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 134:	6e007373 	mcrvs	3, 0, r7, cr0, cr3, {3}
 138:	00747865 	rsbseq	r7, r4, r5, ror #16
 13c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 140:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 144:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 148:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 14c:	5f79616c 	svcpl	0x0079616c
 150:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 154:	50500073 	subspl	r0, r0, r3, ror r0
 158:	50594c4f 	subspl	r4, r9, pc, asr #24
 15c:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 160:	45525000 	ldrbmi	r5, [r2, #-0]
 164:	61005443 	tstvs	r0, r3, asr #8
 168:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 16c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 170:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 174:	00726168 	rsbseq	r6, r2, r8, ror #2
 178:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 17c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 180:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 184:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 188:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 18c:	73610072 	cmnvc	r1, #114	; 0x72
 190:	5f696963 	svcpl	0x00696963
 194:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 198:	63736100 	cmnvs	r3, #0, 2
 19c:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 1a0:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 1a4:	796d0079 	stmdbvc	sp!, {r0, r3, r4, r5, r6}^
 1a8:	7172695f 	cmnvc	r2, pc, asr r9
 1ac:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 1b0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 1b4:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1b8:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 1bc:	7961746c 	stmdbvc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 1c0:	6c6f7000 	stclvs	0, cr7, [pc], #-0	; 1c8 <startup-0x1ffffe38>
 1c4:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 1c8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1cc:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
 1d0:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
 1d4:	5f74696e 	svcpl	0x0074696e
 1d8:	00707061 	rsbseq	r7, r0, r1, rrx
 1dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e0:	5f636968 	svcpl	0x00636968
 1e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1e8:	7a696c61 	bvc	1a5b374 <startup-0x1e5a4c8c>
 1ec:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 1f0:	5f79616c 	svcpl	0x0079616c
 1f4:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1f8:	616d0069 	cmnvs	sp, r9, rrx
 1fc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 200:	63736100 	cmnvs	r3, #0, 2
 204:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 208:	616d6d6f 	cmnvs	sp, pc, ror #26
 20c:	6700646e 	strvs	r6, [r0, -lr, ror #8]
 210:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 214:	705f6369 	subsvc	r6, pc, r9, ror #6
 218:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 21c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 220:	64697300 	strbtvs	r7, [r9], #-768	; 0xfffffd00
 224:	6f6c0065 	svcvs	0x006c0065
 228:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
 22c:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
 230:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
 234:	00706565 	rsbseq	r6, r0, r5, ror #10
 238:	4e494c50 	mcrmi	12, 2, r4, cr9, cr0, {2}
 23c:	73610045 	cmnvc	r1, #69	; 0x45
 240:	5f696963 	svcpl	0x00696963
 244:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 248:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 24c:	77730061 	ldrbvc	r0, [r3, -r1, rrx]!
 250:	61007061 	tstvs	r0, r1, rrx
 254:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 258:	6165725f 	cmnvs	r5, pc, asr r2
 25c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 260:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 264:	72726500 	rsbsvc	r6, r2, #0, 10
 268:	6100726f 	tstvs	r0, pc, ror #4
 26c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 270:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 274:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 278:	7500646d 	strvc	r6, [r0, #-1133]	; 0xfffffb93
 27c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 280:	2064656e 	rsbcs	r6, r4, lr, ror #10
 284:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 288:	6f687300 	svcvs	0x00687300
 28c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 290:	7900746e 	stmdbvc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 294:	70657473 	rsbvc	r7, r5, r3, ror r4
 298:	61726400 	cmnvs	r2, r0, lsl #8
 29c:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2a0:	6100656e 	tstvs	r0, lr, ror #10
 2a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2a8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2ac:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2b0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2b4:	00726165 	rsbseq	r6, r2, r5, ror #2
 2b8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2bc:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
 2c0:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
 2c4:	6100656c 	tstvs	r0, ip, ror #10
 2c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2d0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 2d8 <startup-0x1ffffd28>
 2d4:	00617461 	rsbeq	r7, r1, r1, ror #8
 2d8:	616c6564 	cmnvs	ip, r4, ror #10
 2dc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2e0:	006f7263 	rsbeq	r7, pc, r3, ror #4
 2e4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2e8:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 2ec:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2f0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 2f4:	67007465 	strvs	r7, [r0, -r5, ror #8]
 2f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2fc:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 300:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 304:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 308:	006e6565 	rsbeq	r6, lr, r5, ror #10
 30c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 310:	616d0074 	smcvs	53252	; 0xd004
 314:	61006e69 	tstvs	r0, r9, ror #28
 318:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 31c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 320:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 324:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 328:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 32c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 330:	7861746c 	stmdavc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 334:	61726700 	cmnvs	r2, r0, lsl #14
 338:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 33c:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 340:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 344:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 348:	61747300 	cmnvs	r4, r0, lsl #6
 34c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 350:	7300632e 	movwvc	r6, #814	; 0x32e
 354:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 358:	Address 0x0000000000000358 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000040 	andeq	r0, r0, r0, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000050 	andcs	r0, r0, r0, asr r0
  3c:	0000002a 	andeq	r0, r0, sl, lsr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	2000007c 	andcs	r0, r0, ip, ror r0
  6c:	000000b8 	strheq	r0, [r0], -r8
  70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  78:	500e4101 	andpl	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000050 	andeq	r0, r0, r0, asr r0
  88:	20000134 	andcs	r0, r0, r4, lsr r1
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000050 	andeq	r0, r0, r0, asr r0
  a4:	20000148 	andcs	r0, r0, r8, asr #2
  a8:	00000044 	andeq	r0, r0, r4, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000050 	andeq	r0, r0, r0, asr r0
  c0:	2000018c 	andcs	r0, r0, ip, lsl #3
  c4:	00000036 	andeq	r0, r0, r6, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000050 	andeq	r0, r0, r0, asr r0
  e0:	200001c2 	andcs	r0, r0, r2, asr #3
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000050 	andeq	r0, r0, r0, asr r0
 100:	200001e6 	andcs	r0, r0, r6, ror #3
 104:	0000003a 	andeq	r0, r0, sl, lsr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000050 	andeq	r0, r0, r0, asr r0
 120:	20000220 	andcs	r0, r0, r0, lsr #4
 124:	00000048 	andeq	r0, r0, r8, asr #32
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000050 	andeq	r0, r0, r0, asr r0
 140:	20000268 	andcs	r0, r0, r8, ror #4
 144:	00000038 	andeq	r0, r0, r8, lsr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000050 	andeq	r0, r0, r0, asr r0
 160:	200002a0 	andcs	r0, r0, r0, lsr #5
 164:	0000002a 	andeq	r0, r0, sl, lsr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000050 	andeq	r0, r0, r0, asr r0
 180:	200002ca 	andcs	r0, r0, sl, asr #5
 184:	0000002a 	andeq	r0, r0, sl, lsr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	200002f4 	strdcs	r0, [r0], -r4
 1a4:	00000034 	andeq	r0, r0, r4, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
 1c0:	20000328 	andcs	r0, r0, r8, lsr #6
 1c4:	00000040 	andeq	r0, r0, r0, asr #32
 1c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	20000368 	andcs	r0, r0, r8, ror #6
 1e4:	00000040 	andeq	r0, r0, r0, asr #32
 1e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000050 	andeq	r0, r0, r0, asr r0
 200:	200003a8 	andcs	r0, r0, r8, lsr #7
 204:	0000003c 	andeq	r0, r0, ip, lsr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	200003e4 	andcs	r0, r0, r4, ror #7
 224:	00000022 	andeq	r0, r0, r2, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0000070d 	andeq	r0, r0, sp, lsl #14
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000050 	andeq	r0, r0, r0, asr r0
 23c:	20000406 	andcs	r0, r0, r6, lsl #8
 240:	0000003c 	andeq	r0, r0, ip, lsr r0
 244:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 248:	41018e02 	tstmi	r1, r2, lsl #28
 24c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 250:	00000007 	andeq	r0, r0, r7
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000050 	andeq	r0, r0, r0, asr r0
 25c:	20000442 	andcs	r0, r0, r2, asr #8
 260:	00000042 	andeq	r0, r0, r2, asr #32
 264:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 268:	41018e02 	tstmi	r1, r2, lsl #28
 26c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 270:	00000007 	andeq	r0, r0, r7
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000050 	andeq	r0, r0, r0, asr r0
 27c:	20000484 	andcs	r0, r0, r4, lsl #9
 280:	0000002c 	andeq	r0, r0, ip, lsr #32
 284:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 288:	41018e02 	tstmi	r1, r2, lsl #28
 28c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 290:	00000007 	andeq	r0, r0, r7
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000050 	andeq	r0, r0, r0, asr r0
 29c:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
 2a0:	000001f6 	strdeq	r0, [r0], -r6
 2a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2ac:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	00000020 	andeq	r0, r0, r0, lsr #32
 2b8:	00000050 	andeq	r0, r0, r0, asr r0
 2bc:	200006a6 	andcs	r0, r0, r6, lsr #13
 2c0:	0000014a 	andeq	r0, r0, sl, asr #2
 2c4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 2c8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 2cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	00000020 	andeq	r0, r0, r0, lsr #32
 2dc:	00000050 	andeq	r0, r0, r0, asr r0
 2e0:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2e4:	00000088 	andeq	r0, r0, r8, lsl #1
 2e8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2ec:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2f8:	00000007 	andeq	r0, r0, r7
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	00000050 	andeq	r0, r0, r0, asr r0
 304:	20000878 	andcs	r0, r0, r8, ror r8
 308:	0000000a 	andeq	r0, r0, sl
 30c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 310:	41018e02 	tstmi	r1, r2, lsl #28
 314:	0000070d 	andeq	r0, r0, sp, lsl #14
 318:	0000000c 	andeq	r0, r0, ip
 31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 320:	7c020001 	stcvc	0, cr0, [r2], {1}
 324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 328:	0000000c 	andeq	r0, r0, ip
 32c:	00000318 	andeq	r0, r0, r8, lsl r3
 330:	20000000 	andcs	r0, r0, r0
 334:	0000000c 	andeq	r0, r0, ip
 338:	0000000c 	andeq	r0, r0, ip
 33c:	00000318 	andeq	r0, r0, r8, lsl r3
 340:	20000884 	andcs	r0, r0, r4, lsl #17
 344:	00000006 	andeq	r0, r0, r6
 348:	0000000c 	andeq	r0, r0, ip
 34c:	00000318 	andeq	r0, r0, r8, lsl r3
 350:	2000088a 	andcs	r0, r0, sl, lsl #17
 354:	00000006 	andeq	r0, r0, r6
 358:	0000000c 	andeq	r0, r0, ip
 35c:	00000318 	andeq	r0, r0, r8, lsl r3
 360:	20000890 	mulcs	r0, r0, r8
 364:	00000006 	andeq	r0, r0, r6
 368:	0000000c 	andeq	r0, r0, ip
 36c:	00000318 	andeq	r0, r0, r8, lsl r3
 370:	20000896 	mulcs	r0, r6, r8
 374:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000884 	andcs	r0, r0, r4, lsl #17
   4:	2000089c 	mulcs	r0, ip, r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
